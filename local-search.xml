<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode179-最大数</title>
    <link href="/2020/07/20/LeetCode179-%E6%9C%80%E5%A4%A7%E6%95%B0/"/>
    <url>/2020/07/20/LeetCode179-%E6%9C%80%E5%A4%A7%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-43-字符串相乘"><a href="#LeetCode-43-字符串相乘" class="headerlink" title="LeetCode 43 字符串相乘"></a>LeetCode 43 字符串相乘</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>给定一组非负整数，重新排列它们的顺序使之组成一个最大的整数。</p><p><strong>示例 1:</strong></p><pre><code class="hljs angelscript">&gt;输入: [<span class="hljs-number">3</span>,<span class="hljs-number">30</span>,<span class="hljs-number">34</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>]&gt;输出: <span class="hljs-number">9534330</span></code></pre></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>网上最多的做法，就是使用语言自带的排序功能，然后自己写一个排序规则，就比如下面这种</p><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">largestNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;        <span class="hljs-keyword">int</span> len=nums.length;        <span class="hljs-keyword">if</span>(len==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;        String[] tmp=<span class="hljs-keyword">new</span> String[len];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++) tmp[i]=nums[i]+<span class="hljs-string">""</span>;        Arrays.sort(tmp,<span class="hljs-keyword">new</span> Comparator&lt;String&gt;()&#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(String s1,String s2)</span></span><span class="hljs-function">            </span>&#123;                String t1=s1+s2;                String t2=s2+s1;                <span class="hljs-keyword">return</span> -t1.compareTo(t2);            &#125;        &#125;);        <span class="hljs-keyword">if</span>(tmp[<span class="hljs-number">0</span>].charAt(<span class="hljs-number">0</span>)==<span class="hljs-string">'0'</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">"0"</span>;        StringBuilder sb=<span class="hljs-keyword">new</span> StringBuilder();        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++) sb.append(tmp[i]);        <span class="hljs-keyword">return</span> sb.toString();    &#125;&#125;</code></pre><p>2020年7月面试shoppe时，面试官拒绝我使用这种写法，然后我面试就翻车了。。。</p><p>回来后，查了一下，发现可以用冒泡排序，两两比较，这样每一次都可以选出来最大的一个元素放在队首。时间复杂度是O(long(n^2))。详细过程过程在下面</p><p>代码如下</p><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">largestNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;        StringBuilder sb=<span class="hljs-keyword">new</span> StringBuilder();        <span class="hljs-keyword">int</span> len=nums.length;        <span class="hljs-keyword">if</span>(len==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;        String[] strs=<span class="hljs-keyword">new</span> String[len];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++) strs[i]=nums[i]+<span class="hljs-string">""</span>;        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)        &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>;j&lt;len;j++)            &#123;                <span class="hljs-comment">//解释下，输入: [3,30,34,5,9]</span>                <span class="hljs-comment">//正常顺序是 330，反序是303，前者大于后者，不需要改变，继续迭代</span>                <span class="hljs-comment">//正常顺序是334，反序是343，前者小于后者，交换位置[34,30,3,5,9]，继续迭代</span>                <span class="hljs-comment">//正常顺序是345，反序是534，前者小于后者，交换位置[5,30,3,34,9]，继续迭代</span>                <span class="hljs-comment">//正常顺序是59，反序是95，前者小于后者，交换位置[9,30,3,34,5]，继续迭代</span>                <span class="hljs-comment">//这样一轮迭代完，可以确定第一个位置是最大的位置。然后依次迭代。最终把数组转成字符串即可</span>                String s1=strs[i]+strs[j];<span class="hljs-comment">//正常顺序</span>                String s2=strs[j]+strs[i];<span class="hljs-comment">//反序</span>                <span class="hljs-keyword">if</span> (s1.compareTo(s2)&lt;<span class="hljs-number">0</span>)<span class="hljs-comment">//如果正常顺序小于反序，就交换两者</span>                &#123;                    String tmp=strs[i];                    strs[i]=strs[j];                    strs[j]=tmp;                &#125;            &#125;        &#125;        <span class="hljs-keyword">for</span> (String s:strs) sb.append(s);        String res=sb.toString();        <span class="hljs-keyword">if</span>(res.charAt(<span class="hljs-number">0</span>)==<span class="hljs-string">'0'</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">"0"</span>;        <span class="hljs-keyword">return</span> res;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>高频面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode43-字符串相乘</title>
    <link href="/2020/07/06/LeetCode43-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/"/>
    <url>/2020/07/06/LeetCode43-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/</url>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-43-字符串相乘"><a href="#LeetCode-43-字符串相乘" class="headerlink" title="LeetCode 43 字符串相乘"></a>LeetCode 43 字符串相乘</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>给定两个以字符串形式表示的非负整数 num1 和 num2，返回 num1 和 num2 的乘积，它们的乘积也表示为字符串形式</p><pre><code class="hljs java">&gt;示例 <span class="hljs-number">2</span>:&gt;输入: num1 = <span class="hljs-string">"123"</span>, num2 = <span class="hljs-string">"456"</span>&gt;输出: <span class="hljs-string">"56088"</span></code></pre></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>根据我们日常乘法运算的规则，列竖式，一个个乘，然后把这些结果相加，就得到了最终结果</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">multiply</span><span class="hljs-params">(String num1, String num2)</span> </span>&#123;        <span class="hljs-keyword">int</span> len1=num1.length();        <span class="hljs-keyword">int</span> len2=num2.length();        StringBuilder res=<span class="hljs-keyword">new</span> StringBuilder();        <span class="hljs-keyword">if</span>(len1==<span class="hljs-number">0</span> || len2==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> res.toString();        <span class="hljs-keyword">if</span>(num1.equals(<span class="hljs-string">"0"</span>)||num2.equals(<span class="hljs-string">"0"</span>)) <span class="hljs-keyword">return</span> <span class="hljs-string">"0"</span>;<span class="hljs-comment">//如果两个字符串有一个为零，那么就返回0</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len1;i++)        &#123;            StringBuilder tmp=<span class="hljs-keyword">new</span> StringBuilder();<span class="hljs-comment">//记录每一次运算后的结果</span>            <span class="hljs-keyword">int</span> m=num1.charAt(len1-<span class="hljs-number">1</span>-i)-<span class="hljs-string">'0'</span>;<span class="hljs-comment">//从num1中取一个数字，取乘num2的每一数字</span>            <span class="hljs-keyword">int</span> carry=<span class="hljs-number">0</span>;<span class="hljs-comment">//进位</span>            <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;len2;j++)            &#123;                <span class="hljs-keyword">int</span> n=num2.charAt(len2-<span class="hljs-number">1</span>-j)-<span class="hljs-string">'0'</span>;<span class="hljs-comment">//从个位</span>                count=n*m+carry;<span class="hljs-comment">//num1中某一位和num2中某一位计算出的结果，再加上进位</span>                carry=count/<span class="hljs-number">10</span>;<span class="hljs-comment">//进位</span>                tmp.append(count%<span class="hljs-number">10</span>);<span class="hljs-comment">//把每一次运算的结果保存到tmp中</span>            &#125;            <span class="hljs-keyword">if</span>(carry&gt;<span class="hljs-number">0</span>) tmp.append(carry);<span class="hljs-comment">//如果进位不为0，就添加进去</span>            tmp.reverse();<span class="hljs-comment">//tmp中保存的结果是逆序的，所以需要翻转一下</span>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;k&lt;i;k++) tmp.append(<span class="hljs-number">0</span>);<span class="hljs-comment">//添加0，个位乘一个数字，和十位乘数字，十位的结果要加0，不明白的话列一个竖式乘法就懂了</span>            res=<span class="hljs-keyword">new</span> StringBuilder(addStr(res.toString(),tmp.toString()));   <span class="hljs-comment">//把这一次的结果和之前结果进行相加</span>        &#125;        <span class="hljs-keyword">return</span> res.toString();    &#125;    <span class="hljs-comment">//把两个字符串进行相加</span>    <span class="hljs-function">String <span class="hljs-title">addStr</span><span class="hljs-params">(String num1, String num2)</span></span><span class="hljs-function">    </span>&#123;         <span class="hljs-keyword">int</span> len1=num1.length(),len2=num2.length();        <span class="hljs-keyword">if</span>(len1==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> num2;        <span class="hljs-keyword">if</span>(len2==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> num1;        <span class="hljs-keyword">int</span> len3=Math.max(len1,len2);        StringBuilder sb=<span class="hljs-keyword">new</span> StringBuilder();        <span class="hljs-keyword">int</span> carry=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len3;i++)        &#123;            <span class="hljs-keyword">int</span> n1=i&gt;len1-<span class="hljs-number">1</span>?<span class="hljs-number">0</span>:num1.charAt(len1-<span class="hljs-number">1</span>-i)-<span class="hljs-string">'0'</span>;            <span class="hljs-keyword">int</span> n2=i&gt;len2-<span class="hljs-number">1</span>?<span class="hljs-number">0</span>:num2.charAt(len2-<span class="hljs-number">1</span>-i)-<span class="hljs-string">'0'</span>;            <span class="hljs-keyword">int</span> n3=n1+n2+carry;            carry=n3/<span class="hljs-number">10</span>;            sb.append(n3%<span class="hljs-number">10</span>);        &#125;        <span class="hljs-keyword">if</span>(carry&gt;=<span class="hljs-number">1</span>) sb.append(<span class="hljs-string">"1"</span>);        <span class="hljs-keyword">return</span> sb.reverse().toString();    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode415-字符串相加</title>
    <link href="/2020/07/06/LeetCode415-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%8A%A0/"/>
    <url>/2020/07/06/LeetCode415-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%8A%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-415-字符串相加"><a href="#LeetCode-415-字符串相加" class="headerlink" title="LeetCode 415 字符串相加"></a>LeetCode 415 字符串相加</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>给定两个字符串形式的非负整数 num1 和num2 ，计算它们的和。</p><p>注意：</p><p>num1 和num2 的长度都小于 5100.<br>num1 和num2 都只包含数字 0-9.<br>num1 和num2 都不包含任何前导零。<br>你不能使用任何內建 BigInteger 库， 也不能直接将输入的字符串转换为整数形式。</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>比较两个字符串的长度，选一个最长的，短的那个前面补0即可。然后从个位开始对应位相加即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code class="hljs java"><span class="hljs-function">String <span class="hljs-title">addStr</span><span class="hljs-params">(String num1, String num2)</span></span><span class="hljs-function">    </span>&#123;         <span class="hljs-keyword">int</span> len1=num1.length(),len2=num2.length();        <span class="hljs-keyword">if</span>(len1==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> num2;        <span class="hljs-keyword">if</span>(len2==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> num1;        <span class="hljs-keyword">int</span> len3=Math.max(len1,len2);<span class="hljs-comment">//选两个字符串中长度最长的</span>        StringBuilder sb=<span class="hljs-keyword">new</span> StringBuilder();        <span class="hljs-keyword">int</span> carry=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len3;i++)        &#123;            <span class="hljs-keyword">int</span> n1=i&gt;len1-<span class="hljs-number">1</span>?<span class="hljs-number">0</span>:num1.charAt(len1-<span class="hljs-number">1</span>-i)-<span class="hljs-string">'0'</span>;<span class="hljs-comment">//从个位开始，如果下标i超过了num1的下标，那么就补0</span>            <span class="hljs-keyword">int</span> n2=i&gt;len2-<span class="hljs-number">1</span>?<span class="hljs-number">0</span>:num2.charAt(len2-<span class="hljs-number">1</span>-i)-<span class="hljs-string">'0'</span>;<span class="hljs-comment">//</span>            <span class="hljs-keyword">int</span> n3=n1+n2+carry;<span class="hljs-comment">//计算对应位相加的结果</span>            carry=n3/<span class="hljs-number">10</span>;<span class="hljs-comment">//计算进位</span>            sb.append(n3%<span class="hljs-number">10</span>);<span class="hljs-comment">//保存结果</span>        &#125;        <span class="hljs-keyword">if</span>(carry&gt;=<span class="hljs-number">1</span>) sb.append(<span class="hljs-string">"1"</span>);<span class="hljs-comment">//如果还存在进位，就添加1</span>        <span class="hljs-keyword">return</span> sb.reverse().toString();<span class="hljs-comment">//上面保留的结果是反序的，需要翻转一下</span>    &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode227-基本运算器2</title>
    <link href="/2020/07/06/LeetCode227-%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E5%99%A82/"/>
    <url>/2020/07/06/LeetCode227-%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E5%99%A82/</url>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-227-基本计算器-II"><a href="#LeetCode-227-基本计算器-II" class="headerlink" title="LeetCode 227. 基本计算器 II"></a>LeetCode 227. 基本计算器 II</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>字符串表达式仅包含非负整数，<code>+</code>， <code>-</code> ，<code>*</code>，<code>/</code> 四种运算符和空格 <code></code>。 整数除法仅保留整数部分。</p><p>示例:</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">输入: <span class="hljs-string">" 3+5 / 2 "</span></span><span class="hljs-meta">&gt;</span><span class="bash">输出: 5</span></code></pre></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>中缀转后缀，没有括号，但是有乘除，所以要比较运算符的优先级</p><p>使用栈+链表：栈用来维护运算符，链表用来记录后缀表达式</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(String s)</span> </span>&#123;        <span class="hljs-keyword">return</span> calBackExp(transferToBackExp(s));    &#125;    <span class="hljs-comment">//计算后缀表达式</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calBackExp</span><span class="hljs-params">(LinkedList&lt;String&gt; list)</span></span><span class="hljs-function">    </span>&#123;        Stack&lt;Integer&gt; stack=<span class="hljs-keyword">new</span> Stack&lt;&gt;();        <span class="hljs-keyword">for</span>(String s:list)        &#123;            <span class="hljs-keyword">if</span>(isNumerical(s))            &#123;                stack.push(Integer.parseInt(s));            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">"+"</span>) || s.equals(<span class="hljs-string">"-"</span>) || s.equals(<span class="hljs-string">"*"</span>) || s.equals(<span class="hljs-string">"/"</span>))&#123;                <span class="hljs-keyword">int</span> n1=stack.pop();                <span class="hljs-keyword">int</span> n2=stack.pop();                <span class="hljs-keyword">int</span> n3=<span class="hljs-number">0</span>;                <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">"+"</span>))&#123;                    n3=n1+n2;                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">"-"</span>))&#123;                    n3=n2-n1;                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">"*"</span>))&#123;                    n3=n1*n2;                &#125;<span class="hljs-keyword">else</span>&#123;                    n3=n2/n1;                &#125;                stack.push(n3);            &#125;        &#125;    <span class="hljs-keyword">return</span> stack.pop();    &#125;<span class="hljs-comment">//中缀转后缀</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> LinkedList&lt;String&gt; <span class="hljs-title">transferToBackExp</span><span class="hljs-params">(String exp)</span></span><span class="hljs-function">    </span>&#123;        Stack&lt;String&gt; stack=<span class="hljs-keyword">new</span> Stack&lt;&gt;();        LinkedList&lt;String&gt; list=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        <span class="hljs-keyword">int</span> len=exp.length();        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)        &#123;            <span class="hljs-keyword">char</span> c=exp.charAt(i);            <span class="hljs-keyword">if</span>(isDigit(c))            &#123;                <span class="hljs-keyword">int</span> k=i+<span class="hljs-number">1</span>;                <span class="hljs-keyword">for</span>(;k&lt;len &amp;&amp; isDigit(exp.charAt(k));k++)&#123;&#125;<span class="hljs-comment">//出现连续数字时，比如6555+4564，直接计算数字的起始位置和终止位置</span>                list.add(exp.substring(i,k));                i=k-<span class="hljs-number">1</span>;            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">'*'</span> || c==<span class="hljs-string">'/'</span>)            &#123;                <span class="hljs-comment">//如果当前运算符是乘除，那么栈顶运算符只要不是加减，就必须出栈，直到是加减或者为空为止</span>                <span class="hljs-keyword">while</span>(!stack.empty() &amp;&amp; (stack.peek().equals(<span class="hljs-string">"*"</span>) || stack.peek().equals(<span class="hljs-string">"/"</span>)))<span class="hljs-comment">//比较优先级</span>                &#123;                    list.add(stack.pop());                &#125;                stack.push(c+<span class="hljs-string">""</span>);            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">'+'</span> || c==<span class="hljs-string">'-'</span>)&#123;<span class="hljs-comment">//如果当前运算符是加减，因为加减运算符是最低的，没有比它低的，所以就必须出栈，直到栈为空。</span>                <span class="hljs-keyword">while</span>(!stack.empty())&#123;                    list.add(stack.pop());                &#125;                stack.push(c+<span class="hljs-string">""</span>);            &#125;        &#125;        <span class="hljs-keyword">while</span>(stack.size()&gt;<span class="hljs-number">0</span>) list.add(stack.pop());<span class="hljs-comment">//如果栈里面还有元素，就依次添加到链表中</span>        <span class="hljs-keyword">return</span> list;    &#125;    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isDigit</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(c-<span class="hljs-string">'0'</span>&gt;=<span class="hljs-number">0</span> &amp;&amp; c-<span class="hljs-string">'0'</span>&lt;=<span class="hljs-number">9</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isNumerical</span><span class="hljs-params">(String s)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;s.length();i++)        &#123;            <span class="hljs-keyword">char</span> c=s.charAt(i);            <span class="hljs-keyword">if</span>(isDigit(c)==<span class="hljs-keyword">false</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode224-基本运算器</title>
    <link href="/2020/07/06/LeetCode224-%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E5%99%A8/"/>
    <url>/2020/07/06/LeetCode224-%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="LeetCode-224-基本运算器"><a href="#LeetCode-224-基本运算器" class="headerlink" title="LeetCode 224 基本运算器"></a>LeetCode 224 基本运算器</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>实现一个基本的计算器来计算一个简单的字符串表达式的值。</p><p>字符串表达式可以包含左括号 <code>(</code> ，右括号 <code>)</code>，加号 <code>+</code> ，减号 <code>-</code>，<strong>非负</strong>整数和空格。</p><p>示例</p><pre><code class="hljs subunit">&gt;输入: "(1+(4<span class="hljs-string">+5</span><span class="hljs-string">+2</span>)<span class="hljs-string">-3</span>)+(6<span class="hljs-string">+8</span>)"&gt;输出: 23</code></pre></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>把中缀表达式转成后缀表达式，这道题只要求加减，没有乘除，所以只要栈不为空，那么运算符进来时，栈里的运算符就要出栈。还要注意括号，如果是左括号，就直接进栈，如果是右括号，栈里元素要出栈到栈顶元素为左括号为止。</p><p>中缀表达式转后缀表达式的核心思路就是<strong>栈+链表</strong>。栈用来存运算符和括号，链表用来存后缀表达式</p><p>后缀表达式用<strong>栈</strong>计算。碰到运算符，比较优先级（栈顶元素优先级<strong>小于</strong>当前运算符，当前运算符就进栈，否则栈顶元素就出栈）</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(String s)</span> </span>&#123;        <span class="hljs-keyword">return</span> calBackExp(transfetToBackExp(s));    &#125;    <span class="hljs-comment">//根据后缀表达式计算最终结果</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calBackExp</span><span class="hljs-params">(LinkedList&lt;String&gt; list)</span></span><span class="hljs-function">    </span>&#123;        Stack&lt;Integer&gt; stack=<span class="hljs-keyword">new</span> Stack&lt;&gt;();        <span class="hljs-keyword">for</span>(String s:list)        &#123;            <span class="hljs-keyword">if</span>(isNumerical(s))&#123;                stack.push(Integer.parseInt(s));            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">"+"</span>) || s.equals(<span class="hljs-string">"-"</span>))&#123;                <span class="hljs-keyword">int</span> n1=stack.pop();                <span class="hljs-keyword">int</span> n2=stack.pop();                <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">"+"</span>)) stack.push(n1+n2);                <span class="hljs-keyword">else</span> stack.push(n2-n1);            &#125;        &#125;        <span class="hljs-keyword">return</span> stack.pop();    &#125;<span class="hljs-comment">//把前缀表达式转成后缀表达式</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> LinkedList&lt;String&gt; <span class="hljs-title">transfetToBackExp</span><span class="hljs-params">(String exp)</span></span>&#123;        LinkedList&lt;String&gt; list=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        Stack&lt;String&gt; stack=<span class="hljs-keyword">new</span> Stack&lt;&gt;();        <span class="hljs-keyword">int</span> len=exp.length();        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)        &#123;            <span class="hljs-keyword">char</span> c=exp.charAt(i);            <span class="hljs-keyword">if</span>(c==<span class="hljs-string">' '</span>) <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//空格就继续循环</span>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(isDigit(c))<span class="hljs-comment">//数字就进入链表</span>            &#123;                <span class="hljs-keyword">int</span> k=i+<span class="hljs-number">1</span>;                <span class="hljs-keyword">for</span>(;k&lt;len &amp;&amp; isDigit(exp.charAt(k));k++)&#123;&#125;                list.add(exp.substring(i,k));                i=k-<span class="hljs-number">1</span>;            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">'('</span>)&#123;                stack.push(<span class="hljs-string">"("</span>);            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">')'</span>)&#123;                <span class="hljs-keyword">while</span>(!stack.empty() &amp;&amp; stack.peek()!=<span class="hljs-string">"("</span>)                &#123;                    list.add(stack.pop());                &#125;                stack.pop();            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c==<span class="hljs-string">'+'</span> || c==<span class="hljs-string">'-'</span>)&#123;                <span class="hljs-keyword">while</span>(!stack.empty() &amp;&amp; !stack.peek().equals(<span class="hljs-string">"("</span>))&#123;                    list.add(stack.pop());                &#125;                                stack.push(c+<span class="hljs-string">""</span>);            &#125;        &#125;                <span class="hljs-keyword">while</span>(stack.size()&gt;<span class="hljs-number">0</span>) list.add(stack.pop());        <span class="hljs-keyword">return</span> list;    &#125;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isDigit</span><span class="hljs-params">(<span class="hljs-keyword">char</span> c)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(c-<span class="hljs-string">'0'</span>&gt;=<span class="hljs-number">0</span> &amp;&amp; c-<span class="hljs-string">'0'</span>&lt;=<span class="hljs-number">9</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isNumerical</span><span class="hljs-params">(String str)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;str.length();i++)        &#123;            <span class="hljs-keyword">if</span>(isDigit(str.charAt(i))==<span class="hljs-keyword">false</span>)  <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode150-逆波兰表达式</title>
    <link href="/2020/07/06/LeetCode150-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2020/07/06/LeetCode150-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode150-逆波兰表达式"><a href="#LeetCode150-逆波兰表达式" class="headerlink" title="LeetCode150 逆波兰表达式"></a>LeetCode150 逆波兰表达式</h1><p>表达式分成前缀表达式（波兰表达式）、中缀表达式、后缀表达式。以3+4*5为例</p><pre><code class="hljs java">前缀表达式：*+<span class="hljs-number">345</span>中缀表达式：<span class="hljs-number">3</span>+<span class="hljs-number">4</span>*<span class="hljs-number">5</span>------&gt;我们日常的运算式子后缀表达式：<span class="hljs-number">345</span>+*------&gt;计算机可以接受的运算式子</code></pre><p>逆波兰表达式也就是后缀表达式，这道题要求我们计算后缀表达式，比较简单，用栈即可。如果是数字就进栈，如果是运算符，栈顶元素连续出栈两次，进行运算。</p><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">evalRPN</span><span class="hljs-params">(String[] tokens)</span> </span>&#123;        Stack&lt;Integer&gt; stack=<span class="hljs-keyword">new</span> Stack&lt;&gt;();        <span class="hljs-keyword">for</span>(String s:tokens)        &#123;            <span class="hljs-keyword">int</span> n1=<span class="hljs-number">0</span>;            <span class="hljs-keyword">int</span> n2=<span class="hljs-number">0</span>;            <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">"+"</span>) || s.equals(<span class="hljs-string">"-"</span>) || s.equals(<span class="hljs-string">"*"</span>) ||s.equals(<span class="hljs-string">"/"</span>) )<span class="hljs-comment">//如果是运算符，进行相应运算</span>            &#123;                n1=stack.pop();<span class="hljs-comment">//栈顶元素出栈</span>                n2=stack.pop();<span class="hljs-comment">//继续出栈</span>                <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">"+"</span>)) stack.push(n1+n2);<span class="hljs-comment">//匹配运算符，进行相应运算</span>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">"-"</span>)) stack.push(n2-n1);                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">"*"</span>)) stack.push(n1*n2);                <span class="hljs-keyword">else</span> stack.push(n2/n1);            &#125;<span class="hljs-keyword">else</span>&#123;                stack.push(Integer.parseInt(s));<span class="hljs-comment">//如果是数字，就直接进栈</span>            &#125;        &#125;        <span class="hljs-keyword">return</span> stack.peek();<span class="hljs-comment">//最后栈顶元素就是最终结果</span>    &#125;&#125;</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/lcl497049972/article/details/83061274" target="_blank" rel="noopener">https://blog.csdn.net/lcl497049972/article/details/83061274</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>秒杀项目-1</title>
    <link href="/2020/06/27/%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-1/"/>
    <url>/2020/06/27/%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-1/</url>
    
    <content type="html"><![CDATA[<h1 id="秒杀项目（一）"><a href="#秒杀项目（一）" class="headerlink" title="秒杀项目（一）"></a>秒杀项目（一）</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><p>设计一个秒杀系统。功能：解决秒杀超卖、恶意请求、链接暴露、MD5加密用户密码、Redis缓存热点数据、资源静态化、按钮控制、限流。并对秒杀接口进行压测</p><p>流程图：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200627215023.png" srcset="/img/loading.gif" alt="秒杀流程图"></p><h2 id="2-实现登录功能"><a href="#2-实现登录功能" class="headerlink" title="2 实现登录功能"></a>2 实现登录功能</h2><h3 id="2-1-数据库设计"><a href="#2-1-数据库设计" class="headerlink" title="2.1 数据库设计"></a>2.1 数据库设计</h3><p>秒杀用户表：主要有用户id、手机号、密码、salt、头像、注册时间、最后一次登录时间、登录次数</p><p>主键是ID，对密码做了两次MD5</p><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`miaosha_user`</span>;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`miaosha_user`</span> (  <span class="hljs-string">`id`</span> <span class="hljs-built_in">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'用户ID，手机号码'</span>,  <span class="hljs-string">`nickname`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,  <span class="hljs-string">`password`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'MD5(MD5(pass明文+固定salt) + salt)'</span>,  <span class="hljs-string">`salt`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,  <span class="hljs-string">`head`</span> <span class="hljs-built_in">varchar</span>(<span class="hljs-number">128</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'头像，云存储的ID'</span>,  <span class="hljs-string">`register_date`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'注册时间'</span>,  <span class="hljs-string">`last_login_date`</span> datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'上蔟登录时间'</span>,  <span class="hljs-string">`login_count`</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'登录次数'</span>,  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">InnoDB</span> AUTO_INCREMENT=<span class="hljs-number">18912341246</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4;</code></pre><blockquote><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200625113944.png" srcset="/img/loading.gif" alt="image-20200625113939729"></p></blockquote><h3 id="2-2-明文密码两次MD5处理"><a href="#2-2-明文密码两次MD5处理" class="headerlink" title="2.2 明文密码两次MD5处理"></a>2.2 明文密码两次MD5处理</h3><p>http在网络上是以明文的形式传输的，所以用户登录时输入的密码是以明文的形式传输的，如果这个数据包在网络上被其他人劫持了，那么用户账户密码就有泄漏的风险，所以需要对用户密码做一些处理，这就是第一次MD5。</p><p>服务端在接受到传入的密码后，也不是直接把这个MD5写入到数据库的，需要生成一个随机的salt，和第一次MD5处理后的结果，做一次拼装，再做一次MD5。把第二次MD5处理后的结果和salt同时写入到数据库中。</p><p>第一次MD5：防止用户密码以明文的形式在网络上进行安全传输</p><blockquote><p>PASS=MD5(明文+固定salt)</p></blockquote><p>第二次MD5：保证数据库被盗后，用户密码不被泄漏</p><blockquote><p>PASS=MD5(用户输入+随机salt)</p></blockquote><p>引入MD5的依赖：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>对明文字符串做一次MD5：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">md5</span><span class="hljs-params">(String src)</span> </span>&#123;    <span class="hljs-keyword">return</span> DigestUtils.md5Hex(src);<span class="hljs-comment">//调用已有的工具类</span>&#125;</code></pre><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String salt = <span class="hljs-string">"1a2b3c4d"</span>;<span class="hljs-comment">//固定salt</span><span class="hljs-comment">//把用户输入的密码转换成MD5</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">inputPassToFormPass</span><span class="hljs-params">(String inputPass)</span> </span>&#123;    String str=<span class="hljs-string">""</span>+salt.charAt(<span class="hljs-number">0</span>)+salt.charAt(<span class="hljs-number">2</span>)+formPass+salt.charAt(<span class="hljs-number">5</span>)+salt.charAt(<span class="hljs-number">4</span>);    <span class="hljs-keyword">return</span> mdf(str);&#125;<span class="hljs-comment">//服务端接受到表单条件的密码后，再做一次MD5，就得到了数据库中的密码</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">formPassToDBPass</span><span class="hljs-params">(String formPass, String salt)</span> </span>&#123;    String str = <span class="hljs-string">""</span>+salt.charAt(<span class="hljs-number">0</span>)+salt.charAt(<span class="hljs-number">2</span>) + formPass +salt.charAt(<span class="hljs-number">5</span>) + salt.charAt(<span class="hljs-number">4</span>);    <span class="hljs-keyword">return</span> md5(str);&#125;<span class="hljs-comment">//合并上面两个方法，就得到了用户密码经过两次MD5后的密码，把这个密码和salt一起输入到数据库中</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">inputPassToDbPass</span><span class="hljs-params">(String inputPass, String saltDB)</span> </span>&#123;    String formPass = inputPassToFormPass(inputPass);    String dbPass = formPassToDBPass(formPass, saltDB);    <span class="hljs-keyword">return</span> dbPass;&#125;</code></pre><h3 id="2-3-JSR303参数校验-全局异常处理器"><a href="#2-3-JSR303参数校验-全局异常处理器" class="headerlink" title="2.3 JSR303参数校验+全局异常处理器"></a>2.3 JSR303参数校验+全局异常处理器</h3><h3 id="实现登录功能"><a href="#实现登录功能" class="headerlink" title="实现登录功能"></a>实现登录功能</h3><p>前端：form表单</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"loginForm"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"loginForm"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">"width:50%; margin:0 auto"</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"text-align:center; margin-bottom: 20px"</span>&gt;</span>用户登录<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-label col-md-4"</span>&gt;</span>请输入手机号码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-5"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"mobile"</span> <span class="hljs-attr">name</span> = <span class="hljs-string">"mobile"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"手机号码"</span> <span class="hljs-attr">required</span>=<span class="hljs-string">"true"</span>  <span class="hljs-attr">minlength</span>=<span class="hljs-string">"11"</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">"11"</span> /&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-1"</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-group"</span>&gt;</span>             <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-label col-md-4"</span>&gt;</span>请输入密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-5"</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span>  <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"密码"</span> <span class="hljs-attr">required</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">minlength</span>=<span class="hljs-string">"6"</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">"16"</span> /&gt;</span>                   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>              <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"row"</span>&gt;</span>                 <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-5"</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary btn-block"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"reset"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"reset()"</span>&gt;</span>重置<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"col-md-5"</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary btn-block"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"login()"</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre><p>点击登录按钮后，需要去验证一下这个form表单里面的东西，如果验证通过，就会去调用 doLogin();方法</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;    $(<span class="hljs-string">"#loginForm"</span>).validate(&#123;        submitHandler:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">form</span>)</span>&#123;             doLogin();        &#125;    &#125;);&#125;</code></pre><p>点击登录按钮后，就是ajax的一个post提交，</p><p>这里获取到form表单中提交的密码和salt，然后进行第一次MD5</p><p><code>mobile:$(&quot;#mobile&quot;).val()</code>：这个是手机号<br><code>password: password</code>：这个是用户输入的密码进行第一次MD5加密后的加密密码</p><p>成功就进行success的一个回调，失败就进行error回调</p><p><code>g_showLoading()</code>：一个登录框，显示在加载</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doLogin</span>(<span class="hljs-params"></span>)</span>&#123;    g_showLoading();     <span class="hljs-keyword">var</span> inputPass = $(<span class="hljs-string">"#password"</span>).val();    <span class="hljs-keyword">var</span> salt = g_passsword_salt;    <span class="hljs-keyword">var</span> str = <span class="hljs-string">""</span>+salt.charAt(<span class="hljs-number">0</span>)+salt.charAt(<span class="hljs-number">2</span>) + inputPass +salt.charAt(<span class="hljs-number">5</span>) + salt.charAt(<span class="hljs-number">4</span>);    <span class="hljs-keyword">var</span> password = md5(str);     $.ajax(&#123;        url: <span class="hljs-string">"/login/do_login"</span>,        type: <span class="hljs-string">"POST"</span>,        data:&#123;            mobile:$(<span class="hljs-string">"#mobile"</span>).val(),            password: password        &#125;,        success:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;            layer.closeAll();            <span class="hljs-comment">// console.log(data);</span>            <span class="hljs-keyword">if</span>(data.code == <span class="hljs-number">0</span>)&#123;                layer.msg(<span class="hljs-string">"成功"</span>);                <span class="hljs-built_in">window</span>.location.href=<span class="hljs-string">"/goods/to_list"</span>;            &#125;<span class="hljs-keyword">else</span>&#123;                layer.msg(data.msg);            &#125;        &#125;,        error:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;            layer.closeAll();            <span class="hljs-comment">// console.log(data);</span>        &#125;    &#125;);&#125;</code></pre><p>我们可以用<code>console.log(data);</code>打印一下数据，看看登录成功没有，控制台可以看到，成功打印出来用户名和密码，登录成功。</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200625122106.png" srcset="/img/loading.gif" alt="image-20200625122103414"></p><p>继续完善登录，当我们收到参数之后，第一步就是要做参数校验，这里使用<code>JSR303</code>参数校验</p><p>首先引入依赖</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>使用方法：在需要校验的参数上加一个注解@Valid，然后在需要校验的类上加注解</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/do_login"</span>)<span class="hljs-meta">@ResponseBody</span><span class="hljs-function"><span class="hljs-keyword">public</span> Result&lt;Boolean&gt; <span class="hljs-title">doLogin</span><span class="hljs-params">(HttpServletResponse response, @Valid LoginVo loginVo)</span> </span>&#123;    log.info(loginVo.toString());    <span class="hljs-comment">//登录</span>    userService.login(response, loginVo);    <span class="hljs-keyword">return</span> Result.success(<span class="hljs-keyword">true</span>);&#125;</code></pre><p>在需要校验的类上加注解，来标注这个属性的格式，@NotNull是不为空，@IsMobile和@Length(min=32)是我们自己定义的注解</p><pre><code class="hljs java"><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginVo</span> </span>&#123;     <span class="hljs-meta">@NotNull</span>    <span class="hljs-meta">@IsMobile</span>    <span class="hljs-keyword">private</span> String mobile;     <span class="hljs-meta">@NotNull</span>    <span class="hljs-meta">@Length</span>(min=<span class="hljs-number">32</span>)    <span class="hljs-keyword">private</span> String password; &#125;</code></pre><p>自定义注解</p><pre><code class="hljs java"><span class="hljs-meta">@Target</span>(&#123; METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER &#125;)<span class="hljs-meta">@Retention</span>(RUNTIME)<span class="hljs-meta">@Documented</span><span class="hljs-meta">@Constraint</span>(validatedBy = &#123;IsMobileValidator<span class="hljs-class">.<span class="hljs-keyword">class</span> &#125;)//看到<span class="hljs-title">validatedBy</span>后，系统会调用校验器，来进行校验</span><span class="hljs-class"><span class="hljs-title">public</span> @<span class="hljs-title">interface</span>  <span class="hljs-title">IsMobile</span> </span>&#123;     <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">required</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">true</span></span>;<span class="hljs-comment">//默认必须有</span>     <span class="hljs-function">String <span class="hljs-title">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> "手机号码格式错误"</span>;<span class="hljs-comment">//message作用：如果校验不通过，会提示给用户的提示信息</span>     Class&lt;?&gt;[] groups() <span class="hljs-keyword">default</span> &#123; &#125;;     Class&lt;? extends Payload&gt;[] payload() <span class="hljs-keyword">default</span> &#123; &#125;;&#125;</code></pre><p>定义校验器，校验器必须继承ConstraintValidator，它有两个参数，第一个数注解的类型，第二个是修饰字段的类型，就是校验参数的类型</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IsMobileValidator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ConstraintValidator</span>&lt;<span class="hljs-title">IsMobile</span>, <span class="hljs-title">String</span>&gt; </span>&#123;     <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> required = <span class="hljs-keyword">false</span>;<span class="hljs-comment">//required是注解是否为空，required=true，是不可以为空，false是可以为空</span>    <span class="hljs-comment">//初始化方法，拿到注解</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">(IsMobile constraintAnnotation)</span> </span>&#123;        required = constraintAnnotation.required();    &#125;    <span class="hljs-comment">//判断参数是否合法</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(String value, ConstraintValidatorContext context)</span> </span>&#123;        <span class="hljs-keyword">if</span>(required) &#123;<span class="hljs-comment">//如果参数不可以为空，就判断是否合法</span>            <span class="hljs-keyword">return</span> ValidatorUtil.isMobile(value);        &#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//如果参数可以为空</span>            <span class="hljs-keyword">if</span>(StringUtils.isEmpty(value)) &#123;<span class="hljs-comment">//如果参数为空，就合法</span>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;            &#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//如果参数不为空，就判断参数是否合法</span>                <span class="hljs-keyword">return</span> ValidatorUtil.isMobile(value);            &#125;        &#125;    &#125;&#125;</code></pre><p>验证参数是否合法</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ValidatorUtil</span> </span>&#123;    <span class="hljs-comment">//手机正则表达式，要求以1开头，长度为11位的数字</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Pattern mobile_pattern = Pattern.compile(<span class="hljs-string">"1\\d&#123;10&#125;"</span>);     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isMobile</span><span class="hljs-params">(String src)</span> </span>&#123;        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(src)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        &#125;        Matcher m = mobile_pattern.matcher(src);        <span class="hljs-keyword">return</span> m.matches();    &#125;&#125;</code></pre><p>全局异常拦截器：拦截异常、输出信息</p><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><span class="hljs-meta">@ResponseBody</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GlobalExceptionHandler</span> </span>&#123;    <span class="hljs-meta">@ExceptionHandler</span>(value=Exception<span class="hljs-class">.<span class="hljs-keyword">class</span>)//想拦截所有异常，所以用<span class="hljs-title">Exception</span>.<span class="hljs-title">class</span></span><span class="hljs-class">    <span class="hljs-title">public</span> <span class="hljs-title">Result</span>&lt;<span class="hljs-title">String</span>&gt; <span class="hljs-title">exceptionHandler</span>(<span class="hljs-title">HttpServletRequest</span> <span class="hljs-title">request</span>, <span class="hljs-title">Exception</span> <span class="hljs-title">e</span>)</span>&#123;        e.printStackTrace();        <span class="hljs-keyword">if</span>(e <span class="hljs-keyword">instanceof</span> GlobalException) &#123;            GlobalException ex = (GlobalException)e;            <span class="hljs-keyword">return</span> Result.error(ex.getCm());        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(e <span class="hljs-keyword">instanceof</span> BindException) &#123;<span class="hljs-comment">//如果这个异常是绑定异常</span>            BindException ex = (BindException)e;            List&lt;ObjectError&gt; errors = ex.getAllErrors();<span class="hljs-comment">//得到异常列表，有很多异常，这里只取第一个</span>            ObjectError error = errors.get(<span class="hljs-number">0</span>);<span class="hljs-comment">//只取第一个异常</span>            String msg = error.getDefaultMessage();<span class="hljs-comment">//拿到异常后，从异常中得到一次信息</span>            <span class="hljs-keyword">return</span> Result.error(CodeMsg.BIND_ERROR.fillArgs(msg));        &#125;<span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">return</span> Result.error(CodeMsg.SERVER_ERROR);<span class="hljs-comment">//如果不是绑定异常，就输出一个通用异常</span>        &#125;    &#125;&#125;</code></pre><p>小结一下：登录时，如果出现异常就往外抛出，异常拦截器拦截异常，然后返回给用户提示信息</p><h3 id="2-4-分布式session"><a href="#2-4-分布式session" class="headerlink" title="2.4 分布式session"></a>2.4 分布式session</h3><p>用redis管理session</p><p>登录成功后，给用户生成一个token，用来标识用户，将这个token写到cookie中，传到客户端，客户端在随后的访问中，都在cookie中上传这个token，服务端拿到cookie中，从cookie中去到token，根据这个token取用户对应的session信息。</p><pre><code class="hljs java">redisService.set(MiaoshaUserKey.token, token, user);<span class="hljs-comment">//key是</span></code></pre><p>使用UUID来生成一个token</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UUIDUtil</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">uuid</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> UUID.randomUUID().toString().replace(<span class="hljs-string">"-"</span>, <span class="hljs-string">""</span>);    &#125;&#125;</code></pre><p>再把token写到cookie之前，我们要先标识一下这个token对应哪个用户，所以我们需要把用户信息写到redis中。这里是把session信息存到第三方缓存中</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String COOKI_NAME_TOKEN = <span class="hljs-string">"token"</span>; <span class="hljs-meta">@Autowired</span>RedisService redisService; <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">login</span><span class="hljs-params">(HttpServletResponse response, LoginVo loginVo)</span> </span>&#123;    <span class="hljs-keyword">if</span>(loginVo == <span class="hljs-keyword">null</span>) &#123;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GlobalException(CodeMsg.SERVER_ERROR);    &#125;    String mobile = loginVo.getMobile();    String formPass = loginVo.getPassword();    <span class="hljs-comment">//判断手机号是否存在</span>    MiaoshaUser user = getById(Long.parseLong(mobile));    <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>) &#123;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GlobalException(CodeMsg.MOBILE_NOT_EXIST);    &#125;    <span class="hljs-comment">//验证密码</span>    String dbPass = user.getPassword();    String saltDB = user.getSalt();    String calcPass = MD5Util.formPassToDBPass(formPass, saltDB);    <span class="hljs-keyword">if</span>(!calcPass.equals(dbPass)) &#123;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> GlobalException(CodeMsg.PASSWORD_ERROR);    &#125;    <span class="hljs-comment">//生成cookie</span>    String token     = UUIDUtil.uuid();    addCookie(response, token, user);    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125; <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCookie</span><span class="hljs-params">(HttpServletResponse response, String token, MiaoshaUser user)</span> </span>&#123;    redisService.set(MiaoshaUserKey.token, token, user);    Cookie cookie = <span class="hljs-keyword">new</span> Cookie(COOKI_NAME_TOKEN, token);<span class="hljs-comment">//cookie传两个值，一个name，一个value</span>    cookie.setMaxAge(MiaoshaUserKey.token.expireSeconds());<span class="hljs-comment">//设置cookie的有效期为session的有效期。</span>    cookie.setPath(<span class="hljs-string">"/"</span>);    response.addCookie(cookie);<span class="hljs-comment">//把cookie写入到响应中</span>&#125; <span class="hljs-comment">//MiaoshaUserKey</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiaoshaUserKey</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BasePrefix</span></span>&#123;     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> TOKEN_EXPIRE = <span class="hljs-number">3600</span>*<span class="hljs-number">24</span> * <span class="hljs-number">2</span>;<span class="hljs-comment">//设置有效期为两天</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">MiaoshaUserKey</span><span class="hljs-params">(<span class="hljs-keyword">int</span> expireSeconds, String prefix)</span> </span>&#123;        <span class="hljs-keyword">super</span>(expireSeconds, prefix);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> MiaoshaUserKey token = <span class="hljs-keyword">new</span> MiaoshaUserKey(TOKEN_EXPIRE, <span class="hljs-string">"tk"</span>);&#125;</code></pre><p>这里登陆功能基本实现了，现在让登陆成功后，跳转到商品页面<code>/goods/to_list</code></p><pre><code class="hljs js">success:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;            layer.closeAll();            <span class="hljs-comment">// console.log(data);</span>            <span class="hljs-keyword">if</span>(data.code == <span class="hljs-number">0</span>)&#123;                layer.msg(<span class="hljs-string">"成功"</span>);                <span class="hljs-built_in">window</span>.location.href=<span class="hljs-string">"/goods/to_list"</span>;            &#125;<span class="hljs-keyword">else</span>&#123;                layer.msg(data.msg);            &#125;        &#125;</code></pre><p>商品页面<code>goods_list</code>代码如下：</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>商品列表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"Content-Type"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"text/html; charset=UTF-8"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"'hello:'+$&#123;user.nickname&#125;"</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>对应的Controller代码如下：负责跳转到商品页面</p><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/goods"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsController</span> </span>&#123;     <span class="hljs-meta">@Autowired</span>    MiaoshaUserService userService;     <span class="hljs-meta">@Autowired</span>    RedisService redisService;     <span class="hljs-comment">//跳转到商品列表页</span>    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/to_list"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">list</span><span class="hljs-params">(Model model,MiaoshaUser user)</span> </span>&#123;        model.addAttribute(<span class="hljs-string">"user"</span>, user);        <span class="hljs-keyword">return</span> <span class="hljs-string">"goods_list"</span>;    &#125;&#125;</code></pre><p>这里的逻辑是：用户登录成功后，自动跳转到<code>/goods/to_list</code>，而后端收到这个请求后，去执行上面代码，然后<code>return &quot;goods_list&quot;;</code>，返回给前端<code>goods_list_html</code>页面。这个页面中的数据已经在方法<code>list</code>中添加进去。后续客户端发起请求时就会携带这个token，服务端就可以将这个token取出来</p><p>优化：让cookie的有效期为用户最近登录的时间+cookie的持续时间，而不是用户第一次登录的时间+cookie的持续时间</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> MiaoshaUser <span class="hljs-title">getByToken</span><span class="hljs-params">(HttpServletResponse response, String token)</span> </span>&#123;    <span class="hljs-keyword">if</span>(StringUtils.isEmpty(token)) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;    MiaoshaUser user = redisService.get(MiaoshaUserKey.token, token, MiaoshaUser<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    <span class="hljs-comment">//延长有效期</span>    <span class="hljs-keyword">if</span>(user != <span class="hljs-keyword">null</span>) &#123;        addCookie(response, token, user);    &#125;    <span class="hljs-keyword">return</span> user;&#125;</code></pre><p>实现User对象注入到方法中。</p><p>思路：实现一个ArgumentResolve</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebConfig</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurerAdapter</span></span>&#123;     <span class="hljs-meta">@Autowired</span>    UserArgumentResolver userArgumentResolver;     <span class="hljs-meta">@Autowired</span>    AccessInterceptor accessInterceptor;    <span class="hljs-comment">//SpringMVC的Controller可以带很多参数，比如Request、Response、Model等。这些参数值的来源就是是Spring框架调用addArgumentResolvers方法，往Controller方法里面的参数赋值</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addArgumentResolvers</span><span class="hljs-params">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> </span>&#123;        argumentResolvers.add(userArgumentResolver);<span class="hljs-comment">//添加一个argumentResolvers</span>    &#125;     <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;        registry.addInterceptor(accessInterceptor);    &#125; &#125;</code></pre><p>实现argumentResolvers</p><pre><code class="hljs java"> <span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserArgumentResolver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HandlerMethodArgumentResolver</span> </span>&#123;     <span class="hljs-meta">@Autowired</span>    MiaoshaUserService userService;     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> </span>&#123;        Class&lt;?&gt; clazz = parameter.getParameterType();<span class="hljs-comment">//获得参数类型</span>        <span class="hljs-keyword">return</span> clazz==MiaoshaUser<span class="hljs-class">.<span class="hljs-keyword">class</span></span>;    &#125;     <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">resolveArgument</span><span class="hljs-params">(MethodParameter parameter, ModelAndViewContainer mavContainer,</span></span><span class="hljs-function"><span class="hljs-params">                                  NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;         <span class="hljs-comment">/**</span><span class="hljs-comment">         *  threadlocal 存储线程副本 保证线程不冲突</span><span class="hljs-comment">         */</span>        <span class="hljs-keyword">return</span> UserContext.getUser();<span class="hljs-comment">//后面实现了一个拦截器，在拦截器中实现参数解析，这里只需要获取即可</span>    &#125; &#125;</code></pre><h2 id="3-实现秒杀功能"><a href="#3-实现秒杀功能" class="headerlink" title="3 实现秒杀功能"></a>3 实现秒杀功能</h2><p>逻辑：用户浏览商品列表，选择商品，进入商品详情页，点击秒杀按钮，秒杀成功，进入订单详情页</p><h3 id="3-1-数据库设计"><a href="#3-1-数据库设计" class="headerlink" title="3.1 数据库设计"></a>3.1 数据库设计</h3><p>这里有四个表：商品表、订单表、秒杀商品表、秒杀订单表。如果只有商品表和订单表，后续不好维护，所以分成4个表。</p><p>商品表</p><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`goods`</span>;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`goods`</span> (  <span class="hljs-string">`id`</span> <span class="hljs-built_in">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'商品ID'</span>,  <span class="hljs-string">`goods_name`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'商品名称'</span>,  <span class="hljs-string">`goods_title`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'商品标题'</span>,  <span class="hljs-string">`goods_img`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">64</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'商品的图片'</span>,  <span class="hljs-string">`goods_detail`</span> LONGTEXT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'商品的详情介绍'</span>,  <span class="hljs-string">`goods_price`</span> <span class="hljs-built_in">DECIMAL</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0.00'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'商品单价'</span>,  <span class="hljs-string">`goods_stock`</span> <span class="hljs-built_in">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'商品库存，-1表示没有限制'</span>,  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">INNODB</span> AUTO_INCREMENT=<span class="hljs-number">5</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4;</code></pre><p>订单表</p><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`order_info`</span>;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`order_info`</span> (  <span class="hljs-string">`id`</span> <span class="hljs-built_in">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,  <span class="hljs-string">`user_id`</span> <span class="hljs-built_in">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'用户ID'</span>,  <span class="hljs-string">`goods_id`</span> <span class="hljs-built_in">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'商品ID'</span>,  <span class="hljs-string">`delivery_addr_id`</span> <span class="hljs-built_in">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'收获地址ID'</span>,  <span class="hljs-string">`goods_name`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'冗余过来的商品名称'</span>,  <span class="hljs-string">`goods_count`</span> <span class="hljs-built_in">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'商品数量'</span>,  <span class="hljs-string">`goods_price`</span> <span class="hljs-built_in">DECIMAL</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0.00'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'商品单价'</span>,  <span class="hljs-string">`order_channel`</span> <span class="hljs-built_in">TINYINT</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'1pc，2android，3ios'</span>,  <span class="hljs-string">`status`</span> <span class="hljs-built_in">TINYINT</span>(<span class="hljs-number">4</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'订单状态，0新建未支付，1已支付，2已发货，3已收货，4已退款，5已完成'</span>,  <span class="hljs-string">`create_date`</span> DATETIME <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'订单的创建时间'</span>,  <span class="hljs-string">`pay_date`</span> DATETIME <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'支付时间'</span>,  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">INNODB</span> AUTO_INCREMENT=<span class="hljs-number">1565</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4;</code></pre><p>秒杀商品表</p><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`miaosha_goods`</span>;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`miaosha_goods`</span> (  <span class="hljs-string">`id`</span> <span class="hljs-built_in">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'秒杀的商品表'</span>,  <span class="hljs-string">`goods_id`</span> <span class="hljs-built_in">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'商品Id'</span>,  <span class="hljs-string">`miaosha_price`</span> <span class="hljs-built_in">DECIMAL</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">'0.00'</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'秒杀价'</span>,  <span class="hljs-string">`stock_count`</span> <span class="hljs-built_in">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'库存数量'</span>,  <span class="hljs-string">`start_date`</span> DATETIME <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'秒杀开始时间'</span>,  <span class="hljs-string">`end_date`</span> DATETIME <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'秒杀结束时间'</span>,  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>)) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">INNODB</span> AUTO_INCREMENT=<span class="hljs-number">5</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4;</code></pre><p>秒杀订单表</p><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> <span class="hljs-string">`miaosha_order`</span>;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`miaosha_order`</span> (  <span class="hljs-string">`id`</span> <span class="hljs-built_in">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,  <span class="hljs-string">`user_id`</span> <span class="hljs-built_in">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'用户ID'</span>,  <span class="hljs-string">`order_id`</span> <span class="hljs-built_in">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'订单ID'</span>,  <span class="hljs-string">`goods_id`</span> <span class="hljs-built_in">BIGINT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span> <span class="hljs-keyword">COMMENT</span> <span class="hljs-string">'商品ID'</span>,  PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>),  <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-string">`u_uid_gid`</span> (<span class="hljs-string">`user_id`</span>,<span class="hljs-string">`goods_id`</span>) <span class="hljs-keyword">USING</span> BTREE) <span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">INNODB</span> AUTO_INCREMENT=<span class="hljs-number">1551</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8mb4;</code></pre><p>表对应的对象代码如下：</p><pre><code class="hljs java"><span class="hljs-comment">//所有的getter和setter方法都省略</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Goods</span> </span>&#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String goodsName;    <span class="hljs-keyword">private</span> String goodsTitle;    <span class="hljs-keyword">private</span> String goodsImg;    <span class="hljs-keyword">private</span> String goodsDetail;    <span class="hljs-keyword">private</span> Double goodsPrice;    <span class="hljs-keyword">private</span> Integer goodsStock;&#125; <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiaoshaGoods</span> </span>&#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> Long goodsId;    <span class="hljs-keyword">private</span> Integer stockCount;    <span class="hljs-keyword">private</span> Date startDate;    <span class="hljs-keyword">private</span> Date endDate;&#125; <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiaoshaOrder</span> </span>&#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> Long userId;    <span class="hljs-keyword">private</span> Long  orderId;    <span class="hljs-keyword">private</span> Long goodsId;&#125; <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiaoshaUser</span> </span>&#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String nickname;    <span class="hljs-keyword">private</span> String password;    <span class="hljs-keyword">private</span> String salt;    <span class="hljs-keyword">private</span> String head;    <span class="hljs-keyword">private</span> Date registerDate;    <span class="hljs-keyword">private</span> Date lastLoginDate;    <span class="hljs-keyword">private</span> Integer loginCount;&#125; <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderInfo</span> </span>&#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> Long userId;    <span class="hljs-keyword">private</span> Long goodsId;    <span class="hljs-keyword">private</span> Long  deliveryAddrId;    <span class="hljs-keyword">private</span> String goodsName;    <span class="hljs-keyword">private</span> Integer goodsCount;    <span class="hljs-keyword">private</span> Double goodsPrice;    <span class="hljs-keyword">private</span> Integer orderChannel;    <span class="hljs-keyword">private</span> Integer status;    <span class="hljs-keyword">private</span> Date createDate;    <span class="hljs-keyword">private</span> Date payDate;&#125;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;&#125;</code></pre><h3 id="3-2-商品列表页"><a href="#3-2-商品列表页" class="headerlink" title="3.2 商品列表页"></a>3.2 商品列表页</h3><p><code>controller</code>层：调用具体的业务</p><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/goods"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsController</span> </span>&#123;     <span class="hljs-meta">@Autowired</span>    MiaoshaUserService userService;     <span class="hljs-meta">@Autowired</span>    RedisService redisService;     <span class="hljs-meta">@Autowired</span>    GoodsService goodsService;<span class="hljs-comment">//把service注入到controller</span>     <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/to_list"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">list</span><span class="hljs-params">(Model model,MiaoshaUser user)</span> </span>&#123;        model.addAttribute(<span class="hljs-string">"user"</span>, user);        <span class="hljs-comment">//查询商品列表</span>        List&lt;GoodsVo&gt; goodsList = goodsService.listGoodsVo();<span class="hljs-comment">//查询列表</span>        model.addAttribute(<span class="hljs-string">"goodsList"</span>, goodsList);<span class="hljs-comment">//传到页面上</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"goods_list"</span>;<span class="hljs-comment">//进入到商品列表页面</span>    &#125;     <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/to_detail/&#123;goodsId&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">detail</span><span class="hljs-params">(Model model,MiaoshaUser user,</span></span><span class="hljs-function"><span class="hljs-params">            @PathVariable(<span class="hljs-string">"goodsId"</span>)</span><span class="hljs-keyword">long</span> goodsId) </span>&#123;        model.addAttribute(<span class="hljs-string">"user"</span>, user);         GoodsVo goods = goodsService.getGoodsVoByGoodsId(goodsId);        model.addAttribute(<span class="hljs-string">"goods"</span>, goods);         <span class="hljs-keyword">long</span> startAt = goods.getStartDate().getTime();        <span class="hljs-keyword">long</span> endAt = goods.getEndDate().getTime();        <span class="hljs-keyword">long</span> now = System.currentTimeMillis();         <span class="hljs-keyword">int</span> miaoshaStatus = <span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> remainSeconds = <span class="hljs-number">0</span>;        <span class="hljs-keyword">if</span>(now &lt; startAt ) &#123;<span class="hljs-comment">//秒杀还没开始，倒计时</span>            miaoshaStatus = <span class="hljs-number">0</span>;            remainSeconds = (<span class="hljs-keyword">int</span>)((startAt - now )/<span class="hljs-number">1000</span>);        &#125;<span class="hljs-keyword">else</span>  <span class="hljs-keyword">if</span>(now &gt; endAt)&#123;<span class="hljs-comment">//秒杀已经结束</span>            miaoshaStatus = <span class="hljs-number">2</span>;            remainSeconds = -<span class="hljs-number">1</span>;        &#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//秒杀进行中</span>            miaoshaStatus = <span class="hljs-number">1</span>;            remainSeconds = <span class="hljs-number">0</span>;        &#125;        model.addAttribute(<span class="hljs-string">"miaoshaStatus"</span>, miaoshaStatus);        model.addAttribute(<span class="hljs-string">"remainSeconds"</span>, remainSeconds);        <span class="hljs-keyword">return</span> <span class="hljs-string">"goods_detail"</span>;    &#125; &#125;</code></pre><p><code>service</code>层：具体的业务</p><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsService</span> </span>&#123;     <span class="hljs-meta">@Autowired</span>    GoodsDao goodsDao;<span class="hljs-comment">//引入dao</span>     <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;GoodsVo&gt; <span class="hljs-title">listGoodsVo</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> goodsDao.listGoodsVo();    &#125;     <span class="hljs-function"><span class="hljs-keyword">public</span> GoodsVo <span class="hljs-title">getGoodsVoByGoodsId</span><span class="hljs-params">(<span class="hljs-keyword">long</span> goodsId)</span> </span>&#123;        <span class="hljs-keyword">return</span> goodsDao.getGoodsVoByGoodsId(goodsId);    &#125;     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduceStock</span><span class="hljs-params">(GoodsVo goods)</span> </span>&#123;        MiaoshaGoods g = <span class="hljs-keyword">new</span> MiaoshaGoods();        g.setGoodsId(goods.getId());        goodsDao.reduceStock(g);    &#125;&#125;</code></pre><p><code>dao</code>层：从数据库中查询数据，数据设计到两个表，所以要使用联合查询</p><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GoodsDao</span> </span>&#123;    <span class="hljs-comment">//查询商品表中的所有信息、秒杀表中的商品数量、开始时间、结束时间、秒杀价格</span>    <span class="hljs-meta">@Select</span>(<span class="hljs-string">"select g.*,mg.stock_count, mg.start_date, mg.end_date,mg.miaosha_price from miaosha_goods mg left join goods g on mg.goods_id = g.id"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;GoodsVo&gt; <span class="hljs-title">listGoodsVo</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//</span>    <span class="hljs-meta">@Select</span>(<span class="hljs-string">"select g.*,mg.stock_count, mg.start_date, mg.end_date,mg.miaosha_price from miaosha_goods mg left join goods g on mg.goods_id = g.id where g.id = #&#123;goodsId&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> GoodsVo <span class="hljs-title">getGoodsVoByGoodsId</span><span class="hljs-params">(@Param(<span class="hljs-string">"goodsId"</span>)</span><span class="hljs-keyword">long</span> goodsId)</span>;     <span class="hljs-meta">@Update</span>(<span class="hljs-string">"update miaosha_goods set stock_count = stock_count - 1 where goods_id = #&#123;goodsId&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">reduceStock</span><span class="hljs-params">(MiaoshaGoods g)</span></span>; &#125;</code></pre><p><code>VO</code>层：页面展示的数据由商品表和秒杀商品表的数据共同展示，所以专门再建立一个视图层对象类，将这两个类中想要查询的数据，都放到对应的VO中</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GoodsVo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Goods</span></span>&#123;    <span class="hljs-keyword">private</span> Double miaoshaPrice;    <span class="hljs-keyword">private</span> Integer stockCount;    <span class="hljs-keyword">private</span> Date startDate;    <span class="hljs-keyword">private</span> Date endDate;&#125;</code></pre><p>对应的前端页面：<code>goods_list.html</code></p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>商品列表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"Content-Type"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"text/html; charset=UTF-8"</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- jquery --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/js/jquery.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- bootstrap --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/bootstrap/css/bootstrap.min.css&#125;"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/bootstrap/js/bootstrap.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- jquery-validator --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/jquery-validation/jquery.validate.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/jquery-validation/localization/messages_zh.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- layer --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/layer/layer.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- md5.js --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/js/md5.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- common.js --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/js/common.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel panel-default"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-heading"</span>&gt;</span>秒杀商品列表<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"goodslist"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>商品名称<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>商品图片<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>商品原价<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>秒杀价<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>库存数量<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>详情<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>  <span class="hljs-attr">th:each</span>=<span class="hljs-string">"goods,goodsStat : $&#123;goodsList&#125;"</span>&gt;</span>  <span class="hljs-comment">&lt;!--遍历model传入的goodsList--&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;goods.goodsName&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;$&#123;goods.goodsImg&#125;&#125;"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"100"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"100"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;goods.goodsPrice&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;goods.miaoshaPrice&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;goods.stockCount&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"'/goods/to_detail/'+$&#123;goods.id&#125;"</span>&gt;</span>详情<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200625161747.png" srcset="/img/loading.gif" alt="image-20200625161744031"></p><h3 id="3-3-商品详情页"><a href="#3-3-商品详情页" class="headerlink" title="3.3 商品详情页"></a>3.3 商品详情页</h3><p>跳转到具体的详情页</p><p>前端代码：<code>&lt;td&gt;&lt;a th:href=&quot;&#39;/goods/to_detail/&#39;+${goods.id}&quot;&gt;详情&lt;/a&gt;&lt;/td&gt;</code></p><p>后端代码：</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/to_detail/&#123;goodsId&#125;"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">detail</span><span class="hljs-params">(Model model,MiaoshaUser user,</span></span><span class="hljs-function"><span class="hljs-params">                     @PathVariable(<span class="hljs-string">"goodsId"</span>)</span><span class="hljs-keyword">long</span> goodsId) </span>&#123;    model.addAttribute(<span class="hljs-string">"user"</span>, user);     GoodsVo goods = goodsService.getGoodsVoByGoodsId(goodsId);<span class="hljs-comment">//查询goods</span>    model.addAttribute(<span class="hljs-string">"goods"</span>, goods);     <span class="hljs-keyword">long</span> startAt = goods.getStartDate().getTime();<span class="hljs-comment">//秒杀的开始时间</span>    <span class="hljs-keyword">long</span> endAt = goods.getEndDate().getTime();<span class="hljs-comment">//秒杀的结束时间</span>    <span class="hljs-keyword">long</span> now = System.currentTimeMillis();<span class="hljs-comment">//当前时间</span>     <span class="hljs-keyword">int</span> miaoshaStatus = <span class="hljs-number">0</span>;<span class="hljs-comment">//秒杀状态</span>    <span class="hljs-keyword">int</span> remainSeconds = <span class="hljs-number">0</span>;<span class="hljs-comment">//还有多少秒开始</span>    <span class="hljs-keyword">if</span>(now &lt; startAt ) &#123;<span class="hljs-comment">//如果当前时间小于秒杀开始时间，秒杀还没开始，倒计时。</span>        miaoshaStatus = <span class="hljs-number">0</span>;        remainSeconds = (<span class="hljs-keyword">int</span>)((startAt - now )/<span class="hljs-number">1000</span>);    &#125;<span class="hljs-keyword">else</span>  <span class="hljs-keyword">if</span>(now &gt; endAt)&#123;<span class="hljs-comment">//如果当前时间大于于秒杀结束时间，秒杀已经结束</span>        miaoshaStatus = <span class="hljs-number">2</span>;        remainSeconds = -<span class="hljs-number">1</span>;<span class="hljs-comment">//说明已经结束</span>    &#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//秒杀进行中</span>        miaoshaStatus = <span class="hljs-number">1</span>;<span class="hljs-comment">//秒杀进行中的对应状态为1</span>        remainSeconds = <span class="hljs-number">0</span>;    &#125;    model.addAttribute(<span class="hljs-string">"miaoshaStatus"</span>, miaoshaStatus);    model.addAttribute(<span class="hljs-string">"remainSeconds"</span>, remainSeconds);    <span class="hljs-keyword">return</span> <span class="hljs-string">"goods_detail"</span>;&#125;</code></pre><p>前端页面：</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>商品详情<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"Content-Type"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"text/html; charset=UTF-8"</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- jquery --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/js/jquery.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- bootstrap --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/bootstrap/css/bootstrap.min.css&#125;"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/bootstrap/js/bootstrap.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- jquery-validator --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/jquery-validation/jquery.validate.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/jquery-validation/localization/messages_zh.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- layer --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/layer/layer.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- md5.js --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/js/md5.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- common.js --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/js/common.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel panel-default"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-heading"</span>&gt;</span>秒杀商品详情<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-body"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;user eq null&#125;"</span>&gt;</span> 您还没有登录，请登陆后再操作<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>没有收货地址的提示。。。<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"goodslist"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>商品名称<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;goods.goodsName&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>商品图片<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"3"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;$&#123;goods.goodsImg&#125;&#125;"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"200"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"200"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>秒杀开始时间<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;#dates.format(goods.startDate, 'yyyy-MM-dd HH:mm:ss')&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"miaoshaTip"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"remainSeconds"</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;remainSeconds&#125;"</span> /&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;miaoshaStatus eq 0&#125;"</span>&gt;</span>秒杀倒计时：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"countDown"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;remainSeconds&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>秒<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;miaoshaStatus eq 1&#125;"</span>&gt;</span>秒杀进行中<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;miaoshaStatus eq 2&#125;"</span>&gt;</span>秒杀已结束<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"miaoshaForm"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/miaosha/do_miaosha"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary btn-block"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"buyButton"</span>&gt;</span>立即秒杀<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"goodsId"</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;goods.id&#125;"</span> /&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>商品原价<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;goods.goodsPrice&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>秒杀价<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;goods.miaoshaPrice&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>库存数量<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;goods.stockCount&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span>    countDown();&#125;); <span class="actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">countDown</span><span class="hljs-params">()</span></span>&#123;</span><span class="javascript">    <span class="hljs-keyword">var</span> remainSeconds = $(<span class="hljs-string">"#remainSeconds"</span>).val();</span><span class="actionscript">    <span class="hljs-keyword">var</span> timeout;</span><span class="actionscript">    <span class="hljs-keyword">if</span>(remainSeconds &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//秒杀还没开始，倒计时</span></span><span class="javascript">        $(<span class="hljs-string">"#buyButton"</span>).attr(<span class="hljs-string">"disabled"</span>, <span class="hljs-literal">true</span>);</span><span class="actionscript">        timeout = setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;</span><span class="javascript">            $(<span class="hljs-string">"#countDown"</span>).text(remainSeconds - <span class="hljs-number">1</span>);</span><span class="javascript">            $(<span class="hljs-string">"#remainSeconds"</span>).val(remainSeconds - <span class="hljs-number">1</span>);</span>            countDown();        &#125;,1000);<span class="actionscript">    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(remainSeconds == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//秒杀进行中</span></span><span class="javascript">        $(<span class="hljs-string">"#buyButton"</span>).attr(<span class="hljs-string">"disabled"</span>, <span class="hljs-literal">false</span>);</span>        if(timeout)&#123;            clearTimeout(timeout);        &#125;<span class="javascript">        $(<span class="hljs-string">"#miaoshaTip"</span>).html(<span class="hljs-string">"秒杀进行中"</span>);</span><span class="actionscript">    &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//秒杀已经结束</span></span><span class="javascript">        $(<span class="hljs-string">"#buyButton"</span>).attr(<span class="hljs-string">"disabled"</span>, <span class="hljs-literal">true</span>);</span><span class="javascript">        $(<span class="hljs-string">"#miaoshaTip"</span>).html(<span class="hljs-string">"秒杀已经结束"</span>);</span>    &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>为了降低服务器的负载，前端做了一些<strong>优化</strong>：</p><p>秒杀<strong>还没有开始</strong>或者秒杀<strong>已经结束</strong>，那么秒杀按钮就是灰色的。只有在秒杀开始到结束那段时间，按钮才可以点击</p><pre><code class="hljs js">$(<span class="hljs-string">"#buyButton"</span>).attr(<span class="hljs-string">"disabled"</span>, <span class="hljs-literal">true</span>);</code></pre><h3 id="3-4-实现秒杀"><a href="#3-4-实现秒杀" class="headerlink" title="3.4 实现秒杀"></a>3.4 实现秒杀</h3><p>秒杀功能的实现其实很简单，就是一个form表单的提交，提交的时候传递一个参数，商品ID</p><p>前端页面</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"miaoshaForm"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/miaosha/do_miaosha"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary btn-block"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"buyButton"</span>&gt;</span>立即秒杀<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"goodsId"</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;goods.id&#125;"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></code></pre><p>秒杀Controller：控制层从请求中拿到商品ID后，就可以查询商品</p><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/miaosha"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiaoshaController</span> </span>&#123;     <span class="hljs-meta">@Autowired</span>    MiaoshaUserService userService;     <span class="hljs-meta">@Autowired</span>    RedisService redisService;     <span class="hljs-meta">@Autowired</span>    GoodsService goodsService;     <span class="hljs-meta">@Autowired</span>    OrderService orderService;     <span class="hljs-meta">@Autowired</span>    MiaoshaService miaoshaService;     <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/do_miaosha"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">list</span><span class="hljs-params">(Model model,MiaoshaUser user,</span></span><span class="hljs-function"><span class="hljs-params">            @RequestParam(<span class="hljs-string">"goodsId"</span>)</span><span class="hljs-keyword">long</span> goodsId) </span>&#123;        model.addAttribute(<span class="hljs-string">"user"</span>, user);        <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">//如果用户为空，那么说明此时还没有登录，就需要登录</span>            <span class="hljs-keyword">return</span> <span class="hljs-string">"login"</span>;        &#125;        <span class="hljs-comment">//判断库存</span>        GoodsVo goods = goodsService.getGoodsVoByGoodsId(goodsId);        <span class="hljs-keyword">int</span> stock = goods.getStockCount();        <span class="hljs-keyword">if</span>(stock &lt;= <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//如果库存小于0</span>            model.addAttribute(<span class="hljs-string">"errmsg"</span>, CodeMsg.MIAO_SHA_OVER.getMsg());<span class="hljs-comment">//返回一个错误信息：提示库存不足</span>            <span class="hljs-keyword">return</span> <span class="hljs-string">"miaosha_fail"</span>;        &#125;        <span class="hljs-comment">//如果库存大于0，那么还需要判断这个用户是否已经秒杀过一次了，因为秒杀要求一个人只能秒杀一次一种类型商品。</span>        <span class="hljs-comment">//此时需要去订单表中查询，判断订单中是否有该用户的订单</span>        <span class="hljs-comment">//判断是否已经秒杀到了</span>        MiaoshaOrder order = orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(), goodsId);<span class="hljs-comment">//-----------代码1</span>        <span class="hljs-keyword">if</span>(order != <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">//如果订单不为空，说明用户已经秒杀过了，所以返回一个提示信息，不可以重复秒杀</span>            model.addAttribute(<span class="hljs-string">"errmsg"</span>, CodeMsg.REPEATE_MIAOSHA.getMsg());            <span class="hljs-keyword">return</span> <span class="hljs-string">"miaosha_fail"</span>;        &#125;        <span class="hljs-comment">//减库存 下订单 写入秒杀订单，这三个操作必须要么全成功，要么全失败。所以做成一个事务</span>        OrderInfo orderInfo = miaoshaService.miaosha(user, goods);<span class="hljs-comment">//---------------代码2</span>        model.addAttribute(<span class="hljs-string">"orderInfo"</span>, orderInfo);<span class="hljs-comment">//把订单的信息写入到页面上</span>        model.addAttribute(<span class="hljs-string">"goods"</span>, goods);<span class="hljs-comment">//把订单的商品信息写入到页面上</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">"order_detail"</span>;    &#125;&#125;</code></pre><p>相关代码1：</p><pre><code class="hljs java"><span class="hljs-comment">//service层</span><span class="hljs-function"><span class="hljs-keyword">public</span> MiaoshaOrder <span class="hljs-title">getMiaoshaOrderByUserIdGoodsId</span><span class="hljs-params">(<span class="hljs-keyword">long</span> userId, <span class="hljs-keyword">long</span> goodsId)</span> </span>&#123;    <span class="hljs-keyword">return</span> orderDao.getMiaoshaOrderByUserIdGoodsId(userId, goodsId);&#125; <span class="hljs-comment">//dao层</span><span class="hljs-meta">@Select</span>(<span class="hljs-string">"select * from miaosha_order where user_id=#&#123;userId&#125; and goods_id=#&#123;goodsId&#125;"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> MiaoshaOrder <span class="hljs-title">getMiaoshaOrderByUserIdGoodsId</span><span class="hljs-params">(@Param(<span class="hljs-string">"userId"</span>)</span><span class="hljs-keyword">long</span> userId, @<span class="hljs-title">Param</span><span class="hljs-params">(<span class="hljs-string">"goodsId"</span>)</span><span class="hljs-keyword">long</span> goodsId)</span>;</code></pre><p>相关代码2：</p><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span>GoodsService goodsService;<span class="hljs-comment">//引入其它的service</span> <span class="hljs-meta">@Autowired</span>OrderService orderService;<span class="hljs-comment">//引入其它的service</span> <span class="hljs-comment">//@Transactional标注这是一个事务，要么全成功，要么全失败</span><span class="hljs-meta">@Transactional</span><span class="hljs-function"><span class="hljs-keyword">public</span> OrderInfo <span class="hljs-title">miaosha</span><span class="hljs-params">(MiaoshaUser user, GoodsVo goods)</span> </span>&#123;    <span class="hljs-comment">//减库存 下订单 写入秒杀订单</span>    goodsService.reduceStock(goods);    <span class="hljs-comment">//写入订单信息，然后返回订单信息</span>    <span class="hljs-keyword">return</span> orderService.createOrder(user, goods);&#125; <span class="hljs-comment">//service层：调用dao层</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduceStock</span><span class="hljs-params">(GoodsVo goods)</span> </span>&#123;    MiaoshaGoods g = <span class="hljs-keyword">new</span> MiaoshaGoods();    g.setGoodsId(goods.getId());    goodsDao.reduceStock(g);&#125; <span class="hljs-comment">//dao层：去执行库存减1的操作</span><span class="hljs-meta">@Update</span>(<span class="hljs-string">"update miaosha_goods set stock_count = stock_count - 1 where goods_id = #&#123;goodsId&#125;"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">reduceStock</span><span class="hljs-params">(MiaoshaGoods g)</span></span>; <span class="hljs-comment">//orderService.createOrder(user, goods);</span><span class="hljs-meta">@Transactional</span><span class="hljs-function"><span class="hljs-keyword">public</span> OrderInfo <span class="hljs-title">createOrder</span><span class="hljs-params">(MiaoshaUser user, GoodsVo goods)</span> </span>&#123;    OrderInfo orderInfo = <span class="hljs-keyword">new</span> OrderInfo();<span class="hljs-comment">//生成订单</span>    orderInfo.setCreateDate(<span class="hljs-keyword">new</span> Date());<span class="hljs-comment">//把信息注入到订单中</span>    orderInfo.setDeliveryAddrId(<span class="hljs-number">0L</span>);<span class="hljs-comment">//收货地址</span>    orderInfo.setGoodsCount(<span class="hljs-number">1</span>);<span class="hljs-comment">//商品数量，秒杀只可以秒杀一个商品</span>    orderInfo.setGoodsId(goods.getId());<span class="hljs-comment">//商品ID</span>    orderInfo.setGoodsName(goods.getGoodsName());<span class="hljs-comment">//商品名称</span>    orderInfo.setGoodsPrice(goods.getMiaoshaPrice());<span class="hljs-comment">//秒杀价格</span>    orderInfo.setOrderChannel(<span class="hljs-number">1</span>);<span class="hljs-comment">//渠道</span>    orderInfo.setStatus(<span class="hljs-number">0</span>);<span class="hljs-comment">//状态，0表示新建未支付、1表示已支付、2表示已发货、3表示已收货</span>    orderInfo.setUserId(user.getId());<span class="hljs-comment">//用户ID</span>    <span class="hljs-keyword">long</span> orderId = orderDao.insert(orderInfo);<span class="hljs-comment">//把订单信息注入到dao层，dao层再把订单信息注入到数据库</span>    MiaoshaOrder miaoshaOrder = <span class="hljs-keyword">new</span> MiaoshaOrder();<span class="hljs-comment">//秒杀订单</span>    miaoshaOrder.setGoodsId(goods.getId());<span class="hljs-comment">//把商品ID注入到秒杀订单中</span>    miaoshaOrder.setOrderId(orderId);<span class="hljs-comment">//注入订单ID</span>    miaoshaOrder.setUserId(user.getId());<span class="hljs-comment">//注入用户ID</span>    orderDao.insertMiaoshaOrder(miaoshaOrder);<span class="hljs-comment">//再把秒杀订单注入到Dao层</span>    <span class="hljs-keyword">return</span> orderInfo;<span class="hljs-comment">//返回订单</span>&#125;</code></pre><p><code>dao</code>层代码</p><pre><code class="hljs java"> <span class="hljs-meta">@Mapper</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OrderDao</span> </span>&#123;     <span class="hljs-meta">@Select</span>(<span class="hljs-string">"select * from miaosha_order where user_id=#&#123;userId&#125; and goods_id=#&#123;goodsId&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> MiaoshaOrder <span class="hljs-title">getMiaoshaOrderByUserIdGoodsId</span><span class="hljs-params">(@Param(<span class="hljs-string">"userId"</span>)</span><span class="hljs-keyword">long</span> userId, @<span class="hljs-title">Param</span><span class="hljs-params">(<span class="hljs-string">"goodsId"</span>)</span><span class="hljs-keyword">long</span> goodsId)</span>;     <span class="hljs-meta">@Insert</span>(<span class="hljs-string">"insert into order_info(user_id, goods_id, goods_name, goods_count, goods_price, order_channel, status, create_date)values("</span> + <span class="hljs-string">"#&#123;userId&#125;, #&#123;goodsId&#125;, #&#123;goodsName&#125;, #&#123;goodsCount&#125;, #&#123;goodsPrice&#125;, #&#123;orderChannel&#125;,#&#123;status&#125;,#&#123;createDate&#125; )"</span>)    <span class="hljs-meta">@SelectKey</span>(keyColumn=<span class="hljs-string">"id"</span>, keyProperty=<span class="hljs-string">"id"</span>, resultType=<span class="hljs-keyword">long</span><span class="hljs-class">.<span class="hljs-keyword">class</span>, <span class="hljs-title">before</span></span>=<span class="hljs-keyword">false</span>, statement=<span class="hljs-string">"select last_insert_id()"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">insert</span><span class="hljs-params">(OrderInfo orderInfo)</span></span>;     <span class="hljs-meta">@Insert</span>(<span class="hljs-string">"insert into miaosha_order (user_id, goods_id, order_id)values(#&#123;userId&#125;, #&#123;goodsId&#125;, #&#123;orderId&#125;)"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">insertMiaoshaOrder</span><span class="hljs-params">(MiaoshaOrder miaoshaOrder)</span></span>;  &#125;</code></pre><p>然后写页面，应该有两种情况：一种是秒杀成功、一种是秒杀失败。所以对应两种页面</p><p>秒杀失败：</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>秒杀失败<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"Content-Type"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"text/html; charset=UTF-8"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>秒杀失败：<span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;errmsg&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>秒杀成功，进入订单页</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>订单详情<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"Content-Type"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"text/html; charset=UTF-8"</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- jquery --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/js/jquery.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- bootstrap --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/bootstrap/css/bootstrap.min.css&#125;"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/bootstrap/js/bootstrap.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- jquery-validator --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/jquery-validation/jquery.validate.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/jquery-validation/localization/messages_zh.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- layer --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/layer/layer.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- md5.js --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/js/md5.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- common.js --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/js/common.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel panel-default"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-heading"</span>&gt;</span>秒杀订单详情<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"goodslist"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>商品名称<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;goods.goodsName&#125;"</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"3"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>商品图片<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;$&#123;goods.goodsImg&#125;&#125;"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"200"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"200"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>订单价格<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;orderInfo.goodsPrice&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>             <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>下单时间<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;#dates.format(orderInfo.createDate, 'yyyy-MM-dd HH:mm:ss')&#125;"</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>订单状态<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> &gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;orderInfo.status eq 0&#125;"</span>&gt;</span>未支付<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;orderInfo.status eq 1&#125;"</span>&gt;</span>待发货<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;orderInfo.status eq 2&#125;"</span>&gt;</span>已发货<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;orderInfo.status eq 3&#125;"</span>&gt;</span>已收货<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;orderInfo.status eq 4&#125;"</span>&gt;</span>已退款<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;orderInfo.status eq 5&#125;"</span>&gt;</span>已完成<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary btn-block"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"payButton"</span>&gt;</span>立即支付<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>             <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>收货人<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span>&gt;</span>XXX  18812341234<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>             <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>收货地址<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span>&gt;</span>北京市昌平区回龙观龙博一区<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h3 id="3-5-订单详情页"><a href="#3-5-订单详情页" class="headerlink" title="3.5 订单详情页"></a>3.5 订单详情页</h3><p>秒杀成功后，进入了订单详情页</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>订单详情<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"Content-Type"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"text/html; charset=UTF-8"</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- jquery --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/js/jquery.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- bootstrap --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/bootstrap/css/bootstrap.min.css&#125;"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/bootstrap/js/bootstrap.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- jquery-validator --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/jquery-validation/jquery.validate.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/jquery-validation/localization/messages_zh.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- layer --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/layer/layer.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- md5.js --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/js/md5.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- common.js --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/js/common.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel panel-default"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-heading"</span>&gt;</span>秒杀订单详情<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"goodslist"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>商品名称<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;goods.goodsName&#125;"</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"3"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>商品图片<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;$&#123;goods.goodsImg&#125;&#125;"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"200"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"200"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>订单价格<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;orderInfo.goodsPrice&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>             <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>下单时间<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;#dates.format(orderInfo.createDate, 'yyyy-MM-dd HH:mm:ss')&#125;"</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>订单状态<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> &gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;orderInfo.status eq 0&#125;"</span>&gt;</span>未支付<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;orderInfo.status eq 1&#125;"</span>&gt;</span>待发货<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;orderInfo.status eq 2&#125;"</span>&gt;</span>已发货<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;orderInfo.status eq 3&#125;"</span>&gt;</span>已收货<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;orderInfo.status eq 4&#125;"</span>&gt;</span>已退款<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;orderInfo.status eq 5&#125;"</span>&gt;</span>已完成<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary btn-block"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"payButton"</span>&gt;</span>立即支付<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>             <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>收货人<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span>&gt;</span>XXX  18812341234<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>             <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>收货地址<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"2"</span>&gt;</span>北京市昌平区回龙观龙博一区<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h2 id="4-JMeter压测"><a href="#4-JMeter压测" class="headerlink" title="4 JMeter压测"></a>4 JMeter压测</h2><h3 id="4-1-JMeter入门"><a href="#4-1-JMeter入门" class="headerlink" title="4.1 JMeter入门"></a>4.1 JMeter入门</h3><h4 id="4-1-1-压测一下http-localhost-8080-goods-to-list接口"><a href="#4-1-1-压测一下http-localhost-8080-goods-to-list接口" class="headerlink" title="4.1.1 压测一下http://localhost:8080/goods/to_list接口"></a>4.1.1 压测一下<code>http://localhost:8080/goods/to_list</code>接口</h4><p>这个接口需要查询数据库，所以性能的瓶颈就在数据库</p><p>线程数在1000左右，吞吐量最大，线程数再多时，吞吐量不会在增加，异常率会剧增</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200625183943.png" srcset="/img/loading.gif" alt="image-20200625183939791"></p><p>把数据库放到服务器上，吞吐量一下子就下去了，奇怪的是服务器负载几乎为0，没有波动。奇怪了，明明请求数不少，但是为什么服务器的<strong>CPU负载这么低</strong>呢</p><p>解决方案：服务器带宽太低</p><blockquote><p><a href="https://blog.csdn.net/mian_CSDN/article/details/78995304?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" target="_blank" rel="noopener">https://blog.csdn.net/mian_CSDN/article/details/78995304?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase</a></p></blockquote><p>本机测试：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200718090003.png" srcset="/img/loading.gif" alt="image-20200718085958798"></p><p>可以看出硬件不同情况下的压测，两者吞吐量差距有<strong>几十倍</strong></p><h4 id="4-1-2-压测-http-localhost-8080-user-info"><a href="#4-1-2-压测-http-localhost-8080-user-info" class="headerlink" title="4.1.2 压测 http://localhost:8080/user/info"></a>4.1.2 压测 <code>http://localhost:8080/user/info</code></h4><p>不需要查询数据库，吞吐量一下子就上来了。范围大致在400~800。</p><p>这两个接口的区别就是，第一个接口不仅仅读了缓存，还读了一次数据库，而第二个接口只读了一次缓存。</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200625200432.png" srcset="/img/loading.gif" alt=""></p><h3 id="4-2-自定义变量模拟多用户"><a href="#4-2-自定义变量模拟多用户" class="headerlink" title="4.2 自定义变量模拟多用户"></a>4.2 自定义变量模拟多用户</h3><p>压测redis：<code>redis-benchmark -h 127.0.0.1 -p 6379 -c 100 -n 100000</code></p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200625201818.png" srcset="/img/loading.gif" alt="image-20200625201814849"></p><h3 id="4-3-JMeter命令行使用"><a href="#4-3-JMeter命令行使用" class="headerlink" title="4.3 JMeter命令行使用"></a>4.3 JMeter命令行使用</h3><p>步骤：</p><p>1：在windows上录好jmx</p><p>2：命令行：sh jmeter.sh -n -t XXX.jmx -l result.jtl</p><p>3：从linux中导入result.jtl到windows界面</p><p>测试的是：goods/to_list接口</p><p>5000个线程请求10次</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200626095524.png" srcset="/img/loading.gif" alt="image-20200626095520409"></p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200626094401.png" srcset="/img/loading.gif" alt="image-20200626094358142"></p><p>下面测试秒杀接口<code>http://localhost:8080/miaosha/do_miaosha</code></p><p>CPU负载</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200626101659.png" srcset="/img/loading.gif" alt="image-20200626101655804"></p><p>可以看到，CPU没有超负荷，但是网络带宽已经达到上限，所以我们这里主要的限制就是网络带宽</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200626102342.png" srcset="/img/loading.gif" alt="image-20200626102338656"></p><p>压测单个接口 /user/info，单个用户情况下，吞吐量稳定在1万3</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200718091447.png" srcset="/img/loading.gif" alt="image-20200718091445437"></p><p>压测秒杀接口，5000个用户下，吞吐量在3300左右</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200718100052.png" srcset="/img/loading.gif" alt=""></p><h2 id="5-页面优化"><a href="#5-页面优化" class="headerlink" title="5 页面优化"></a>5 页面优化</h2><h2 id="5-1-页面缓存-对象缓存"><a href="#5-1-页面缓存-对象缓存" class="headerlink" title="5.1 页面缓存+对象缓存"></a>5.1 页面缓存+对象缓存</h2><p>并发的瓶颈在数据库，所以加缓存，尽量减少对数据库的访问</p><h4 id="页面缓存"><a href="#页面缓存" class="headerlink" title="页面缓存"></a>页面缓存</h4><p>访问页面时，首先去缓存中取，如果没有手动渲染模板，渲染后把结果输出客户端，同时把结果缓存到redis中</p><p>渲染<code>goods_list</code>模板</p><p>先从缓存中取，如果不为空，直接返回这个页面。如果空，就手动渲染</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/to_list"</span>, produces=<span class="hljs-string">"text/html"</span>)<span class="hljs-meta">@ResponseBody</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">list</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Model model,MiaoshaUser user)</span> </span>&#123;    model.addAttribute(<span class="hljs-string">"user"</span>, user);    <span class="hljs-comment">//取缓存，有效期为1分钟。</span>    String html = redisService.get(GoodsKey.getGoodsList, <span class="hljs-string">""</span>, String<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(html)) &#123;        <span class="hljs-keyword">return</span> html;    &#125;    List&lt;GoodsVo&gt; goodsList = goodsService.listGoodsVo();    model.addAttribute(<span class="hljs-string">"goodsList"</span>, goodsList);    <span class="hljs-comment">//         return "goods_list";</span>    SpringWebContext ctx = <span class="hljs-keyword">new</span> SpringWebContext(request,response,                                                request.getServletContext(),request.getLocale(), model.asMap(), applicationContext );    <span class="hljs-comment">//手动渲染</span>    html = thymeleafViewResolver.getTemplateEngine().process(<span class="hljs-string">"goods_list"</span>, ctx);<span class="hljs-comment">//ctx是包含业务数据的的一个上下文</span>    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(html)) &#123;        redisService.set(GoodsKey.getGoodsList, <span class="hljs-string">""</span>, html);    &#125;    <span class="hljs-keyword">return</span> html;&#125;</code></pre><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200718104729.png" srcset="/img/loading.gif" alt="image-20200718104727157"></p><h4 id="对象缓存"><a href="#对象缓存" class="headerlink" title="对象缓存"></a>对象缓存</h4><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> MiaoshaUser <span class="hljs-title">getById</span><span class="hljs-params">(<span class="hljs-keyword">long</span> id)</span> </span>&#123;    <span class="hljs-comment">//取缓存</span>    MiaoshaUser user = redisService.get(MiaoshaUserKey.getById, <span class="hljs-string">""</span>+id, MiaoshaUser<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    <span class="hljs-keyword">if</span>(user != <span class="hljs-keyword">null</span>) &#123;        <span class="hljs-keyword">return</span> user;    &#125;    <span class="hljs-comment">//取数据库</span>    user = miaoshaUserDao.getById(id);    <span class="hljs-keyword">if</span>(user != <span class="hljs-keyword">null</span>) &#123;        redisService.set(MiaoshaUserKey.getById, <span class="hljs-string">""</span>+id, user);    &#125;    <span class="hljs-keyword">return</span> user;&#125;</code></pre><h2 id="6-解决超卖"><a href="#6-解决超卖" class="headerlink" title="6 解决超卖"></a>6 <strong>解决超卖</strong></h2><p>情景1：卖出商品数目大于库存</p><p>解决方案：在数据库操作时加一个判断</p><p><code>stock_count &gt; 0</code>———&gt;只有当库存容量大于0时，才更新库存，其实就是数据库对这一行数据加了一个锁，所以不会一次只会有一个线程进来操作</p><pre><code class="hljs sql">@<span class="hljs-keyword">Update</span>(<span class="hljs-string">"update miaosha_goods set stock_count = stock_count - 1 where goods_id = #&#123;goodsId&#125; and stock_count &gt; 0"</span>)<span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> reduceStock(MiaoshaGoods g);</code></pre><p>情景2：一个用户秒杀到了两个商品</p><p>秒杀流程：用户秒杀时，先判断库存、再判断是否曾经秒杀到过、没有的话，就减库存、下订单、并且写入秒杀订单</p><p>解决方案：利用数据库的唯一索引（根据用户id和商品ID），我们限制一个用户只可以秒杀一个商品，我们在写入订单时，以用户ID为唯一索引，两个订单进来后，只有一个可以成功写入到数据库。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre><code class="hljs xml">#thymeleafspring.thymeleaf.prefix=classpath:/templates/spring.thymeleaf.suffix=.htmlspring.thymeleaf.cache=falsespring.thymeleaf.content-type=text/htmlspring.thymeleaf.enabled=truespring.thymeleaf.encoding=UTF-8spring.thymeleaf.mode=HTML5#是否开启缓存pageCache.enbale=true   #打印mybatis sqllog4j.logger.com.ibatis=DEBUGlog4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUGlog4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUGlog4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUGlog4j.logger.Java.sql.Connection=DEBUGlog4j.logger.java.sql.Statement=DEBUGlog4j.logger.java.sql.PreparedStatement=DEBUG #mybatismybatis.type-aliases-package=com.geekq.miaosha.domain#开启驼峰转换 configuration config-location 不能同時存在 如果要走流程 请 放开注释mybatis.configuration.map-underscore-to-camel-case=true#mybatis.mapperLocations = classpath:com/geekq/miaosha/dao/*.xml mybatis.mapperLocations=classpath:mybatis/mapper/*.xml#配置xml方式 因为与 mybatis.configuration.map-underscore-to-camel-case 仅用于测试#mybatis.config-location=classpath:mybatis/mybatis-config.xml #add mybatismybatis.#datasourcespring.datasource.url=jdbc:mysql://localhost:3306/miaosha?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;useSSL=falsespring.datasource.username=rootspring.datasource.password=rootspring.datasource.driver-class-name=com.mysql.jdbc.Driver#druidspring.datasource.type=com.alibaba.druid.pool.DruidDataSourcespring.datasource.filters=statspring.datasource.maxActive=100spring.datasource.initialSize=100spring.datasource.maxWait=600spring.datasource.minIdle=50spring.datasource.timeBetweenEvictionRunsMillis=60000spring.datasource.minEvictableIdleTimeMillis=300000spring.datasource.validationQuery=select 'x'spring.datasource.testWhileIdle=truespring.datasource.testOnBorrow=falsespring.datasource.testOnReturn=falsespring.datasource.poolPreparedStatements=truespring.datasource.maxOpenPreparedStatements=20#static,spring对静态资源的处理spring.resources.add-mappings=truespring.resources.cache-period= 3600spring.resources.chain.cache=truespring.resources.chain.enabled=truespring.resources.chain.gzipped=truespring.resources.chain.html-application-cache=truespring.resources.static-locations=classpath:/static/#redis#redis.host=127.0.0.1redis.host=39.100.103.243redis.port=6379redis.timeout=100redis.password=123456redis.poolMaxTotal=1000redis.poolMaxIdle=500redis.poolMaxWait=500#server.port=8003 #rabbitmspring.rabbitmq.host=127.0.0.1spring.rabbitmq.port=5672spring.rabbitmq.username=guestspring.rabbitmq.password=guestspring.rabbitmq.virtual-host=/spring.rabbitmq.listener.simple.concurrency= 100spring.rabbitmq.listener.simple.max-concurrency= 100spring.rabbitmq.listener.simple.prefetch= 1spring.rabbitmq.listener.simple.auto-startup=truespring.rabbitmq.listener.simple.default-requeue-rejected= truespring.rabbitmq.template.retry.enabled=truespring.rabbitmq.template.retry.initial-interval=1000spring.rabbitmq.template.retry.max-attempts=3spring.rabbitmq.template.retry.max-interval=10000spring.rabbitmq.template.retry.multiplier=1.0spring.rabbitmq.publisher-confirms=truespring.rabbitmq.listener.direct.acknowledge-mode=manualspring.rabbitmq.listener.simple.acknowledge-mode=manual ## maven隔离#spring.profiles.active=dev</code></pre>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>秒杀</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>秒杀项目-2</title>
    <link href="/2020/06/27/%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-2/"/>
    <url>/2020/06/27/%E7%A7%92%E6%9D%80%E9%A1%B9%E7%9B%AE-2/</url>
    
    <content type="html"><![CDATA[<h1 id="秒杀项目（二）"><a href="#秒杀项目（二）" class="headerlink" title="秒杀项目（二）"></a>秒杀项目（二）</h1><h2 id="7-接口优化"><a href="#7-接口优化" class="headerlink" title="7 接口优化"></a>7 接口优化</h2><h3 id="7-1-Redis预减库存"><a href="#7-1-Redis预减库存" class="headerlink" title="7.1 Redis预减库存"></a>7.1 Redis预减库存</h3><p>目的：减少数据库访问。MySQL并发上限在几千左右。</p><p>步骤：</p><blockquote><p>系统初始化时，把商品库存加载到缓存中</p><p>收到请求后，redis预减库存，库存不足，直接返回</p><p>库存中如果大于0，把请求放入消息队列，返回状态一个派对中</p><p>请求出队，生成订单，减少库存</p><p>客户端轮询，是否秒杀成功</p></blockquote><h3 id="7-2-消息队列"><a href="#7-2-消息队列" class="headerlink" title="7.2 消息队列"></a>7.2 消息队列</h3><p>rabbitmq：四种交换机模式</p><h4 id="direct直连模式"><a href="#direct直连模式" class="headerlink" title="direct直连模式"></a>direct直连模式</h4><p>消息发送者向消息队列发送消息，消息接受者从队列中接受</p><blockquote><p>//send</p><pre><code class="hljs java">&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">(Object message)</span> </span>&#123;&gt;String msg = RedisService.beanToString(message);&gt;log.info(<span class="hljs-string">"send message:"</span>+msg);&gt;amqpTemplate.convertAndSend(MQConfig.QUEUE, msg);&gt;&#125;</code></pre><p>//接受</p><pre><code class="hljs java">&gt;<span class="hljs-meta">@RabbitListener</span>(queues=MQConfig.QUEUE)&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">(String message)</span> </span>&#123;&gt;log.info(<span class="hljs-string">"receive message:"</span>+message);&gt;&#125;</code></pre><p>//队列</p><pre><code class="hljs java">&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE = <span class="hljs-string">"queue"</span>;&gt;<span class="hljs-meta">@Bean</span>&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">queue</span><span class="hljs-params">()</span> </span>&#123;&gt;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(QUEUE, <span class="hljs-keyword">true</span>);&gt;&#125;</code></pre></blockquote><h4 id="topic模式"><a href="#topic模式" class="headerlink" title="topic模式"></a>topic模式</h4><blockquote><pre><code class="hljs java">&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TOPIC_QUEUE1 = <span class="hljs-string">"topic.queue1"</span>;&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TOPIC_QUEUE2 = <span class="hljs-string">"topic.queue2"</span>;&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TOPIC_EXCHANGE = <span class="hljs-string">"topicExchage"</span>;</code></pre><p>队列：</p><pre><code class="hljs java">&gt;<span class="hljs-meta">@Bean</span>&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">topicQueue1</span><span class="hljs-params">()</span> </span>&#123;&gt;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(TOPIC_QUEUE1, <span class="hljs-keyword">true</span>);&gt;&#125;&gt;<span class="hljs-meta">@Bean</span>&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">topicQueue2</span><span class="hljs-params">()</span> </span>&#123;&gt;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(TOPIC_QUEUE2, <span class="hljs-keyword">true</span>);&gt;&#125;</code></pre><p>交换机：</p><pre><code class="hljs java">&gt;<span class="hljs-meta">@Bean</span>&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> TopicExchange <span class="hljs-title">topicExchage</span><span class="hljs-params">()</span></span>&#123;&gt;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> TopicExchange(TOPIC_EXCHANGE);&gt;&#125;</code></pre><p>发送者，先把消息放入到Exchange中，再由Exchange放到Queue中，怎么放？</p><p>需要绑定bind到Queue上。</p><pre><code class="hljs java">&gt;<span class="hljs-meta">@Bean</span>&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">topicBinding1</span><span class="hljs-params">()</span> </span>&#123;&gt;<span class="hljs-keyword">return</span> BindingBuilder.bind(topicQueue1()).to(topicExchage()).with(<span class="hljs-string">"topic.key1"</span>);<span class="hljs-comment">//with("Routine_KEY")</span>&gt;<span class="hljs-comment">//也就是说如果key是topic.key1时，就会绑定到topicQueue1()上</span>&gt;&#125;&gt;<span class="hljs-meta">@Bean</span>&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">topicBinding2</span><span class="hljs-params">()</span> </span>&#123;&gt;<span class="hljs-keyword">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchage()).with(<span class="hljs-string">"topic.#"</span>);&gt;<span class="hljs-comment">//如果key是topic.key1时，绑定到topicQueue2()上</span>&gt;&#125;</code></pre><p>topic模式是支持通配符的，*代表一个单词，#代表0或者多个单词</p><p>发送端：</p><pre><code class="hljs java">&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendTopic</span><span class="hljs-params">(Object message)</span> </span>&#123;&gt;String msg = RedisService.beanToString(message);&gt;log.info(<span class="hljs-string">"send topic message:"</span>+msg);&gt;amqpTemplate.convertAndSend(MQConfig.TOPIC_EXCHANGE, <span class="hljs-string">"topic.key1"</span>, msg+<span class="hljs-string">"1"</span>);<span class="hljs-comment">//如果key是topic.key1，放到topicQueue1上</span>&gt;amqpTemplate.convertAndSend(MQConfig.TOPIC_EXCHANGE, <span class="hljs-string">"topic.key2"</span>, msg+<span class="hljs-string">"2"</span>);<span class="hljs-comment">//如果key是topic.key2，两个队列都可以放</span>&gt;&#125;</code></pre><p>接收端：</p><p>接受从topic  queue1来的消息</p><pre><code class="hljs java">&gt;<span class="hljs-meta">@RabbitListener</span>(queues=MQConfig.TOPIC_QUEUE1)&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveTopic1</span><span class="hljs-params">(String message)</span> </span>&#123;&gt;log.info(<span class="hljs-string">" topic  queue1 message:"</span>+message);&gt;&#125;</code></pre><p>接受从topic  queue2来的消息</p><pre><code class="hljs java">&gt;<span class="hljs-meta">@RabbitListener</span>(queues=MQConfig.TOPIC_QUEUE2)&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveTopic2</span><span class="hljs-params">(String message)</span> </span>&#123;&gt;log.info(<span class="hljs-string">" topic  queue2 message:"</span>+message);&gt;&#125;</code></pre><p>小结topic模式：创建一个交换机Exchange，两个队列，把交换机和队列进行了绑定，然后发送端发送时携带key，交换机根据这个key决定发送到哪一个队列</p><p>结果</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200626141526.png" srcset="/img/loading.gif" alt="image-20200626141522955"></p></blockquote><h4 id="Fanout模式：广播模式"><a href="#Fanout模式：广播模式" class="headerlink" title="Fanout模式：广播模式"></a>Fanout模式：广播模式</h4><blockquote><pre><code class="hljs java">&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String FANOUT_EXCHANGE = <span class="hljs-string">"fanoutxchage"</span>;&gt;<span class="hljs-comment">/**</span><span class="hljs-comment">  * Fanout模式 交换机Exchange</span><span class="hljs-comment">  * */</span>&gt;<span class="hljs-meta">@Bean</span>&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> FanoutExchange <span class="hljs-title">fanoutExchage</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FanoutExchange(FANOUT_EXCHANGE);&gt;&#125;&gt;<span class="hljs-meta">@Bean</span>&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">FanoutBinding1</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> BindingBuilder.bind(topicQueue1()).to(fanoutExchage());&gt;&#125;&gt;<span class="hljs-meta">@Bean</span>&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">FanoutBinding2</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> BindingBuilder.bind(topicQueue2()).to(fanoutExchage());&gt;&#125;</code></pre><p>交换机：</p><pre><code class="hljs java">&gt;<span class="hljs-meta">@Bean</span>&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> FanoutExchange <span class="hljs-title">fanoutExchage</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> FanoutExchange(FANOUT_EXCHANGE);&gt;&#125;</code></pre><p>绑定交换机和队列，这个交换机是绑定到两个队列上的，也就是说发送端发送信息到交换机上，交换机会把消息发送给所有的队列</p><pre><code class="hljs java">&gt;<span class="hljs-meta">@Bean</span>&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">FanoutBinding1</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> BindingBuilder.bind(topicQueue1()).to(fanoutExchage());&gt;&#125;&gt;<span class="hljs-meta">@Bean</span>&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">FanoutBinding2</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> BindingBuilder.bind(topicQueue2()).to(fanoutExchage());&gt;&#125;</code></pre><p>发送者</p><pre><code class="hljs java">&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendFanout</span><span class="hljs-params">(Object message)</span> </span>&#123; String msg = RedisService.beanToString(message); log.info(<span class="hljs-string">"send fanout message:"</span>+msg); amqpTemplate.convertAndSend(MQConfig.FANOUT_EXCHANGE, <span class="hljs-string">""</span>, msg);&gt;&#125;</code></pre><p>接受者：不需要更对队列，因为还是用的之前那个队列</p><pre><code class="hljs java">&gt;<span class="hljs-meta">@RabbitListener</span>(queues=MQConfig.TOPIC_QUEUE2)&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receiveTopic2</span><span class="hljs-params">(String message)</span> </span>&#123; log.info(<span class="hljs-string">" topic  queue2 receive message:"</span>+message);&gt;&#125;</code></pre><p>结果：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200626143404.png" srcset="/img/loading.gif" alt="image-20200626143401282"></p></blockquote><h4 id="Headers模式"><a href="#Headers模式" class="headerlink" title="Headers模式"></a>Headers模式</h4><blockquote><p>Headers是一个键值对，可以定义成Hashtable。发送者在发送的时候定义一些键值对，接收者也可以再绑定时候传入一些键值对，两者匹配的话，则对应的队列就可以收到消息。</p><p>交换机、队列：</p><pre><code class="hljs java">&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String HEADER_QUEUE = <span class="hljs-string">"header.queue"</span>;&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String HEADERS_EXCHANGE = <span class="hljs-string">"headersExchage"</span>;</code></pre><p>绑定交换机和队列：</p><pre><code class="hljs java">&gt;<span class="hljs-comment">/**</span><span class="hljs-comment">&gt;* Header模式 交换机Exchange</span><span class="hljs-comment">&gt;* */</span>&gt;<span class="hljs-comment">//交换机</span>&gt;<span class="hljs-meta">@Bean</span>&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> HeadersExchange <span class="hljs-title">headersExchage</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HeadersExchange(HEADERS_EXCHANGE);&gt;&#125;&gt;<span class="hljs-comment">//队列</span>&gt;<span class="hljs-meta">@Bean</span>&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">headerQueue1</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(HEADER_QUEUE, <span class="hljs-keyword">true</span>);&gt;&#125;&gt;<span class="hljs-comment">//绑定两者</span>&gt;<span class="hljs-meta">@Bean</span>&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">headerBinding</span><span class="hljs-params">()</span> </span>&#123;Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();map.put(<span class="hljs-string">"header1"</span>, <span class="hljs-string">"value1"</span>);map.put(<span class="hljs-string">"header2"</span>, <span class="hljs-string">"value2"</span>);<span class="hljs-keyword">return</span> BindingBuilder.bind(headerQueue1()).to(headersExchage()).whereAll(map).match();<span class="hljs-comment">//whereAll当所有条件满足，才会放入队列</span>&gt;&#125;</code></pre><p>发送端：</p><pre><code class="hljs java">&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendHeader</span><span class="hljs-params">(Object message)</span> </span>&#123;String msg = RedisService.beanToString(message);log.info(<span class="hljs-string">"send fanout message:"</span>+msg);MessageProperties properties = <span class="hljs-keyword">new</span> MessageProperties();properties.setHeader(<span class="hljs-string">"header1"</span>, <span class="hljs-string">"value1"</span>);properties.setHeader(<span class="hljs-string">"header2"</span>, <span class="hljs-string">"value2"</span>);Message obj = <span class="hljs-keyword">new</span> Message(msg.getBytes(), properties);amqpTemplate.convertAndSend(MQConfig.HEADERS_EXCHANGE, <span class="hljs-string">""</span>, obj);&gt;&#125;</code></pre><p>入口：</p><pre><code class="hljs java">&gt;<span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/mq/header"</span>)<span class="hljs-meta">@ResponseBody</span><span class="hljs-function"><span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title">header</span><span class="hljs-params">()</span> </span>&#123;sender.sendHeader(<span class="hljs-string">"hello,imooc"</span>);    <span class="hljs-keyword">return</span> Result.success(<span class="hljs-string">"Hello，world"</span>);&#125;</code></pre><p>结果：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200626144448.png" srcset="/img/loading.gif" alt="image-20200626144444737"></p></blockquote><h3 id="7-3-秒杀接口优化"><a href="#7-3-秒杀接口优化" class="headerlink" title="7.3 秒杀接口优化"></a>7.3 秒杀接口优化</h3><h4 id="优化前"><a href="#优化前" class="headerlink" title="优化前"></a>优化前</h4><p>未优化前流程：判断用户是否登录、判断库存、判断是否已经秒杀过、然后减库存、下订单、写入订单信息</p><p>这个过程访问了四次数据库</p><p>代码：</p><blockquote><pre><code class="hljs java">&gt;<span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/do_miaosha"</span>, method=RequestMethod.POST)&gt;<span class="hljs-meta">@ResponseBody</span>&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> Result&lt;Integer&gt; <span class="hljs-title">miaosha</span><span class="hljs-params">(Model model,MiaoshaUser user,</span></span><span class="hljs-function"><span class="hljs-params">                    @RequestParam(<span class="hljs-string">"goodsId"</span>)</span><span class="hljs-keyword">long</span> goodsId) </span>&#123;&gt;model.addAttribute(<span class="hljs-string">"user"</span>, user);&gt;<span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">//判断用户---------1</span>&gt;<span class="hljs-keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);&gt;&#125;&gt;<span class="hljs-comment">//判断是否已经秒杀到了---------2</span>&gt;MiaoshaOrder order = orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(), goodsId);&gt;<span class="hljs-keyword">if</span>(order != <span class="hljs-keyword">null</span>) &#123;&gt;<span class="hljs-keyword">return</span> Result.error(CodeMsg.REPEATE_MIAOSHA);&gt;&#125;&gt;<span class="hljs-comment">//判断库存---------3</span>&gt;GoodsVo goods = goodsService.getGoodsVoByGoodsId(goodsId);<span class="hljs-comment">//10个商品，req1 req2</span>&gt;<span class="hljs-keyword">int</span> stock = goods.getStockCount();&gt;<span class="hljs-keyword">if</span>(stock &lt;= <span class="hljs-number">0</span>) &#123;&gt;<span class="hljs-keyword">return</span> Result.error(CodeMsg.MIAO_SHA_OVER);&gt;&#125;&gt;<span class="hljs-comment">//判断是否已经秒杀到了---------4</span>&gt;MiaoshaOrder order = orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(), goodsId);&gt;<span class="hljs-keyword">if</span>(order != <span class="hljs-keyword">null</span>) &#123;&gt;<span class="hljs-keyword">return</span> Result.error(CodeMsg.REPEATE_MIAOSHA);&gt;&#125;&gt;<span class="hljs-comment">//减库存 下订单 写入秒杀订单---------5</span>&gt;OrderInfo orderInfo = miaoshaService.miaosha(user, goods);&gt;<span class="hljs-keyword">return</span> Result.success(orderInfo);&gt;&#125;</code></pre></blockquote><h4 id="优化后"><a href="#优化后" class="headerlink" title="优化后"></a>优化后</h4><p>思路：<strong>减少数据库访问</strong></p><blockquote><p>系统初始化，系统初始化时，把商品加载到Redis中</p><p>收到请求时，Redis预减少库存，库存不足，直接返回（这里还可以使用一个<strong>Map</strong>做一个内存标记）</p><p>库存如果够，把请求放入到消息队列中，返回一个排队中状态</p><p>请求出队，生成订单（这个订单写入到缓存中），减少库存</p><p>客户端轮询（去缓存取），是否秒杀成功</p></blockquote><p>代码：</p><p>系统初始化，系统初始化时，把商品加载到Redis中</p><blockquote><p>实现接口InitializingBean，重写方法afterPropertiesSet()</p><p>如果实现了InitializingBean接口，那么框架启动时，会回调afterPropertiesSet方法，我们可以在这个方法中实现系统启动时加载商品到缓存中</p><pre><code class="hljs java">&gt;<span class="hljs-comment">/**</span><span class="hljs-comment">&gt;* 系统初始化</span><span class="hljs-comment">&gt;* */</span>&gt;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;List&lt;GoodsVo&gt; goodsList = goodsService.listGoodsVo();<span class="hljs-comment">//先从数据库中查询出所有数据</span><span class="hljs-keyword">if</span>(goodsList == <span class="hljs-keyword">null</span>) &#123;   <span class="hljs-keyword">return</span>;&#125;<span class="hljs-keyword">for</span>(GoodsVo goods : goodsList) &#123;   redisService.set(GoodsKey.getMiaoshaGoodsStock, <span class="hljs-string">""</span>+goods.getId(), goods.getStockCount());<span class="hljs-comment">//把查询出来的数据，放到缓存中</span>   localOverMap.put(goods.getId(), <span class="hljs-keyword">false</span>);&#125;&gt;&#125;</code></pre></blockquote><p>收到请求时，Redis预减少库存，库存不足，直接返回</p><pre><code class="hljs java"><span class="hljs-comment">//预减库存</span><span class="hljs-keyword">long</span> stock = redisService.decr(GoodsKey.getMiaoshaGoodsStock, <span class="hljs-string">""</span>+goodsId);<span class="hljs-comment">//10</span><span class="hljs-keyword">if</span>(stock &lt; <span class="hljs-number">0</span>) &#123;    localOverMap.put(goodsId, <span class="hljs-keyword">true</span>);   <span class="hljs-keyword">return</span> Result.error(CodeMsg.MIAO_SHA_OVER);&#125;</code></pre><p>如果库存不为0，就判断用户是否已经成功秒杀过一次</p><pre><code class="hljs java"><span class="hljs-comment">//判断是否已经秒杀到了</span>MiaoshaOrder order = orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(), goodsId);<span class="hljs-keyword">if</span>(order != <span class="hljs-keyword">null</span>) &#123;   <span class="hljs-keyword">return</span> Result.error(CodeMsg.REPEATE_MIAOSHA);&#125;</code></pre><p>如果用户没用秒杀过，那么就把这个请求入队</p><pre><code class="hljs java"><span class="hljs-comment">//入队</span><span class="hljs-meta">@Autowired</span>MQSender sender;MiaoshaMessage mm = <span class="hljs-keyword">new</span> MiaoshaMessage();mm.setUser(user);mm.setGoodsId(goodsId);sender.sendMiaoshaMessage(mm);<span class="hljs-comment">//发送信息：信息中包含用户、商品ID</span><span class="hljs-keyword">return</span> Result.success(<span class="hljs-number">0</span>);<span class="hljs-comment">//排队中</span></code></pre><p>定义消息队列的发送者：使用Direct模式</p><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span>AmqpTemplate amqpTemplate ; <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMiaoshaMessage</span><span class="hljs-params">(MiaoshaMessage mm)</span> </span>&#123;   String msg = RedisService.beanToString(mm);   log.info(<span class="hljs-string">"send message:"</span>+msg);   amqpTemplate.convertAndSend(MQConfig.MIAOSHA_QUEUE, msg);&#125;</code></pre><p>使用的队列：</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String MIAOSHA_QUEUE = <span class="hljs-string">"miaosha.queue"</span>;</code></pre><p>接收端</p><pre><code class="hljs java"><span class="hljs-keyword">private</span> HashMap&lt;Long, Boolean&gt; localOverMap =  <span class="hljs-keyword">new</span> HashMap&lt;Long, Boolean&gt;();<span class="hljs-comment">//内存标记</span> <span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/do_miaosha"</span>, method=RequestMethod.POST)<span class="hljs-meta">@ResponseBody</span><span class="hljs-function"><span class="hljs-keyword">public</span> Result&lt;Integer&gt; <span class="hljs-title">miaosha</span><span class="hljs-params">(Model model,MiaoshaUser user,</span></span><span class="hljs-function"><span class="hljs-params">                               @RequestParam(<span class="hljs-string">"goodsId"</span>)</span><span class="hljs-keyword">long</span> goodsId) </span>&#123;    model.addAttribute(<span class="hljs-string">"user"</span>, user);    <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>) &#123;        <span class="hljs-keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);    &#125;    <span class="hljs-comment">//内存标记，减少redis访问</span>    <span class="hljs-keyword">boolean</span> over = localOverMap.get(goodsId);<span class="hljs-comment">//判断商品是否卖完</span>    <span class="hljs-keyword">if</span>(over) &#123;        <span class="hljs-keyword">return</span> Result.error(CodeMsg.MIAO_SHA_OVER);<span class="hljs-comment">//如果卖完，就返回一个错误信息</span>    &#125;    <span class="hljs-comment">//预减库存</span>    <span class="hljs-keyword">long</span> stock = redisService.decr(GoodsKey.getMiaoshaGoodsStock, <span class="hljs-string">""</span>+goodsId);<span class="hljs-comment">//10</span>    <span class="hljs-keyword">if</span>(stock &lt; <span class="hljs-number">0</span>) &#123;        localOverMap.put(goodsId, <span class="hljs-keyword">true</span>);        <span class="hljs-keyword">return</span> Result.error(CodeMsg.MIAO_SHA_OVER);    &#125;    <span class="hljs-comment">//判断是否已经秒杀到了</span>    MiaoshaOrder order = orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(), goodsId);    <span class="hljs-keyword">if</span>(order != <span class="hljs-keyword">null</span>) &#123;        <span class="hljs-keyword">return</span> Result.error(CodeMsg.REPEATE_MIAOSHA);    &#125;    <span class="hljs-comment">//入队</span>    MiaoshaMessage mm = <span class="hljs-keyword">new</span> MiaoshaMessage();    mm.setUser(user);    mm.setGoodsId(goodsId);    sender.sendMiaoshaMessage(mm);    <span class="hljs-keyword">return</span> Result.success(<span class="hljs-number">0</span>);<span class="hljs-comment">//排队中</span>&#125;</code></pre><p>客户端轮询：</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * orderId：成功</span><span class="hljs-comment">     * -1：秒杀失败</span><span class="hljs-comment">     * 0： 排队中</span><span class="hljs-comment">     * */</span><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/result"</span>, method=RequestMethod.GET)<span class="hljs-meta">@ResponseBody</span><span class="hljs-function"><span class="hljs-keyword">public</span> Result&lt;Long&gt; <span class="hljs-title">miaoshaResult</span><span class="hljs-params">(Model model,MiaoshaUser user,</span></span><span class="hljs-function"><span class="hljs-params">                                  @RequestParam(<span class="hljs-string">"goodsId"</span>)</span><span class="hljs-keyword">long</span> goodsId) </span>&#123;    model.addAttribute(<span class="hljs-string">"user"</span>, user);    <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>) &#123;        <span class="hljs-keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);    &#125;    <span class="hljs-keyword">long</span> result  =miaoshaService.getMiaoshaResult(user.getId(), goodsId);    <span class="hljs-keyword">return</span> Result.success(result);<span class="hljs-comment">//如果请求还在排队，那么就继续轮询</span>&#125; <span class="hljs-meta">@AccessLimit</span>(seconds=<span class="hljs-number">5</span>, maxCount=<span class="hljs-number">5</span>, needLogin=<span class="hljs-keyword">true</span>)<span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/path"</span>, method=RequestMethod.GET)<span class="hljs-meta">@ResponseBody</span><span class="hljs-function"><span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title">getMiaoshaPath</span><span class="hljs-params">(HttpServletRequest request, MiaoshaUser user,</span></span><span class="hljs-function"><span class="hljs-params">                                     @RequestParam(<span class="hljs-string">"goodsId"</span>)</span><span class="hljs-keyword">long</span> goodsId,</span><span class="hljs-function">                                     @<span class="hljs-title">RequestParam</span><span class="hljs-params">(value=<span class="hljs-string">"verifyCode"</span>, defaultValue=<span class="hljs-string">"0"</span>)</span><span class="hljs-keyword">int</span> verifyCode</span><span class="hljs-function">                                    ) </span>&#123;    <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>) &#123;        <span class="hljs-keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);    &#125;    <span class="hljs-keyword">boolean</span> check = miaoshaService.checkVerifyCode(user, goodsId, verifyCode);    <span class="hljs-keyword">if</span>(!check) &#123;        <span class="hljs-keyword">return</span> Result.error(CodeMsg.REQUEST_ILLEGAL);    &#125;    String path  =miaoshaService.createMiaoshaPath(user, goodsId);    <span class="hljs-keyword">return</span> Result.success(path);&#125;</code></pre><p>前端：用户进入商品详情页，点击立即秒杀后，后端返回一个状态码，</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">HTML</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>商品详情<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"Content-Type"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"text/html; charset=UTF-8"</span> /&gt;</span>    <span class="hljs-comment">&lt;!-- jquery --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/js/jquery.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- bootstrap --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">"@&#123;/bootstrap/css/bootstrap.min.css&#125;"</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/bootstrap/js/bootstrap.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- jquery-validator --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/jquery-validation/jquery.validate.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/jquery-validation/localization/messages_zh.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- layer --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/layer/layer.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- md5.js --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/js/md5.min.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>    <span class="hljs-comment">&lt;!-- common.js --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;/js/common.js&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel panel-default"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-heading"</span>&gt;</span>秒杀商品详情<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"panel-body"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;user eq null&#125;"</span>&gt;</span> 您还没有登录，请登陆后再操作<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>没有收货地址的提示。。。<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"table"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"goodslist"</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>商品名称<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;goods.goodsName&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>商品图片<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"3"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">th:src</span>=<span class="hljs-string">"@&#123;$&#123;goods.goodsImg&#125;&#125;"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"200"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"200"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>秒杀开始时间<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;#dates.format(goods.startDate, 'yyyy-MM-dd HH:mm:ss')&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"miaoshaTip"</span>&gt;</span>              <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"remainSeconds"</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;remainSeconds&#125;"</span> /&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;miaoshaStatus eq 0&#125;"</span>&gt;</span>秒杀倒计时：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"countDown"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;remainSeconds&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>秒<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;miaoshaStatus eq 1&#125;"</span>&gt;</span>秒杀进行中<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">"$&#123;miaoshaStatus eq 2&#125;"</span>&gt;</span>秒杀已结束<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"miaoshaForm"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/miaosha/do_miaosha"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"btn btn-primary btn-block"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"buyButton"</span>&gt;</span>立即秒杀<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"hidden"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"goodsId"</span> <span class="hljs-attr">th:value</span>=<span class="hljs-string">"$&#123;goods.id&#125;"</span> /&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>商品原价<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;goods.goodsPrice&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>秒杀价<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;goods.miaoshaPrice&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>库存数量<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">"3"</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;goods.stockCount&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span>    countDown();&#125;); <span class="actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">countDown</span><span class="hljs-params">()</span></span>&#123;</span><span class="javascript">    <span class="hljs-keyword">var</span> remainSeconds = $(<span class="hljs-string">"#remainSeconds"</span>).val();</span><span class="actionscript">    <span class="hljs-keyword">var</span> timeout;</span><span class="actionscript">    <span class="hljs-keyword">if</span>(remainSeconds &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//秒杀还没开始，倒计时</span></span><span class="javascript">        $(<span class="hljs-string">"#buyButton"</span>).attr(<span class="hljs-string">"disabled"</span>, <span class="hljs-literal">true</span>);</span><span class="actionscript">        timeout = setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;</span><span class="javascript">            $(<span class="hljs-string">"#countDown"</span>).text(remainSeconds - <span class="hljs-number">1</span>);</span><span class="javascript">            $(<span class="hljs-string">"#remainSeconds"</span>).val(remainSeconds - <span class="hljs-number">1</span>);</span>            countDown();        &#125;,1000);<span class="actionscript">    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(remainSeconds == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//秒杀进行中</span></span><span class="javascript">        $(<span class="hljs-string">"#buyButton"</span>).attr(<span class="hljs-string">"disabled"</span>, <span class="hljs-literal">false</span>);</span>        if(timeout)&#123;            clearTimeout(timeout);        &#125;<span class="javascript">        $(<span class="hljs-string">"#miaoshaTip"</span>).html(<span class="hljs-string">"秒杀进行中"</span>);</span><span class="actionscript">    &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//秒杀已经结束</span></span><span class="javascript">        $(<span class="hljs-string">"#buyButton"</span>).attr(<span class="hljs-string">"disabled"</span>, <span class="hljs-literal">true</span>);</span><span class="javascript">        $(<span class="hljs-string">"#miaoshaTip"</span>).html(<span class="hljs-string">"秒杀已经结束"</span>);</span>    &#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h3 id="7-4-其他优化"><a href="#7-4-其他优化" class="headerlink" title="7.4 其他优化"></a>7.4 其他优化</h3><p>下面这些优化手段都是为了降低并发请求量</p><h4 id="7-4-1-隐藏秒杀地址"><a href="#7-4-1-隐藏秒杀地址" class="headerlink" title="7.4.1 隐藏秒杀地址"></a>7.4.1 隐藏秒杀地址</h4><p>思路：秒杀开始之前，先去请求接口，获取秒杀地址</p><blockquote><p>步骤：</p><p>接口改造，带上PathVariable参数</p><p>添加生成地址的接口</p><p>秒杀收到请求，先验证PathVaribale</p></blockquote><p>代码：</p><pre><code class="hljs js"><span class="hljs-comment">//前端，用户在点击立即秒杀时，做一个用户验证，判断这个用户是否合法.</span><span class="hljs-comment">//用户点击立即秒杀，先去生成一个路径（根据用户token和商品id+UUID随机生成的），生成的路径作为参数，传入到后台，后台再去验证这个路径是否合法</span><span class="hljs-comment">//注意这个路径是把key和value拼接起来的，key是用户的token+商品id，value是一个随机的UUID字符串</span><span class="hljs-comment">//我们验证路径是否合法，也是根据key判断redis中是否存在这个key来验证的，如果根据这个key取出来的value值，和传进来的不一样，那么就不是合法路径</span><span class="hljs-comment">//注意，这个key和value的有效时间为60s，设置了有效时间</span><span class="hljs-comment">//省略其他代码。用户在点击立即秒杀后，执行程序：getMiaoshaPath()，获取秒杀路径，然后获取完秒杀路径后，去执行秒杀，执行完后，返回秒杀结果</span>    &lt;button <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">"btn btn-primary"</span> type=<span class="hljs-string">"button"</span> id=<span class="hljs-string">"buyButton"</span>onclick=<span class="hljs-string">"getMiaoshaPath()"</span>&gt;立即秒杀&lt;<span class="hljs-regexp">/button&gt;</span><span class="hljs-regexp"> </span><span class="hljs-regexp"> </span><span class="hljs-regexp">function getMiaoshaPath()&#123;</span><span class="hljs-regexp">    var goodsId = $("#goodsId").val();</span><span class="hljs-regexp">    g_showLoading();</span><span class="hljs-regexp">    $.ajax(&#123;</span><span class="hljs-regexp">        url:"/mi</span>aosha/path<span class="hljs-string">",</span><span class="hljs-string">        type:"</span>GET<span class="hljs-string">",</span><span class="hljs-string">        data:&#123;</span><span class="hljs-string">            goodsId:goodsId,//传入商品ID</span>            verifyCode:$("#verifyCode").val()        &#125;,        success:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;            <span class="hljs-keyword">if</span>(data.code == <span class="hljs-number">0</span>)&#123;                <span class="hljs-keyword">var</span> path = data.data;<span class="hljs-comment">//从后端拿到路径</span>                doMiaosha(path);<span class="hljs-comment">//开始进行秒杀</span>            &#125;<span class="hljs-keyword">else</span>&#123;                layer.msg(data.msg);            &#125;        &#125;,        error:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;            layer.msg(<span class="hljs-string">"客户端请求有误"</span>);        &#125;    &#125;);&#125;  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doMiaosha</span>(<span class="hljs-params">path</span>)</span>&#123;    $.ajax(&#123;        url:<span class="hljs-string">"/miaosha/"</span>+path+<span class="hljs-string">"/do_miaosha"</span>,        type:<span class="hljs-string">"POST"</span>,        data:&#123;            goodsId:$(<span class="hljs-string">"#goodsId"</span>).val()        &#125;,        success:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;            <span class="hljs-keyword">if</span>(data.code == <span class="hljs-number">0</span>)&#123;                <span class="hljs-comment">//window.location.href="/order_detail.htm?orderId="+data.data.id;</span>                getMiaoshaResult($(<span class="hljs-string">"#goodsId"</span>).val());            &#125;<span class="hljs-keyword">else</span>&#123;                layer.msg(data.msg);            &#125;        &#125;,        error:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;            layer.msg(<span class="hljs-string">"客户端请求有误"</span>);        &#125;    &#125;);      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMiaoshaResult</span>(<span class="hljs-params">goodsId</span>)</span>&#123;        g_showLoading();        $.ajax(&#123;            url:<span class="hljs-string">"/miaosha/result"</span>,            type:<span class="hljs-string">"GET"</span>,            data:&#123;                goodsId:$(<span class="hljs-string">"#goodsId"</span>).val(),            &#125;,            success:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;                <span class="hljs-keyword">if</span>(data.code == <span class="hljs-number">0</span>)&#123;                    <span class="hljs-keyword">var</span> result = data.data;                    <span class="hljs-keyword">if</span>(result &lt; <span class="hljs-number">0</span>)&#123;                        layer.msg(<span class="hljs-string">"对不起，秒杀失败"</span>);                    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(result == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//继续轮询</span>                        setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;                            getMiaoshaResult(goodsId);                        &#125;, <span class="hljs-number">200</span>);                    &#125;<span class="hljs-keyword">else</span>&#123;                        layer.confirm(<span class="hljs-string">"恭喜你，秒杀成功！查看订单？"</span>, &#123;<span class="hljs-attr">btn</span>:[<span class="hljs-string">"确定"</span>,<span class="hljs-string">"取消"</span>]&#125;,                                      <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;                            <span class="hljs-built_in">window</span>.location.href=<span class="hljs-string">"/order_detail.htm?orderId="</span>+result;                        &#125;,                                      <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;                            layer.closeAll();                        &#125;);                    &#125;                &#125;<span class="hljs-keyword">else</span>&#123;                    layer.msg(data.msg);                &#125;            &#125;,            error:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;                layer.msg(<span class="hljs-string">"客户端请求有误"</span>);            &#125;        &#125;);    &#125;</code></pre><p>后端代码：</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/&#123;path&#125;/do_miaosha"</span>, method=RequestMethod.POST)<span class="hljs-meta">@ResponseBody</span><span class="hljs-function"><span class="hljs-keyword">public</span> Result&lt;Integer&gt; <span class="hljs-title">miaosha</span><span class="hljs-params">(Model model,MiaoshaUser user,</span></span><span class="hljs-function"><span class="hljs-params">                               @RequestParam(<span class="hljs-string">"goodsId"</span>)</span><span class="hljs-keyword">long</span> goodsId,</span><span class="hljs-function">                               @<span class="hljs-title">PathVariable</span><span class="hljs-params">(<span class="hljs-string">"path"</span>)</span> String path) </span>&#123;    model.addAttribute(<span class="hljs-string">"user"</span>, user);    <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>) &#123;        <span class="hljs-keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);    &#125;    <span class="hljs-comment">//验证path，前端传进来的地址，验证一下是否合法</span>    <span class="hljs-keyword">boolean</span> check = miaoshaService.checkPath(user, goodsId, path);    <span class="hljs-keyword">if</span>(!check)&#123;        <span class="hljs-keyword">return</span> Result.error(CodeMsg.REQUEST_ILLEGAL);    &#125;    <span class="hljs-comment">//内存标记，减少redis访问</span>    <span class="hljs-keyword">boolean</span> over = localOverMap.get(goodsId);    <span class="hljs-keyword">if</span>(over) &#123;        <span class="hljs-keyword">return</span> Result.error(CodeMsg.MIAO_SHA_OVER);    &#125;    <span class="hljs-comment">//预减库存</span>    <span class="hljs-keyword">long</span> stock = redisService.decr(GoodsKey.getMiaoshaGoodsStock, <span class="hljs-string">""</span>+goodsId);<span class="hljs-comment">//10</span>    <span class="hljs-keyword">if</span>(stock &lt; <span class="hljs-number">0</span>) &#123;        localOverMap.put(goodsId, <span class="hljs-keyword">true</span>);        <span class="hljs-keyword">return</span> Result.error(CodeMsg.MIAO_SHA_OVER);    &#125;    <span class="hljs-comment">//判断是否已经秒杀到了</span>    MiaoshaOrder order = orderService.getMiaoshaOrderByUserIdGoodsId(user.getId(), goodsId);    <span class="hljs-keyword">if</span>(order != <span class="hljs-keyword">null</span>) &#123;        <span class="hljs-keyword">return</span> Result.error(CodeMsg.REPEATE_MIAOSHA);    &#125;    <span class="hljs-comment">//入队</span>    MiaoshaMessage mm = <span class="hljs-keyword">new</span> MiaoshaMessage();    mm.setUser(user);    mm.setGoodsId(goodsId);    sender.sendMiaoshaMessage(mm);    <span class="hljs-keyword">return</span> Result.success(<span class="hljs-number">0</span>);<span class="hljs-comment">//排队中</span> &#125;</code></pre><p>生成秒杀路径</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">createMiaoshaPath</span><span class="hljs-params">(MiaoshaUser user, <span class="hljs-keyword">long</span> goodsId)</span> </span>&#123;    <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span> || goodsId &lt;=<span class="hljs-number">0</span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;    String str = MD5Util.md5(UUIDUtil.uuid()+<span class="hljs-string">"123456"</span>);    redisService.set(MiaoshaKey.getMiaoshaPath, <span class="hljs-string">""</span>+user.getId() + <span class="hljs-string">"_"</span>+ goodsId, str);    <span class="hljs-keyword">return</span> str;&#125;</code></pre><p>验证秒杀路径</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">checkPath</span><span class="hljs-params">(MiaoshaUser user, <span class="hljs-keyword">long</span> goodsId, String path)</span> </span>&#123;    <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span> || path == <span class="hljs-keyword">null</span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;    String pathOld = redisService.get(MiaoshaKey.getMiaoshaPath, <span class="hljs-string">""</span>+user.getId() + <span class="hljs-string">"_"</span>+ goodsId, String<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    <span class="hljs-keyword">return</span> path.equals(pathOld);&#125;</code></pre><p>但是又有一个问题，获取秒杀接口的地址，也有暴露的危险，解决方案：验证码</p><h4 id="7-4-2-图形验证码"><a href="#7-4-2-图形验证码" class="headerlink" title="7.4.2 图形验证码"></a>7.4.2 图形验证码</h4><p>在用户点击秒杀按钮时，有一个验证码，要求用户输入验证码，才可以秒杀</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200627160327.png" srcset="/img/loading.gif" alt="image-20200627160323496"></p><p>作用：防止机器人、以及降低用户的请求</p><blockquote><p>步骤：</p><p>1、添加生成验证码的接口</p><p>2、获取秒杀路径的时候，验证验证码</p><p>3、ScriptEngine使用（JDK6）</p></blockquote><p>代码：</p><h5 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h5><p>一个输入框，一个验证码图片</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"verifyCodeImg"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"80"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"32"</span>  <span class="hljs-attr">style</span>=<span class="hljs-string">"display:none"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"refreshVerifyCode()"</span>/&gt;</span><span class="hljs-comment">&lt;!--//style="display:none"，一开始是不展示的--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"verifyCode"</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">"form-control"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"display:none"</span>/&gt;</span></code></pre><p>页面初始化，渲染完页面后，开始生成验证码。注意只有在秒杀进行中，才会生成验证码</p><pre><code class="hljs js"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(remainSeconds == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//秒杀进行中</span>    $(<span class="hljs-string">"#buyButton"</span>).attr(<span class="hljs-string">"disabled"</span>, <span class="hljs-literal">false</span>);    <span class="hljs-keyword">if</span>(timeout)&#123;        clearTimeout(timeout);    &#125;    $(<span class="hljs-string">"#miaoshaTip"</span>).html(<span class="hljs-string">"秒杀进行中"</span>);    $(<span class="hljs-string">"#verifyCodeImg"</span>).attr(<span class="hljs-string">"src"</span>, <span class="hljs-string">"/miaosha/verifyCode?goodsId="</span>+$(<span class="hljs-string">"#goodsId"</span>).val());<span class="hljs-comment">//验证码地址，这里也要输入商品地址</span>    $(<span class="hljs-string">"#verifyCodeImg"</span>).show();<span class="hljs-comment">//展示图片</span>    $(<span class="hljs-string">"#verifyCode"</span>).show();<span class="hljs-comment">//把输入框也给展示出来</span>&#125;</code></pre><p>秒杀结束后，把图片和输入框给隐藏掉</p><pre><code class="hljs js"><span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//秒杀已经结束</span>        $(<span class="hljs-string">"#buyButton"</span>).attr(<span class="hljs-string">"disabled"</span>, <span class="hljs-literal">true</span>);        $(<span class="hljs-string">"#miaoshaTip"</span>).html(<span class="hljs-string">"秒杀已经结束"</span>);        $(<span class="hljs-string">"#verifyCodeImg"</span>).hide();        $(<span class="hljs-string">"#verifyCode"</span>).hide();    &#125;</code></pre><p>生成图片验证码的接口</p><pre><code class="hljs java"><span class="hljs-comment">//思路：先验证参数，传入商品参数，</span><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/verifyCode"</span>, method=RequestMethod.GET)    <span class="hljs-meta">@ResponseBody</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title">getMiaoshaVerifyCod</span><span class="hljs-params">(HttpServletResponse response,MiaoshaUser user,</span></span><span class="hljs-function"><span class="hljs-params">            @RequestParam(<span class="hljs-string">"goodsId"</span>)</span><span class="hljs-keyword">long</span> goodsId) </span>&#123;        <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);        &#125;        <span class="hljs-keyword">try</span> &#123;            BufferedImage image  = miaoshaService.createVerifyCode(user, goodsId);<span class="hljs-comment">//使用BufferedImage</span>            OutputStream out = response.getOutputStream();            ImageIO.write(image, <span class="hljs-string">"JPEG"</span>, out);            out.flush();            out.close();            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;            e.printStackTrace();            <span class="hljs-keyword">return</span> Result.error(CodeMsg.MIAOSHA_FAIL);        &#125;    &#125;</code></pre><p>点击验证码图片，刷新验证码</p><p>刷新验证码就是重新调用验证码，但是浏览器对图片是有缓存的，所以插入一个参数<code>new Date().getTime()</code></p><pre><code class="hljs js">&lt;img id=<span class="hljs-string">"verifyCodeImg"</span> width=<span class="hljs-string">"80"</span> height=<span class="hljs-string">"32"</span>  style=<span class="hljs-string">"display:none"</span> onclick=<span class="hljs-string">"refreshVerifyCode()"</span>/&gt; <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">refreshVerifyCode</span>(<span class="hljs-params"></span>)</span>&#123;    $(<span class="hljs-string">"#verifyCodeImg"</span>).attr(<span class="hljs-string">"src"</span>, <span class="hljs-string">"/miaosha/verifyCode?goodsId="</span>+$(<span class="hljs-string">"#goodsId"</span>).val()+<span class="hljs-string">"&amp;timestamp="</span>+<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime());&#125;</code></pre><h5 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h5><p><code>controller</code>层</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/verifyCode"</span>, method=RequestMethod.GET)<span class="hljs-meta">@ResponseBody</span><span class="hljs-function"><span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title">getMiaoshaVerifyCod</span><span class="hljs-params">(HttpServletResponse response,MiaoshaUser user,</span></span><span class="hljs-function"><span class="hljs-params">                                          @RequestParam(<span class="hljs-string">"goodsId"</span>)</span><span class="hljs-keyword">long</span> goodsId) </span>&#123;    <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">//验证用户</span>        <span class="hljs-keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);    &#125;    <span class="hljs-keyword">try</span> &#123;        BufferedImage image  = miaoshaService.createVerifyCode(user, goodsId);<span class="hljs-comment">//得到验证码</span>        OutputStream out = response.getOutputStream();<span class="hljs-comment">//输出验证码</span>        ImageIO.write(image, <span class="hljs-string">"JPEG"</span>, out);<span class="hljs-comment">//使用ImageIO，以JPEG的格式，把图片写入到输出流</span>        out.flush();<span class="hljs-comment">//刷新</span>        out.close();<span class="hljs-comment">//关闭</span>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;<span class="hljs-comment">//如果出了异常，就抛出秒杀失败异常</span>        e.printStackTrace();        <span class="hljs-keyword">return</span> Result.error(CodeMsg.MIAOSHA_FAIL);    &#125;&#125;</code></pre><p><code>service</code>层</p><p>思路：画一张图片，生成验证码后，把验证码画到图片上，然后把计算结果保存到redis中</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> BufferedImage <span class="hljs-title">createVerifyCode</span><span class="hljs-params">(MiaoshaUser user, <span class="hljs-keyword">long</span> goodsId)</span> </span>&#123;    <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span> || goodsId &lt;=<span class="hljs-number">0</span>) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125;    <span class="hljs-keyword">int</span> width = <span class="hljs-number">80</span>;<span class="hljs-comment">//定义图片宽度</span>    <span class="hljs-keyword">int</span> height = <span class="hljs-number">32</span>;<span class="hljs-comment">//图片高度</span>    <span class="hljs-comment">//create the image</span>    BufferedImage image = <span class="hljs-keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);<span class="hljs-comment">//创建BufferedImage对象，参数为宽度、高度、RGB</span>    Graphics g = image.getGraphics();<span class="hljs-comment">//获取这个图像，拿到这个图像后就可以在这个图像上写验证码了</span>    <span class="hljs-comment">// set the background color</span>    g.setColor(<span class="hljs-keyword">new</span> Color(<span class="hljs-number">0xDCDCDC</span>));<span class="hljs-comment">//设置背景颜色</span>    g.fillRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height);<span class="hljs-comment">//背景颜色填充</span>    <span class="hljs-comment">// draw the border</span>    g.setColor(Color.black);<span class="hljs-comment">//画笔为黑色</span>    g.drawRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width - <span class="hljs-number">1</span>, height - <span class="hljs-number">1</span>);<span class="hljs-comment">//用画笔画了一个黑色的矩形框</span>    <span class="hljs-comment">// create a random instance to generate the codes</span>    Random rdm = <span class="hljs-keyword">new</span> Random();    <span class="hljs-comment">// make some confusion</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++) &#123;<span class="hljs-comment">//在图片上生成50个干扰点</span>        <span class="hljs-keyword">int</span> x = rdm.nextInt(width);        <span class="hljs-keyword">int</span> y = rdm.nextInt(height);        g.drawOval(x, y, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);    &#125;    <span class="hljs-comment">//上面这些都是基本设置，下面才是生成验证码</span>    <span class="hljs-comment">// generate a random code</span>    String verifyCode = generateVerifyCode(rdm);<span class="hljs-comment">//生成验证码</span>    g.setColor(<span class="hljs-keyword">new</span> Color(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">0</span>));<span class="hljs-comment">//设置验证码颜色</span>    g.setFont(<span class="hljs-keyword">new</span> Font(<span class="hljs-string">"Candara"</span>, Font.BOLD, <span class="hljs-number">24</span>));<span class="hljs-comment">//设置字体</span>    g.drawString(verifyCode, <span class="hljs-number">8</span>, <span class="hljs-number">24</span>);<span class="hljs-comment">//把验证码写到图片上</span>    g.dispose();<span class="hljs-comment">//关闭画笔</span>    <span class="hljs-comment">//把验证码存到redis中</span>    <span class="hljs-keyword">int</span> rnd = calc(verifyCode);<span class="hljs-comment">//计算一下验证码</span>    redisService.set(MiaoshaKey.getMiaoshaVerifyCode, user.getId()+<span class="hljs-string">","</span>+goodsId, rnd);<span class="hljs-comment">//把计算结果存到redis中</span>    <span class="hljs-comment">//输出图片   </span>    <span class="hljs-keyword">return</span> image;&#125;</code></pre><p>生成验证码</p><p>随机生成三个十以内的数字，做加减乘。为了简化代码，不做除法，因为除法可能会除0。</p><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">char</span>[] ops = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[] &#123;<span class="hljs-string">'+'</span>, <span class="hljs-string">'-'</span>, <span class="hljs-string">'*'</span>&#125;;<span class="hljs-comment">/**</span><span class="hljs-comment">     * + - *</span><span class="hljs-comment">     * */</span><span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">generateVerifyCode</span><span class="hljs-params">(Random rdm)</span> </span>&#123;    <span class="hljs-keyword">int</span> num1 = rdm.nextInt(<span class="hljs-number">10</span>);<span class="hljs-comment">//数字</span>    <span class="hljs-keyword">int</span> num2 = rdm.nextInt(<span class="hljs-number">10</span>);    <span class="hljs-keyword">int</span> num3 = rdm.nextInt(<span class="hljs-number">10</span>);    <span class="hljs-keyword">char</span> op1 = ops[rdm.nextInt(<span class="hljs-number">3</span>)];<span class="hljs-comment">//运算符</span>    <span class="hljs-keyword">char</span> op2 = ops[rdm.nextInt(<span class="hljs-number">3</span>)];    String exp = <span class="hljs-string">""</span>+ num1 + op1 + num2 + op2 + num3;    <span class="hljs-keyword">return</span> exp;<span class="hljs-comment">//返回验证码</span>&#125;</code></pre><p>计算验证码结果：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(String exp)</span> </span>&#123;    <span class="hljs-keyword">try</span> &#123;        ScriptEngineManager manager = <span class="hljs-keyword">new</span> ScriptEngineManager();<span class="hljs-comment">//使用ScriptEngine计算验证码</span>        ScriptEngine engine = manager.getEngineByName(<span class="hljs-string">"JavaScript"</span>);<span class="hljs-comment">//使用JavaScript的V8引擎</span>        <span class="hljs-keyword">return</span> (Integer)engine.eval(exp);<span class="hljs-comment">//返回计算结果</span>    &#125;<span class="hljs-keyword">catch</span>(Exception e) &#123;        e.printStackTrace();        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;&#125;</code></pre><p>当用户输入验证码，点击立即秒杀按钮后，服务端需要做一个验证。也就是说秒杀之前，先要通过请求<code>path</code>方法，生成秒杀路径。所以我们需要在这里做<strong>验证码的校验</strong>。</p><pre><code class="hljs java"><span class="hljs-meta">@AccessLimit</span>(seconds=<span class="hljs-number">5</span>, maxCount=<span class="hljs-number">5</span>, needLogin=<span class="hljs-keyword">true</span>)<span class="hljs-meta">@RequestMapping</span>(value=<span class="hljs-string">"/path"</span>, method=RequestMethod.GET)<span class="hljs-meta">@ResponseBody</span><span class="hljs-function"><span class="hljs-keyword">public</span> Result&lt;String&gt; <span class="hljs-title">getMiaoshaPath</span><span class="hljs-params">(HttpServletRequest request, MiaoshaUser user,</span></span><span class="hljs-function"><span class="hljs-params">                                     @RequestParam(<span class="hljs-string">"goodsId"</span>)</span><span class="hljs-keyword">long</span> goodsId,</span><span class="hljs-function">                                     @<span class="hljs-title">RequestParam</span><span class="hljs-params">(value=<span class="hljs-string">"verifyCode"</span>, defaultValue=<span class="hljs-string">"0"</span>)</span><span class="hljs-keyword">int</span> verifyCode</span><span class="hljs-function">                                    ) </span>&#123;    <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>) &#123;        <span class="hljs-keyword">return</span> Result.error(CodeMsg.SESSION_ERROR);    &#125;    <span class="hljs-keyword">boolean</span> check = miaoshaService.checkVerifyCode(user, goodsId, verifyCode);<span class="hljs-comment">//输入用户、商品ID和用户输入的验证码，去redis中校验验证码</span>    <span class="hljs-keyword">if</span>(!check) &#123;<span class="hljs-comment">//如果校验失败</span>        <span class="hljs-keyword">return</span> Result.error(CodeMsg.REQUEST_ILLEGAL);<span class="hljs-comment">//就返回请求非法</span>    &#125;    String path  =miaoshaService.createMiaoshaPath(user, goodsId);    <span class="hljs-keyword">return</span> Result.success(path);&#125; <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">checkVerifyCode</span><span class="hljs-params">(MiaoshaUser user, <span class="hljs-keyword">long</span> goodsId, <span class="hljs-keyword">int</span> verifyCode)</span> </span>&#123;    <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span> || goodsId &lt;=<span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//参数验证</span>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;    <span class="hljs-comment">//从redis中取出来验证码</span>    Integer codeOld = redisService.get(MiaoshaKey.getMiaoshaVerifyCode, user.getId()+<span class="hljs-string">","</span>+goodsId, Integer<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    <span class="hljs-keyword">if</span>(codeOld == <span class="hljs-keyword">null</span> || codeOld - verifyCode != <span class="hljs-number">0</span> ) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;    <span class="hljs-comment">//从redis中删除这个验证码</span>    redisService.delete(MiaoshaKey.getMiaoshaVerifyCode, user.getId()+<span class="hljs-string">","</span>+goodsId);    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;&#125;</code></pre><h4 id="7-4-3-接口防刷限流"><a href="#7-4-3-接口防刷限流" class="headerlink" title="7.4.3 接口防刷限流"></a>7.4.3 接口防刷限流</h4><p>限制用户在一个接口在5秒钟内最多访问5次，超过5次就是非法的，禁止访问</p><p>思路：使用缓存，当用户访问接口时，把访问次数放到缓存中，同时给这个<strong>访问次数加一个有效期</strong>，如果在5秒钟内再次访问就加1，如果访问次数超过了5，就返回一个失败。到了下一个5秒钟，就清空访问次数。</p><p>使用拦截器，拦截器中拦截请求的次数。</p><p>使用注解实现：@AccessLimit</p><pre><code class="hljs java"><span class="hljs-meta">@Retention</span>(RUNTIME)<span class="hljs-meta">@Target</span>(METHOD)<span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AccessLimit &#123;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">seconds</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxCount</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">needLogin</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">true</span></span>;&#125;</code></pre><p>springboot定义拦截器。（拦截器首先执行，参数解析后执行）</p><pre><code class="hljs java"> <span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccessInterceptor</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title">HandlerInterceptorAdapter</span></span>&#123;     <span class="hljs-meta">@Autowired</span>    MiaoshaUserService userService;     <span class="hljs-meta">@Autowired</span>    RedisService redisService;    <span class="hljs-comment">//preHandle，方法执行前进行拦截，主要有两个功能：一个是设置访问次数、一个是判断页面是否登录后才可以查看</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span><span class="hljs-function">        <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">//HandlerMethod 是一个包含了handler的Bean本身和请求方法的对象！也就是说，所谓的handler在这里，是指包含了我们请求的Controller类和Method方法的对象</span>        <span class="hljs-keyword">if</span>(handler <span class="hljs-keyword">instanceof</span> HandlerMethod) &#123;<span class="hljs-comment">//instanceof 左边是对象，右边是类，所以判断handler是不是这个类的对象实例（子类、接口实现都算）</span>            MiaoshaUser user = getUser(request, response);<span class="hljs-comment">//取出用户</span>            UserContext.setUser(user);<span class="hljs-comment">//保存用户到ThreadLoacl，本地线程变量副本</span>            HandlerMethod hm = (HandlerMethod)handler;<span class="hljs-comment">//</span>            AccessLimit accessLimit = hm.getMethodAnnotation(AccessLimit<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<span class="hljs-comment">//拿到方法上的注解</span>            <span class="hljs-keyword">if</span>(accessLimit == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">//如果没有注解，说明我们没有使用这么注解</span>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;            &#125;            <span class="hljs-keyword">int</span> seconds = accessLimit.seconds();<span class="hljs-comment">//获得秒</span>            <span class="hljs-keyword">int</span> maxCount = accessLimit.maxCount();<span class="hljs-comment">//获得次数</span>            <span class="hljs-keyword">boolean</span> needLogin = accessLimit.needLogin();<span class="hljs-comment">//判断是否登录</span>            String key = request.getRequestURI();<span class="hljs-comment">//获得用户key，默认是路径</span>            <span class="hljs-keyword">if</span>(needLogin) &#123;<span class="hljs-comment">//判断这个方法是否需要登录，如果需要登录</span>                <span class="hljs-keyword">if</span>(user == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">//如果用户为空</span>                    render(response, CodeMsg.SESSION_ERROR);<span class="hljs-comment">//给客户端一个提示</span>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<span class="hljs-comment">//返回失败</span>                &#125;                key += <span class="hljs-string">"_"</span> + user.getId();<span class="hljs-comment">//如果需要登录，那么再添加一个_和用户ID</span>            &#125;<span class="hljs-keyword">else</span> &#123;                <span class="hljs-comment">//do nothing</span>            &#125;            <span class="hljs-comment">//处理访问次数和时间</span>            AccessKey ak = AccessKey.withExpire(seconds);<span class="hljs-comment">//设置Key的有效期</span>            Integer count = redisService.get(ak, key, Integer<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<span class="hljs-comment">//先从缓存根据key取出来访问次数</span>            <span class="hljs-keyword">if</span>(count  == <span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">//如果用户访问次数为空，说明在某个时间段内，是第一次访问</span>                redisService.set(ak, key, <span class="hljs-number">1</span>);            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(count &lt; maxCount) &#123;<span class="hljs-comment">//访问次数小于最大次数（指定时间内）</span>                redisService.incr(ak, key);<span class="hljs-comment">//那么就增加一次</span>            &#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//如果大于最大次数，输出一个错误信息给客户端</span>                render(response, CodeMsg.ACCESS_LIMIT_REACHED);                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;    &#125;    <span class="hljs-comment">//返回给客户端一个提示信息</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">render</span><span class="hljs-params">(HttpServletResponse response, CodeMsg cm)</span><span class="hljs-keyword">throws</span> Exception </span>&#123;        response.setContentType(<span class="hljs-string">"application/json;charset=UTF-8"</span>);        OutputStream out = response.getOutputStream();<span class="hljs-comment">//获得响应的输出流</span>        String str  = JSON.toJSONString(Result.error(cm));<span class="hljs-comment">//转车JSON</span>        out.write(str.getBytes(<span class="hljs-string">"UTF-8"</span>));<span class="hljs-comment">//按照UTF的格式写出</span>        out.flush();        out.close();    &#125;     <span class="hljs-function"><span class="hljs-keyword">private</span> MiaoshaUser <span class="hljs-title">getUser</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;        String paramToken = request.getParameter(MiaoshaUserService.COOKI_NAME_TOKEN);        String cookieToken = getCookieValue(request, MiaoshaUserService.COOKI_NAME_TOKEN);        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(cookieToken) &amp;&amp; StringUtils.isEmpty(paramToken)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        String token = StringUtils.isEmpty(paramToken)?cookieToken:paramToken;        <span class="hljs-keyword">return</span> userService.getByToken(response, token);    &#125;     <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getCookieValue</span><span class="hljs-params">(HttpServletRequest request, String cookiName)</span> </span>&#123;        Cookie[]  cookies = request.getCookies();        <span class="hljs-keyword">if</span>(cookies == <span class="hljs-keyword">null</span> || cookies.length &lt;= <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        &#125;        <span class="hljs-keyword">for</span>(Cookie cookie : cookies) &#123;            <span class="hljs-keyword">if</span>(cookie.getName().equals(cookiName)) &#123;                <span class="hljs-keyword">return</span> cookie.getValue();            &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;    &#125; &#125;</code></pre><p>注册拦截器</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebConfig</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurerAdapter</span></span>&#123;     <span class="hljs-meta">@Autowired</span>    UserArgumentResolver userArgumentResolver;    <span class="hljs-comment">//注册</span>    <span class="hljs-meta">@Autowired</span>    AccessInterceptor accessInterceptor;     <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addArgumentResolvers</span><span class="hljs-params">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> </span>&#123;        argumentResolvers.add(userArgumentResolver);    &#125;    <span class="hljs-comment">//把拦截器注册到WebConfig</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> </span>&#123;        registry.addInterceptor(accessInterceptor);    &#125; &#125;</code></pre><h4 id="7-5-前端优化"><a href="#7-5-前端优化" class="headerlink" title="7.5 前端优化"></a>7.5 前端优化</h4><p>不到时间，秒杀按钮不可以点击，都是灰色的。但是HTTP是以明文传输的，这种只能防普通人，真有人想看地址，还是可以看到的。这种只防君子，不防小人，真正的<strong>安全性判断</strong>，还是应该放在服务端</p><h2 id="8-压测对比"><a href="#8-压测对比" class="headerlink" title="8 压测对比"></a>8 压测对比</h2><h3 id="8-1-优化前压测"><a href="#8-1-优化前压测" class="headerlink" title="8.1 优化前压测"></a>8.1 优化前压测</h3><p>项目一有压测结果，吞吐量在1000左右</p><h3 id="8-2-优化后压测"><a href="#8-2-优化后压测" class="headerlink" title="8.2 优化后压测"></a>8.2 优化后压测</h3><p>压测结果：稳定在6000，最高到达7000+</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200718163016.png" srcset="/img/loading.gif" alt="image-20200718163014038"></p><p> <img src="https://gitee.com/monkey_stu/image/raw/master/img/20200718163207.png" srcset="/img/loading.gif" alt="image-20200718163204726"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1：服务器QPS一直上不去：本地QPS可以达到1500+，服务器只有几十。怀疑是服务器带宽太小。看了一下，的确如此</p><blockquote><p><a href="https://blog.csdn.net/mian_CSDN/article/details/78995304?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" target="_blank" rel="noopener">https://blog.csdn.net/mian_CSDN/article/details/78995304?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase</a></p></blockquote><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200625214043.png" srcset="/img/loading.gif" alt="image-20200625214040437"></p><p>2：运行jar包时，一直报错，删了tomcat的embed文件夹看看</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200626093106.png" srcset="/img/loading.gif" alt="image-20200626093102146"></p><p>解决方案：端口被占用了，关闭这个进程</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200626093804.png" srcset="/img/loading.gif" alt="image-20200626093800898"></p><p><a href="https://jingyan.baidu.com/article/a17d5285d1b03c8099c8f26a.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/a17d5285d1b03c8099c8f26a.html</a></p><p>3：为什么使用谷歌和火狐浏览器访问地址，会出现不一样的响应结果：</p><p>其中火狐出现的页面时正常页面，谷歌这个页面很奇怪啊。。。每次都会提示不同的错误</p><p>谷歌：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200626162931.png" srcset="/img/loading.gif" alt="image-20200626162928457"></p><p>火狐：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200626162704.png" srcset="/img/loading.gif" alt="image-20200626162701665"></p><p>解决方案：清除谷歌浏览器的缓存就OK了</p><p>3：为啥我的压测，数据库里面的数据没有变过？</p><p>第一次怀疑可能是因为我的token没有放到redis中</p><p><a href="https://blog.csdn.net/Serena0814/article/details/89648174" target="_blank" rel="noopener">https://blog.csdn.net/Serena0814/article/details/89648174</a></p><p>解决方案：很奇怪，我把请求方式从POST改成GET，再从GET改成POST，就可以了，下面是秒杀结果图结果。但是我把数据库中数据恢复到原来值时，发现秒杀再次失败，数据库中的值没有任何改动</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200626205851.png" srcset="/img/loading.gif" alt="image-20200626205846234"></p><p>3.1 为什么我一运行SpringBoot，他就会自动给我生成秒杀订单？而且是自己生成用户。IDEA报错是，有重复的键插入。</p><p>答案：这个错误是说明，有多个用户正在重复秒杀，所以报错，也就是说代码没有问题</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200626211821.png" srcset="/img/loading.gif" alt="image-20200626211818083"></p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200626212118.png" srcset="/img/loading.gif" alt="image-20200626212115541"></p><p>4：为啥我启动miaosha_6这个包，数据库就会自动生成对应的秒杀用户和订单，我还没有开始秒杀啊！</p><p>再次运行，就会报错，提示我数据库中已经有相同的数据，不可以再次插入相同数据，问题是我只是启动了springboot啊，还没有开始插入数据，这数据从哪里来的？</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200626204447.png" srcset="/img/loading.gif" alt="image-20200626204444103"></p><p>解决方案：这个包问题，重新解压这个包，用新的代码跑</p><p>5：为什么我每次运行IDEA，压测时看不到消息队列的接受信息，只能看到发送信息，再次启动时，才可以看到接受信息？</p><p>第一次启动，压测时只有发送信息：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200627092425.png" srcset="/img/loading.gif" alt="image-20200627092422400"></p><p>再次启动才有接受信息：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200627092447.png" srcset="/img/loading.gif" alt=""></p><p>5：使用miaosha_5跑压测，一切正常，使用6，各种报错，问题见6</p><p>6：加入redis后，明明已经有了库存判断，但是redis还是会为负数，而且修改后的商品数量也不会写到数据库中，为什么？</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200627092646.png" srcset="/img/loading.gif" alt="image-20200627092643358"></p><p>7：解决方案：</p><p>修改消息队列的消费者大小：把下面两个参数调大以后，上面的问题，基本不会出现。<strong>但是Redis里面的库存还是为负数，虽然数据库里面的值都大于0</strong></p><pre><code class="hljs properties"><span class="hljs-meta">spring.rabbitmq.listener.simple.concurrency</span>= <span class="hljs-string">100</span><span class="hljs-meta">spring.rabbitmq.listener.simple.max-concurrency</span>= <span class="hljs-string">100</span></code></pre><p>结果：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200627095032.png" srcset="/img/loading.gif" alt="image-20200627095027768"></p><p>8：浏览器不同，导致的结果不同：</p><p>解决方案：清空谷歌浏览器缓存即可</p><p>谷歌：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200627130027.png" srcset="/img/loading.gif" alt=""></p><p>火狐：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200627130042.png" srcset="/img/loading.gif" alt="image-20200627130038404"></p><p>9：总结经验：</p><p>清空redis缓存、浏览器缓存、消息队列、重新运行，这四步可以解决80%的问题</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre><code class="hljs xml">#thymeleafspring.thymeleaf.prefix=classpath:/templates/spring.thymeleaf.suffix=.htmlspring.thymeleaf.cache=falsespring.thymeleaf.content-type=text/htmlspring.thymeleaf.enabled=truespring.thymeleaf.encoding=UTF-8spring.thymeleaf.mode=HTML5#是否开启缓存pageCache.enbale=true   #打印mybatis sqllog4j.logger.com.ibatis=DEBUGlog4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUGlog4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUGlog4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUGlog4j.logger.Java.sql.Connection=DEBUGlog4j.logger.java.sql.Statement=DEBUGlog4j.logger.java.sql.PreparedStatement=DEBUG #mybatismybatis.type-aliases-package=com.geekq.miaosha.domain#开启驼峰转换 configuration config-location 不能同時存在 如果要走流程 请 放开注释mybatis.configuration.map-underscore-to-camel-case=true#mybatis.mapperLocations = classpath:com/geekq/miaosha/dao/*.xml mybatis.mapperLocations=classpath:mybatis/mapper/*.xml#配置xml方式 因为与 mybatis.configuration.map-underscore-to-camel-case 仅用于测试#mybatis.config-location=classpath:mybatis/mybatis-config.xml #add mybatismybatis.#datasourcespring.datasource.url=jdbc:mysql://localhost:3306/miaosha?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true&amp;useSSL=falsespring.datasource.username=rootspring.datasource.password=rootspring.datasource.driver-class-name=com.mysql.jdbc.Driver#druidspring.datasource.type=com.alibaba.druid.pool.DruidDataSourcespring.datasource.filters=statspring.datasource.maxActive=100spring.datasource.initialSize=100spring.datasource.maxWait=600spring.datasource.minIdle=50spring.datasource.timeBetweenEvictionRunsMillis=60000spring.datasource.minEvictableIdleTimeMillis=300000spring.datasource.validationQuery=select 'x'spring.datasource.testWhileIdle=truespring.datasource.testOnBorrow=falsespring.datasource.testOnReturn=falsespring.datasource.poolPreparedStatements=truespring.datasource.maxOpenPreparedStatements=20#static,spring对静态资源的处理spring.resources.add-mappings=truespring.resources.cache-period= 3600spring.resources.chain.cache=truespring.resources.chain.enabled=truespring.resources.chain.gzipped=truespring.resources.chain.html-application-cache=truespring.resources.static-locations=classpath:/static/#redis#redis.host=127.0.0.1redis.host=39.100.103.243redis.port=6379redis.timeout=100redis.password=123456redis.poolMaxTotal=1000redis.poolMaxIdle=500redis.poolMaxWait=500#server.port=8003 #rabbitmqspring.rabbitmq.host=127.0.0.1spring.rabbitmq.port=5672spring.rabbitmq.username=guestspring.rabbitmq.password=guestspring.rabbitmq.virtual-host=/spring.rabbitmq.listener.simple.concurrency= 100spring.rabbitmq.listener.simple.max-concurrency= 100spring.rabbitmq.listener.simple.prefetch= 1spring.rabbitmq.listener.simple.auto-startup=truespring.rabbitmq.listener.simple.default-requeue-rejected= truespring.rabbitmq.template.retry.enabled=truespring.rabbitmq.template.retry.initial-interval=1000spring.rabbitmq.template.retry.max-attempts=3spring.rabbitmq.template.retry.max-interval=10000spring.rabbitmq.template.retry.multiplier=1.0spring.rabbitmq.publisher-confirms=truespring.rabbitmq.listener.direct.acknowledge-mode=manualspring.rabbitmq.listener.simple.acknowledge-mode=manual ## maven隔离#spring.profiles.active=dev</code></pre>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
      <category>秒杀</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云服务器搭建</title>
    <link href="/2020/06/19/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/06/19/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="阿里云服务器搭建"><a href="#阿里云服务器搭建" class="headerlink" title="阿里云服务器搭建"></a>阿里云服务器搭建</h1><h2 id="购买"><a href="#购买" class="headerlink" title="购买"></a>购买</h2><p>阿里云因为疫情推出了一个阿里云高校学生计划，学生党可以白嫖一个六个月的阿里云服务器</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200619080813.png" srcset="/img/loading.gif" alt="image-20200619080806048"></p><p>购买好服务器之后，进行服务器的搭建</p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>首先配置自己的安全组策略：添加常用端口，如3306,6379,443,80等，然后修改自己的实例名称：</p><p>进入控制台，选择左侧的安全组</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200619091307.png" srcset="/img/loading.gif" alt=""></p><p>点击界面右侧的配置规则</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200619090425.png" srcset="/img/loading.gif" alt="image-20200619090420490"></p><p>选择手动添加，添加常用端口</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200619090251.png" srcset="/img/loading.gif" alt="image-20200619090241653"></p><pre><code class="hljs bash"><span class="hljs-comment">#查看自己的实例名称</span>hostname<span class="hljs-comment">#修改名称为XX</span>hostnamectl <span class="hljs-built_in">set</span>-hostname XX</code></pre><p>重启服务器，修改名称成功</p><p>查看服务器公网IP地址，使用Xshell连接服务器，输入公网IP地址。</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200619090517.png" srcset="/img/loading.gif" alt="image-20200619090513223"></p><p>输入密码后，看到welcome to Alibaba，代表成功进入服务器界面：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200619091807.png" srcset="/img/loading.gif" alt=""></p><p>如果需要将本地文件传到服务器，建议安装一个Xftp。直接拖动即可安装</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200619091959.png" srcset="/img/loading.gif" alt="image-20200619091955787"></p><h2 id="一切皆文件"><a href="#一切皆文件" class="headerlink" title="一切皆文件"></a>一切皆文件</h2><p>linux系统下一切皆文件，所有文件都挂在在节点根目录/下</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200619094100.png" srcset="/img/loading.gif" alt="image-20200619094057537"></p><p>目录解释：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200619094617.png" srcset="/img/loading.gif" alt=""></p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200619094642.png" srcset="/img/loading.gif" alt="image-20200619094638755"></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre><code class="hljs bash">getconf LONG_BIT <span class="hljs-comment">#查看自己的linux是多少位</span>synch <span class="hljs-comment">#同步数据，linux没有报错，就是成功！！！</span>shutdown <span class="hljs-comment">#关机</span>reboot <span class="hljs-comment">#重启</span>ls <span class="hljs-comment">#查看当前目录下文件</span><span class="hljs-built_in">pwd</span> <span class="hljs-comment">#显示当前用户所在的目录</span>mkdir <span class="hljs-comment">#创建目录 -p递归创建文件夹</span>cp <span class="hljs-built_in">source</span> distin <span class="hljs-comment">#拷贝文件，从原位置到目的位置</span>rm <span class="hljs-comment">#移出目录 -f强制删除  -r递归删除目录  rm -rf /删除系统中所有文件</span>mv <span class="hljs-comment">#移动文件夹或者重命名文件  </span>ls -ll<span class="hljs-comment">#查看权限， r-4 w-2 x-1:777表示所有用户可读可写可执行   owner/group/other三者权限</span><span class="hljs-comment">#文件命令</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>服务器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis</title>
    <link href="/2020/06/15/Mybatis/"/>
    <url>/2020/06/15/Mybatis/</url>
    
    <content type="html"><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><p>Mybatis是一款持久层框架。持久层负责数据的持久化，即把数据从内存中写入到数据库中。Mybatis简化了传统的JDBC代码，帮助程序员把数据写入到数据库中。</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>导入maven依赖</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre><p>核心配置文件—-目的是连接数据库</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><span class="hljs-meta">  <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><span class="hljs-meta">  <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">"development"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"development"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"JDBC"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"POOLED"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driver"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.mysql.jdbc.Driver"</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="hljs-symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai"</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span>/&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"org/mybatis/example/BlogMapper.xml"</span>/&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p>编写mybatis工具类</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.guo.utils;<span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-comment">//SqlSessionFactory</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisUtils</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">//获取SqlSessionFactory对象</span>            String resource=<span class="hljs-string">"mybatis-config.xml"</span>;            InputStream inputStream = <span class="hljs-keyword">null</span>;            inputStream = Resources.getResourceAsStream(resource);            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getsqlSession</span><span class="hljs-params">()</span></span>&#123;        SqlSession sqlSession=sqlSessionFactory.openSession();        <span class="hljs-keyword">return</span> sqlSession;    &#125;&#125;</code></pre><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><p>编写实体类pojo</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String pwd;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">User</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, String name, String pwd)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;        <span class="hljs-keyword">this</span>.name = name;        <span class="hljs-keyword">this</span>.pwd = pwd;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPwd</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> pwd;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPwd</span><span class="hljs-params">(String pwd)</span> </span>&#123;        <span class="hljs-keyword">this</span>.pwd = pwd;    &#125;&#125;</code></pre><p>编写dao接口</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.guo.pojo.User;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDao</span> </span>&#123;    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;&#125;</code></pre><p>用Mapper.xml配置接口实现类</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><span class="hljs-meta">        <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><span class="hljs-comment">&lt;!--namespace绑定一个对应的dao/mapper接口--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.guo.dao.UserDao"</span>&gt;</span><span class="hljs-comment">&lt;!--    查询语句，id对应方法名字,resultType：返回结果--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getUserList"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.guo.pojo.User"</span>&gt;</span>    select * from mybatis.user  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><p>测试代码</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;    SqlSession sqlSession = MyBatisUtils.getsqlSession();    UserDao mapper = sqlSession.getMapper(UserDao<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    List&lt;User&gt; userList = mapper.getUserList();    <span class="hljs-keyword">for</span> (User user : userList) &#123;        System.out.println(user);    &#125;    sqlSession.close();&#125;</code></pre><p>Mybatis核心接口</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200615204833.png" srcset="/img/loading.gif" alt=""></p><h3 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h3><p>配置文件 </p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><span class="hljs-meta">        <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><span class="hljs-comment">&lt;!--namespace绑定一个对应的dao/mapper接口--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.guo.dao.UserMapper"</span>&gt;</span><span class="hljs-comment">&lt;!--    查询语句，id对应方法名字,resultType：返回结果--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getUserList"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.guo.pojo.User"</span>&gt;</span>    select * from mybatis.user  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-comment">&lt;!--    根据id查询用户，parameterType：参数类型--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getUserById"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.guo.pojo.User"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"int"</span>&gt;</span>    select * from mybatis.user where id=#&#123;id&#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"insertUser"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.guo.pojo.User"</span>&gt;</span>    insert into mybatis.user (id,name,pwd) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"updateUser"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"com.guo.pojo.User"</span>&gt;</span>        update mybatis.user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125;   where id=#&#123;id&#125;;    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"deleteUser"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"int"</span>&gt;</span>        delete from mybatis.user where id=#&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><p>查询所有用户</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;    SqlSession sqlSession = MyBatisUtils.getsqlSession();    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    List&lt;User&gt; userList = mapper.getUserList();    <span class="hljs-keyword">for</span> (User user : userList) &#123;        System.out.println(user);    &#125;    sqlSession.close();&#125;</code></pre><p>根据id查询用户</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserById</span><span class="hljs-params">()</span></span>&#123;    SqlSession sqlSession = MyBatisUtils.getsqlSession();    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    User userById = mapper.getUserById(<span class="hljs-number">3</span>);    System.out.println(userById);    sqlSession.close();&#125;</code></pre><p>增加一个用户</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertUser</span><span class="hljs-params">()</span></span>&#123;    SqlSession sqlSession = MyBatisUtils.getsqlSession();<span class="hljs-comment">//获取执行sql的对象</span>    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    User user=<span class="hljs-keyword">new</span> User(<span class="hljs-number">5</span>,<span class="hljs-string">"z5"</span>,<span class="hljs-string">"123"</span>);    <span class="hljs-keyword">int</span> i = mapper.insertUser(user);    System.out.println(i);    List&lt;User&gt; userList = mapper.getUserList();    <span class="hljs-keyword">for</span> (User user1 : userList) &#123;        System.out.println(user1);    &#125;    sqlSession.commit();<span class="hljs-comment">//增删改需要提交事务</span>    sqlSession.close();&#125;</code></pre><p>更新一个用户</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateUser</span><span class="hljs-params">()</span></span>&#123;    SqlSession sqlSession = MyBatisUtils.getsqlSession();    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    <span class="hljs-keyword">int</span> w6 = mapper.updateUser(<span class="hljs-keyword">new</span> User(<span class="hljs-number">4</span>, <span class="hljs-string">"w6"</span>, <span class="hljs-string">"123"</span>));    System.out.println(w6);    sqlSession.commit();    sqlSession.close();&#125;&#125;</code></pre><p>删除一个用户</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">()</span></span>&#123;    SqlSession sqlSession = MyBatisUtils.getsqlSession();    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    <span class="hljs-keyword">int</span> i = mapper.deleteUser(<span class="hljs-number">4</span>);    System.out.println(i);    sqlSession.commit();    sqlSession.close();&#125;</code></pre><h3 id="万能Map"><a href="#万能Map" class="headerlink" title="万能Map"></a>万能Map</h3><p>结社，实体类或者数据库中表的字段或者参数过多，就应当考虑使用map</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--使用map以后，可以只写需要变更了字段--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"insertUser2"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"map"</span>&gt;</span>    insert into mybatis.user (id,pwd) values(#&#123;id&#125;,#&#123;pwd&#125;);<span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span></code></pre><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertUser2</span><span class="hljs-params">()</span></span>&#123;    SqlSession sqlSession = MyBatisUtils.getsqlSession();<span class="hljs-comment">//获取执行sql的对象</span>    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    Map&lt;String,Object&gt; map=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">"id"</span>,<span class="hljs-number">60</span>);    map.put(<span class="hljs-string">"pwd"</span>,<span class="hljs-string">"123"</span>);    mapper.insertUser2(map);    sqlSession.commit();<span class="hljs-comment">//增删改需要提交事务</span>    sqlSession.close();&#125;<span class="hljs-comment">//接口定义</span><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertUser2</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>;</code></pre><h2 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h2><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200615215337.png" srcset="/img/loading.gif" alt="image-20200615215332987"></p><p>注意：配置文件的熟悉也有严格规范</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200615215657.png" srcset="/img/loading.gif" alt="image-20200615215653270"></p><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。</p><pre><code class="hljs properties"><span class="hljs-meta">&lt;?xml</span> <span class="hljs-string">version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE</span> <span class="hljs-string">configuration</span>        <span class="hljs-attr">PUBLIC</span> <span class="hljs-string">"-//mybatis.org//DTD Config 3.0//EN"</span>        <span class="hljs-meta">"http</span>:<span class="hljs-string">//mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span><span class="hljs-attr">&lt;configuration&gt;</span><span class="hljs-meta">&lt;!--</span>    <span class="hljs-string">引入外部配置文件--&gt;</span>    <span class="hljs-meta">&lt;properties</span> <span class="hljs-string">resource="db.properties"&gt;&lt;/properties&gt;</span>    <span class="hljs-meta">&lt;environments</span> <span class="hljs-string">default="development"&gt;</span>        <span class="hljs-meta">&lt;environment</span> <span class="hljs-string">id="development"&gt;</span>            <span class="hljs-meta">&lt;transactionManager</span> <span class="hljs-string">type="JDBC"/&gt;</span>            <span class="hljs-meta">&lt;dataSource</span> <span class="hljs-string">type="POOLED"&gt;</span>                <span class="hljs-meta">&lt;property</span> <span class="hljs-string">name="driver" value="$&#123;driver&#125;"/&gt;</span>                <span class="hljs-meta">&lt;property</span> <span class="hljs-string">name="url" value="$&#123;url&#125;"/&gt;</span>                <span class="hljs-meta">&lt;property</span> <span class="hljs-string">name="username" value="$&#123;username&#125;"/&gt;</span>                <span class="hljs-meta">&lt;property</span> <span class="hljs-string">name="password" value="$&#123;password&#125;"/&gt;</span>            <span class="hljs-attr">&lt;/dataSource&gt;</span>        <span class="hljs-attr">&lt;/environment&gt;</span>    <span class="hljs-attr">&lt;/environments&gt;</span>    <span class="hljs-attr">&lt;mappers&gt;</span>        <span class="hljs-meta">&lt;mapper</span> <span class="hljs-string">resource="com/guo/dao/UserMapper.xml"/&gt;</span>    <span class="hljs-attr">&lt;/mappers&gt;</span><span class="hljs-attr">&lt;/configuration&gt;</span></code></pre><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=Asia/Shanghai</span><span class="hljs-attr">username</span>=<span class="hljs-string">root</span><span class="hljs-attr">password</span>=<span class="hljs-string">root</span></code></pre><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200615220918.png" srcset="/img/loading.gif" alt="image-20200615220914552"></p><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><pre><code class="hljs properties"><span class="hljs-attr">&lt;!--为指定的类起别名--&gt;</span><span class="hljs-attr">&lt;typeAliases&gt;</span><span class="hljs-meta">&lt;typeAlias</span> <span class="hljs-string">type="com.guo.pojo.User" alias="user"/&gt;</span><span class="hljs-attr">&lt;/typeAliases&gt;</span></code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getUserById"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"User"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"int"</span>&gt;</span>    select * from mybatis.user where id=#&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><p>也可以为一个包下的类起一个别名，默认使用Bean首字母小写的非限定类名作为别名。如果有注解@Alias(“XX”)，别名为注解XX</p><pre><code class="hljs properties"><span class="hljs-attr">&lt;typeAliases&gt;</span><span class="hljs-meta">&lt;package</span> <span class="hljs-string">name="com.guo.pojo"/&gt;</span><span class="hljs-attr">&lt;/typeAliases&gt;</span></code></pre><h3 id="映射器"><a href="#映射器" class="headerlink" title="映射器"></a>映射器</h3><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200615221732.png" srcset="/img/loading.gif" alt=""></p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>SqlSessionFactoryBuilder</p><blockquote><p>一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）</p></blockquote><p>SqlSessionFactory</p><blockquote><p>类似于数据库的连接池</p><p>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏习惯”。因此 SqlSessionFactory 的最佳作用域是应用作用域。 有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。</p></blockquote><p>SqlSession</p><blockquote><p>每一个SqlSession可以连接多个Mapper</p><p>每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域</p><p>用完之后，立刻关闭</p></blockquote><h3 id="结果集映射"><a href="#结果集映射" class="headerlink" title="结果集映射"></a>结果集映射</h3><p>结果集映射解决的问题是属性名和字段名不一致</p><blockquote><p>实体类：id name password</p><p>数据库：id name pwd</p></blockquote><p>查询结果：User{id=3, name=’z3’, password=’null’}</p><p>解决方法：<strong>resultMap</strong>—-&gt;结果集映射</p><blockquote><p><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。它可以让你从 90% 的 JDBC <code>ResultSets</code> 数据提取代码中解放出来，并在一些情形下允许你进行一些 JDBC 不支持的操作。实际上，在为一些比如连接的复杂语句编写映射代码的时候，一份 <code>resultMap</code> 能够代替实现同等功能的数千行代码。ResultMap 的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</p></blockquote><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userMap"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"User"</span>&gt;</span><span class="hljs-comment">&lt;!--   column是数据库中的字段，  property是实体类中的属性  type是要映射的对象 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"pwd"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"password"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-comment">&lt;!--    根据id查询用户，parameterType：参数类型--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getUserById"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"userMap"</span> &gt;</span>select * from mybatis.user where id=#&#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-comment">&lt;!--   查询结果：User&#123;id=3, name='z3', password='123'&#125; --&gt;</span></code></pre><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>logImpl 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。 日志实现：</p><blockquote><p>SLF4J | <strong>LOG4J</strong> | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | <strong>STDOUT_LOGGING</strong> | NO_LOGGING</p></blockquote><h3 id="STDOUT-LOGGING"><a href="#STDOUT-LOGGING" class="headerlink" title="STDOUT_LOGGING"></a><strong>STDOUT_LOGGING</strong></h3><p>使用<strong>STDOUT_LOGGING</strong> —-&gt;标准日志工厂实现</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"logImpl"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"STDOUT_LOGGING"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span></code></pre><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200616091203.png" srcset="/img/loading.gif" alt="image-20200616091158941"></p><h3 id="LOG4J"><a href="#LOG4J" class="headerlink" title="LOG4J"></a><strong>LOG4J</strong></h3><p>使用<strong>LOG4J</strong> 需要先导包</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>log4j配置文件</p><pre><code class="hljs properties"><span class="hljs-comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">DEBUG,console,file</span><span class="hljs-comment">#控制台输出的相关设置</span><span class="hljs-meta">log4j.appender.console</span> = <span class="hljs-string">org.apache.log4j.ConsoleAppender</span><span class="hljs-meta">log4j.appender.console.Target</span> = <span class="hljs-string">System.out</span><span class="hljs-meta">log4j.appender.console.Threshold</span>=<span class="hljs-string">DEBUG</span><span class="hljs-meta">log4j.appender.console.layout</span> = <span class="hljs-string">org.apache.log4j.PatternLayout</span><span class="hljs-meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">[%c]-%m%n</span><span class="hljs-comment">#文件输出的相关设置</span><span class="hljs-meta">log4j.appender.file</span> = <span class="hljs-string">org.apache.log4j.RollingFileAppender</span><span class="hljs-meta">log4j.appender.file.File</span>=<span class="hljs-string">./log/guo.log</span><span class="hljs-meta">log4j.appender.file.MaxFileSize</span>=<span class="hljs-string">10mb</span><span class="hljs-meta">log4j.appender.file.Threshold</span>=<span class="hljs-string">DEBUG</span><span class="hljs-meta">log4j.appender.file.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><span class="hljs-meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="hljs-string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><span class="hljs-comment">#日志输出级别</span><span class="hljs-meta">log4j.logger.org.mybatis</span>=<span class="hljs-string">DEBUG</span><span class="hljs-meta">log4j.logger.java.sql</span>=<span class="hljs-string">DEBUG</span><span class="hljs-meta">log4j.logger.java.sql.Statement</span>=<span class="hljs-string">DEBUG</span><span class="hljs-meta">log4j.logger.java.sql.ResultSet</span>=<span class="hljs-string">DEBUG</span><span class="hljs-meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="hljs-string">DEBUG</span></code></pre><p>配置log4j为日志实现</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"logImpl"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"LOG4J"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span></code></pre><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200616092307.png" srcset="/img/loading.gif" alt="image-20200616092303514"></p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200616092357.png" srcset="/img/loading.gif" alt="image-20200616092352946"></p><p>使用步骤</p><pre><code class="hljs java"><span class="hljs-keyword">static</span> Logger logger=Logger.getLogger(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testLog4j</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    logger.info(<span class="hljs-string">"info:进入log4j方法"</span>);<span class="hljs-comment">//日志级别</span>    logger.debug(<span class="hljs-string">"debug:进入log4j方法"</span>);    logger.error(<span class="hljs-string">"error:进入log4j方法"</span>);&#125;</code></pre><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>分页目的是减少数据处理量</p><p>sql分页：</p><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">2</span> <span class="hljs-comment"># 从第一个开始查找，长度为2</span></code></pre><p>使用mybatis：接口、mapper.xml、测试</p><pre><code class="hljs java"><span class="hljs-comment">//接口</span>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserByLimit</span><span class="hljs-params">(Map&lt;String,Integer&gt; map)</span></span>;</code></pre><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"userMap"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"User"</span>&gt;</span>    <span class="hljs-comment">&lt;!--   column是数据库中的字段，  property是实体类中的属性   --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"pwd"</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"password"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getUserByLimit"</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">"map"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"userMap"</span>&gt;</span>    select * from mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></code></pre><p>测试</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getUserByLimit</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    SqlSession sqlSession = MyBatisUtils.getsqlSession();    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;<span class="hljs-comment">//mapper相当于一个接口，有了这个接口就可以调用接口中的方法</span>    HashMap&lt;String,Integer&gt; map=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();    map.put(<span class="hljs-string">"startIndex"</span>,<span class="hljs-number">0</span>);    map.put(<span class="hljs-string">"pageSize"</span>,<span class="hljs-number">2</span>);    List&lt;User&gt; userByLimit = mapper.getUserByLimit(map);    <span class="hljs-keyword">for</span> (User user : userByLimit) &#123;        System.out.println(user);    &#125;    sqlSession.close();&#125;</code></pre><h2 id="使用注解开发CRUD"><a href="#使用注解开发CRUD" class="headerlink" title="使用注解开发CRUD"></a>使用注解开发CRUD</h2><p>面向接口编程：目的是<strong>解耦</strong>，上层需用管具体的实现，大家都遵守共同的标准。</p><p>需用在mybatis-config.xml中绑定接口</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.guo.dao.UserMapper"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></code></pre><p>简单的可以用注解，复杂的注解就力不从心了。</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;    <span class="hljs-meta">@Select</span>(<span class="hljs-string">"select * from user"</span>)    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;     <span class="hljs-comment">//方法中有多个参数时，参数前需要加@Param注解，引用类型不需要加@Param注解</span>    <span class="hljs-meta">@Select</span>(<span class="hljs-string">"select * from user where id=#&#123;id&#125;"</span>)    <span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(@Param(<span class="hljs-string">"id"</span>)</span> <span class="hljs-keyword">int</span> id)</span>;    <span class="hljs-meta">@Insert</span>(<span class="hljs-string">"insert into user(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)"</span>)    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertUser</span><span class="hljs-params">(User user)</span></span>;    <span class="hljs-meta">@Update</span>(<span class="hljs-string">"update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id=#&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;    <span class="hljs-meta">@Delete</span>(<span class="hljs-string">"delete from user where id=#&#123;id&#125;"</span>)    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> user)</span></span>;&#125;</code></pre><h2 id="mybatis执行流程"><a href="#mybatis执行流程" class="headerlink" title="mybatis执行流程"></a>mybatis执行流程</h2><p>1：通过resources配置文件获取全局配置文件</p><p>2：实例化构造器：SqlSessionFactoryBuilder</p><p>3：解析配置文件流</p><p>4：实例化SqlSessionFactory</p><p>5：事务管理</p><p>6：创建executor执行器</p><p>7：创建SqlSession</p><p>8：实现CRUD，如果CRUD出现问题，就回滚到5</p><p>9：提交事务</p><h2 id="Lombook"><a href="#Lombook" class="headerlink" title="Lombook"></a>Lombook</h2><p>lombook导入以后可以不用再写getter、setter和构造方法</p><p>导入maven依赖</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>注解</p><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><span class="hljs-meta">@Setter</span><span class="hljs-meta">@Data</span>----&gt;最常用：无参构造、set和get方法、toString()、hashcode()、equals()方法<span class="hljs-meta">@ToString</span><span class="hljs-meta">@AllArgsConstructor</span>----&gt;有参构造，只加这个，就没有无参构造方法了<span class="hljs-meta">@NoArgsConstructor</span>----&gt;无参构造</code></pre><h2 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h2><p>学生表和老师表的关系：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200616145135.png" srcset="/img/loading.gif" alt="image-20200616145132002"></p><p>sql语句</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.id, s.name, t.name <span class="hljs-keyword">FROM</span> student s,teacher t <span class="hljs-keyword">WHERE</span> s.tid=t.id</code></pre><p>查询结果：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200616145157.png" srcset="/img/loading.gif" alt="image-20200616145154515"></p><p>如何在mybatis实现这一行sql语句：<strong>子查询</strong></p><h3 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><pre><code class="hljs java"><span class="hljs-comment">//学生类和老师类</span><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Teacher teacher;&#125;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;&#125;<span class="hljs-comment">//接口</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">StudentMapper</span> </span>&#123;    List&lt;Student &gt; getStudent();&#125;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TeacherMapper</span> </span>&#123;    <span class="hljs-function">Teacher <span class="hljs-title">getTeacher</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;&#125;</code></pre><p>mapper配置文件</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><span class="hljs-meta">        <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.guo.dao.StudentMapper"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getStudent"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"StudentTeacher"</span>&gt;</span>    select * from student    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"StudentTeacher"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"Student"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"name"</span>/&gt;</span><span class="hljs-comment">&lt;!--       复杂的属性需要单独处理，对象：association，集合：collection --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"teacher"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"tid"</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">"Teacher"</span> <span class="hljs-attr">select</span>=<span class="hljs-string">"getTeacher"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getTeacher"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"Teacher"</span>&gt;</span>        select * from teacher where id= #&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><p>测试</p><pre><code class="hljs java"><span class="hljs-meta">@Test</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">test</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    SqlSession sqlSession = MyBatisUtils.getsqlSession();    StudentMapper mapper = sqlSession.getMapper(StudentMapper<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;    List&lt;Student&gt; student = mapper.getStudent();    <span class="hljs-keyword">for</span> (Student s : student) &#123;        System.out.println(s);    &#125;    sqlSession.close();&#125;</code></pre><p>结果：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200616143125.png" srcset="/img/loading.gif" alt="image-20200616143120940"></p><h3 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getStudent2"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"StudentTeacher2"</span>&gt;</span>    select s.id sid,s.name sname,t.name tname    from student s, teacher t    where t.id=s.tid<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"StudentTeacher2"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"Student"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"sid"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"sname"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"teacher"</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">"Teacher"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"tname"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></code></pre><h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><p>一个老师对应多个学生，查询一个老师下的多个学生</p><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> s.name sname,s.id <span class="hljs-keyword">sid</span>, t.id tid, t.name tname <span class="hljs-keyword">FROM</span> student s, teacher t <span class="hljs-keyword">WHERE</span> s.tid=t.id <span class="hljs-keyword">and</span> t.id=<span class="hljs-comment">#&#123;tid&#125;</span></code></pre><p>查询老师时：学生为空</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200616144953.png" srcset="/img/loading.gif" alt="image-20200616144949282"></p><pre><code class="hljs java"><span class="hljs-comment">//mapper</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TeacherMapper</span> </span>&#123;   <span class="hljs-function">Teacher <span class="hljs-title">getTeacher</span><span class="hljs-params">(@Param(<span class="hljs-string">"tid"</span>)</span> <span class="hljs-keyword">int</span> id)</span>;&#125;<span class="hljs-comment">//类</span><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> List&lt;Student&gt; students;&#125;</code></pre><h3 id="按照结果嵌套处理-1"><a href="#按照结果嵌套处理-1" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getTeacher"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"TeacherStudent"</span>&gt;</span>    SELECT s.name sname,s.id sid, t.id tid, t.name tname    FROM student s, teacher t    WHERE s.tid=t.id and t.id=#&#123;tid&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"TeacherStudent"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"Teacher"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"tid"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"tname"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"students"</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">"Student"</span>&gt;</span><span class="hljs-comment">&lt;!--集合中的泛型类型用ofType获取--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"id"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"sid"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"name"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"sname"</span>/&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"tid"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"tid"</span>/&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span></code></pre><p>结果</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200616150507.png" srcset="/img/loading.gif" alt="image-20200616150504219"></p><h3 id="按照查询嵌套处理-1"><a href="#按照查询嵌套处理-1" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h3><p>类比于sql中的子查询</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span><span class="hljs-meta">        <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.guo.dao.TeacherMapper"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getTeacher2"</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">"TeacherStudent2"</span>&gt;</span>    select * from mybatis.teacher where id=#&#123;tid&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"TeacherStudent2"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"Teacher"</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">"students"</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">"ArrayList"</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">"Student"</span> <span class="hljs-attr">select</span>=<span class="hljs-string">"getStudentByTeacherId"</span> <span class="hljs-attr">column</span>=<span class="hljs-string">"id"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"getStudentByTeacherId"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"Student"</span>&gt;</span>        select * from mybatis.student where tid=#&#123;tid&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>choose、when、otherwise、if、trim、where、set、foreach、script和bind</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>缓存是放在内存中的临时数据，将用户<strong>经常查询的数据放在缓存中</strong>，用户去查询数据就不用从磁盘上查询，直接从缓存中查询，解决了高并发系统的性能问题</p><p>好处：减少和数据库的交互次数</p><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>也叫本地缓存：SqlSession</p><p>与数据库同一次会话期间查询到的数据会放到本地缓存中，以后如果需要，直接去缓存中拿。</p><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>二级缓存也叫全局缓存，一级缓存作用域是会话，如果会话关闭了对应缓存就小时了，二级缓存可以让关闭会话后的一级缓存中的数据保存到二级缓存中</p><h2 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h2><p>ExceptionInInitializerError：需要在maven中导入代码，导入后需要刷新maven</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 定义classpath --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>            <span class="hljs-comment">&lt;!-- resources文件 --&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-comment">&lt;!-- 是否被过滤,如果被过滤则无法使用 --&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>            <span class="hljs-comment">&lt;!-- java文件夹 --&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>                <span class="hljs-comment">&lt;!-- 引入映射文件等 --&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>#{}和${}的区别。#{}可以预防sql注入</p><h3 id="IntelliJ-idea中刷新pom就恢复language-level恢复默认为5"><a href="#IntelliJ-idea中刷新pom就恢复language-level恢复默认为5" class="headerlink" title="IntelliJ idea中刷新pom就恢复language level恢复默认为5"></a>IntelliJ idea中刷新pom就恢复language level恢复默认为5</h3><p>在pom.xml中加入：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></code></pre><p>用到的SQL语句</p><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-string">`mybatis`</span>;<span class="hljs-keyword">USE</span> <span class="hljs-string">`mybatis`</span>;<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`user`</span>(<span class="hljs-string">`id`</span> <span class="hljs-built_in">INT</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> PRIMARY <span class="hljs-keyword">KEY</span>,<span class="hljs-string">`name`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<span class="hljs-string">`pwd`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>)<span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">INNODB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8;<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`user`</span>(<span class="hljs-string">`id`</span>,<span class="hljs-string">`name`</span>,<span class="hljs-string">`pwd`</span>) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-string">'z1'</span>,<span class="hljs-string">'123'</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">'q2'</span>,<span class="hljs-string">'456'</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">'z3'</span>,<span class="hljs-string">'123'</span>);<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">USER</span><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`teacher`</span>(<span class="hljs-string">`id`</span> <span class="hljs-built_in">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<span class="hljs-string">`name`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">30</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>))<span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">INNODB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`teacher`</span>(<span class="hljs-string">`id`</span>,<span class="hljs-string">`name`</span>) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-string">'秦老师'</span>)<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`teacher`</span>(<span class="hljs-string">`id`</span>,<span class="hljs-string">`name`</span>) <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2</span>,<span class="hljs-string">'李老师'</span>)<span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-string">`student`</span>(<span class="hljs-string">`id`</span> <span class="hljs-built_in">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<span class="hljs-string">`name`</span> <span class="hljs-built_in">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,<span class="hljs-string">`tid`</span> <span class="hljs-built_in">INT</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-literal">NULL</span>,PRIMARY <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`id`</span>),<span class="hljs-keyword">KEY</span> <span class="hljs-string">`fktid`</span> (<span class="hljs-string">`tid`</span>),<span class="hljs-keyword">CONSTRAINT</span> <span class="hljs-string">`fktid`</span> <span class="hljs-keyword">FOREIGN</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-string">`tid`</span>) <span class="hljs-keyword">REFERENCES</span> <span class="hljs-string">`teacher`</span> (<span class="hljs-string">`id`</span>))<span class="hljs-keyword">ENGINE</span>=<span class="hljs-keyword">INNODB</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">CHARSET</span>=utf8<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`student`</span> (<span class="hljs-string">`id`</span>,<span class="hljs-string">`name`</span>,<span class="hljs-string">`tid`</span>) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'1'</span>,<span class="hljs-string">'x2'</span>,<span class="hljs-string">'1'</span>)<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`student`</span>(<span class="hljs-string">`id`</span>,<span class="hljs-string">`name`</span>,<span class="hljs-string">`tid`</span>) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'2'</span>,<span class="hljs-string">'xh'</span>,<span class="hljs-string">'1'</span>);<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`student`</span>(<span class="hljs-string">`id`</span>,<span class="hljs-string">`name`</span>,<span class="hljs-string">`tid`</span>) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'3'</span>,<span class="hljs-string">'xz'</span>,<span class="hljs-string">'1'</span>);<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`student`</span>(<span class="hljs-string">`id`</span>,<span class="hljs-string">`name`</span>,<span class="hljs-string">`tid`</span>) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'4'</span>,<span class="hljs-string">'xs'</span>,<span class="hljs-string">'1'</span>);<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-string">`student`</span>(<span class="hljs-string">`id`</span>,<span class="hljs-string">`name`</span>,<span class="hljs-string">`tid`</span>) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">'5'</span>,<span class="hljs-string">'xr'</span>,<span class="hljs-string">'1'</span>);</code></pre>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>观察者模式</title>
    <link href="/2020/06/15/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/06/15/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，并自动更新。观察者模式属于行为型模式，<strong>行为型模式</strong>关注的是<strong>对象之间的通讯</strong>，观察者模式就是<strong>观察者和被观察者</strong>之间的通讯</p><p>举个例子：老师在办公室改作业，学生晚自习在教室玩手机、说话、打闹等，在这个过程中，学生要不断观察老师来没来，学生就是观察者，老师就是被观察者。如果老师改完作业来自习室，状态发生了变更，就需要通知每一个学生，让他们停止玩耍，好好学习。</p><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>一个观察者模式包含有两大类：主题和观察者</p><p>主题：主题是观察者观测的对象。主题又可以分成抽象主题和具体主题</p><blockquote><p>抽象主题：把所有对观察者对象的引用保存在一个集合里面，抽象主题提供一个借口，可以增加和删除观察对象。</p><p>​    比如上面例子，学生一直不学习玩耍，老师就可以让学生出去，别影响其他人</p><p>具体主题：该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知</p><p>​    比如：老师来到教室门口，就需要通知学生学习</p></blockquote><blockquote><p>特征：</p><p>持有监听的观察者的引用</p><p>支持增加和删除观察者</p><p>主题状态改变，通知观察者</p></blockquote><p>观察者：不断监听主题，当主题发生变化时，进行相应处理操作。观察者又可以分成抽象观察者和具体观察者</p><blockquote><p>抽象观察者，是观察者者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己。这就是我们所有学生的抽象。</p><p>具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。每一个具体的学生</p></blockquote><p>以学生和老师为例</p><pre><code class="hljs java"><span class="hljs-comment">//抽象主题</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Teacher</span> </span>&#123;    <span class="hljs-comment">//让学生出去</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addStudent</span><span class="hljs-params">(Student student)</span></span>;    <span class="hljs-comment">//让学生进来</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteStudent</span><span class="hljs-params">(Student student)</span></span>;    <span class="hljs-comment">//通知学生老师来了</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyStudent</span><span class="hljs-params">(String msg)</span></span>;&#125;<span class="hljs-comment">//具体主题</span><span class="hljs-keyword">import</span> java.util.LinkedList;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteTeacher</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Teacher</span></span>&#123;    <span class="hljs-keyword">private</span> List&lt;Student&gt; list=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addStudent</span><span class="hljs-params">(Student student)</span> </span>&#123;        list.add(student);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deleteStudent</span><span class="hljs-params">(Student student)</span> </span>&#123;        list.remove(student);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notifyStudent</span><span class="hljs-params">(String msg)</span> </span>&#123;        <span class="hljs-keyword">for</span> (Student s:list)            s.update(msg);    &#125;&#125;<span class="hljs-comment">//抽象观察者---学生</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Student</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(String msg)</span></span>;&#125;<span class="hljs-comment">//具体观察者---学生</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteStudent</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Student</span></span>&#123;    String stuName;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcreteStudent</span><span class="hljs-params">(String stuName)</span> </span>&#123;        <span class="hljs-keyword">this</span>.stuName = stuName;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(String msg)</span> </span>&#123;        System.out.println(stuName+<span class="hljs-string">"知道"</span>+msg+<span class="hljs-string">"老师来了"</span>);    &#125;&#125;<span class="hljs-comment">//测试</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Student s1=<span class="hljs-keyword">new</span> ConcreteStudent(<span class="hljs-string">"z3"</span>);<span class="hljs-comment">//生成学生</span>        Student s2=<span class="hljs-keyword">new</span> ConcreteStudent(<span class="hljs-string">"l4"</span>);        Student s3=<span class="hljs-keyword">new</span> ConcreteStudent(<span class="hljs-string">"w5"</span>);        Teacher t=<span class="hljs-keyword">new</span> ConcreteTeacher();        t.addStudent(s1);<span class="hljs-comment">//添加学生到老师管理的列表中</span>        t.addStudent(s2);        t.addStudent(s3);        t.notifyStudent(<span class="hljs-string">"老师"</span>);<span class="hljs-comment">//老师状态变更，需要通知学生老师来了</span>    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>行为型模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>策略模式</title>
    <link href="/2020/06/15/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/06/15/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><p>策略末班把算法实现和算法使用分离开，让它们之间可以相互替换。策略模式让算法的变换，不会影响到用户。举个例子：某商场促销，有的物品打五折，有的打七折。打几折是算法的实现，不同的物品使用不同的算法，对于收银员来说，他不需要在意具体打几折，只需要输入物品号，程序就可以给出促销后的价格。</p><p>代码如下</p><pre><code class="hljs java"><span class="hljs-comment">//策略的抽象接口</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Strategy</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">algorithm</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-comment">//具体策略----A</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteStrategyA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Strategy</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">algorithm</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"策略A"</span>);    &#125;&#125;<span class="hljs-comment">//具体策略----B</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteStrategyB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Strategy</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">algorithm</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"策略B"</span>);    &#125;&#125;<span class="hljs-comment">//使用一个context来维护上下文</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Context</span> </span>&#123;    Strategy strategy;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Context</span><span class="hljs-params">(Strategy strategy)</span> </span>&#123;<span class="hljs-comment">//根据传入的策略来决定调用的策略</span>        <span class="hljs-keyword">this</span>.strategy = strategy;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">function</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        strategy.algorithm();    &#125;&#125;<span class="hljs-comment">//测试</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    Context contextA=<span class="hljs-keyword">new</span> Context(<span class="hljs-keyword">new</span> ConcreteStrategyA());<span class="hljs-comment">//传入策略A，可以传入不同的策略</span>    contextA.function();    Context contextB=<span class="hljs-keyword">new</span> Context(<span class="hljs-keyword">new</span> ConcreteStrategyB());<span class="hljs-comment">//传入策略B</span>    contextB.function();&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>行为型模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>适配器模式</title>
    <link href="/2020/06/15/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/06/15/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h1><p><strong>适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本接口不匹配而无法在一起工作的两个类能够在一起工作</strong></p><p>模式要素：目标接口、适配器、原接口</p><p>举个例子：电脑只有一个USB接口，需要使用适配器把网线转换成USB接口，这样才可以让电脑上网。如下图</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200615100125.png" srcset="/img/loading.gif" alt="image-20200615100116263"></p> <pre><code class="hljs java"><span class="hljs-comment">//目标是把网线接口转成USB接口</span><span class="hljs-comment">//原接口就是网线：</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NetLine</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">function</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        System.out.println(<span class="hljs-string">"连接网线上网"</span>);    &#125;&#125;<span class="hljs-comment">//接口转换器的抽象实现</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">NetToUsb</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-comment">//转换器的实现类适配器，一个连接网线，一个连接电脑</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Adapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">NetLine</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">NetToUsb</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">super</span>.function();    &#125;&#125;<span class="hljs-comment">//上网</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Computer</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">net</span><span class="hljs-params">(NetToUsb adapter)</span></span><span class="hljs-function">    </span>&#123;        adapter.handle();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Computer computer=<span class="hljs-keyword">new</span> Computer();        Adapter adapter=<span class="hljs-keyword">new</span> Adapter();        computer.net(adapter);    &#125;&#125;</code></pre><p>优化：少继承，多组合</p><pre><code class="hljs java"><span class="hljs-comment">//使用组合</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AdapterImpl</span>  <span class="hljs-keyword">implements</span> <span class="hljs-title">Adapter</span></span>&#123;    NetLine netLine;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">AdapterImpl</span><span class="hljs-params">(NetLine netLine)</span> </span>&#123;        <span class="hljs-keyword">this</span>.netLine = netLine;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handle</span><span class="hljs-params">()</span> </span>&#123;        netLine.function();    &#125;&#125;<span class="hljs-comment">//测试</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    Computer computer=<span class="hljs-keyword">new</span> Computer();    NetLine netLine=<span class="hljs-keyword">new</span> NetLine();<span class="hljs-comment">//网线</span>    AdapterImpl adapter=<span class="hljs-keyword">new</span> AdapterImpl(netLine);<span class="hljs-comment">//传入网线</span>    computer.net(adapter);&#125;</code></pre><p>代码来自@狂神</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>结构型模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Typora图床</title>
    <link href="/2020/06/14/Typora%E5%9B%BE%E5%BA%8A/"/>
    <url>/2020/06/14/Typora%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="使用PicGO-Gitee搭建Typora图床"><a href="#使用PicGO-Gitee搭建Typora图床" class="headerlink" title="使用PicGO+Gitee搭建Typora图床"></a>使用PicGO+Gitee搭建Typora图床</h1><h2 id="码云"><a href="#码云" class="headerlink" title="码云"></a>码云</h2><p>首先在码云里面新建一个仓库，用来存储图片。步骤如下：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200526161531.png" srcset="/img/loading.gif" alt="image-20200526161529013"></p><p>获取你的token，后面要用：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200526162407.png" srcset="/img/loading.gif" alt="image-20200526162403325"></p><p>点击生成新令牌</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200526162438.png" srcset="/img/loading.gif" alt="image-20200526162436032"></p><p>进入私人令牌页面，选择projects这个选项，最后点击提交。私人令牌描述那里随便写，如图床、博客图片等都可以。</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200526162554.png" srcset="/img/loading.gif" alt="image-20200526162550942"></p><h2 id="Typora配置"><a href="#Typora配置" class="headerlink" title="Typora配置"></a>Typora配置</h2><p>打开typora的偏好设置，配置PicGo：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200526163202.png" srcset="/img/loading.gif" alt=""></p><p>2执行完后去执行3。找到安装路径。下图标出的就是安装路径</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200526163010.png" srcset="/img/loading.gif" alt="image-20200526163008740"></p><p>打开cmd进入安装路径，并执行安装插件</p><blockquote><p>cd C:\Users\jaymie\AppData\Roaming\Typora\picgo\win64<br>.\picgo.exe install smms-user<br>.\picgo.exe install gitee-uploader<br>.\picgo.exe install github-plus</p></blockquote><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200526163114.png" srcset="/img/loading.gif" alt="image-20200526163111906"></p><p>再去执行4</p><p>配置文件设置如下：</p><pre><code class="hljs xml">&#123;  "picBed": &#123;    "uploader": "gitee", //    "gitee": &#123;      "repo": "", // 用户名/仓库名      "token": "",// 写你的token      "path": ", // 路径如：img/"      "customUrl": "", //      "branch": "" //    &#125;  &#125;,  "picgoPlugins": &#123;    "picgo-plugin-gitee-uploader": true,    "picgo-plugin-super-prefix": true,    "picgo-plugin-github-plus": true  &#125;,  "picgo-plugin-super-prefix": &#123;    "fileFormat": "YYYYMMDDHHmmss"  &#125;,  "picgo-plugin-gitee-uploader": &#123;    "lastSync": "2020-05-26 04:19:31"  &#125;&#125;</code></pre><p>保存设置，然后再执行3，当出现下图的成功上传图片并获得新的URL时，设置成功</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200526163407.png" srcset="/img/loading.gif" alt="image-20200526163404906"></p><p>以后复制图片到Typora会出现下面的<strong>上传图片</strong>，就可以上传图片到你的码云仓库中去了。</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200614170057763.png" srcset="/img/loading.gif" alt="image-20200614170057763"></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode438-找到字符串中所有字母异位词</title>
    <link href="/2020/06/14/LeetCode438-%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/"/>
    <url>/2020/06/14/LeetCode438-%E6%89%BE%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%89%80%E6%9C%89%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode438-找到字符串中所有字母异位词"><a href="#LeetCode438-找到字符串中所有字母异位词" class="headerlink" title="LeetCode438-找到字符串中所有字母异位词"></a>LeetCode438-找到字符串中所有字母异位词</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>给定一个字符串 s 和一个非空字符串 p，找到 s 中所有是 p 的字母异位词的子串，返回这些子串的起始索引。</p><p>字符串只包含小写英文字母，并且字符串 s 和 p 的长度都不超过 20100。</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">输入:</span><span class="hljs-meta">&gt;</span><span class="bash">s: <span class="hljs-string">"abab"</span> p: <span class="hljs-string">"ab"</span></span><span class="hljs-meta">&gt;</span><span class="bash">输出:</span><span class="hljs-meta">&gt;</span><span class="bash">[0, 1, 2]</span></code></pre><p><strong>说明：</strong></p><ul><li>字母异位词指字母相同，但排列不同的字符串。</li><li>不考虑答案输出的顺序</li></ul></blockquote><p>注意：相同字母也是异位词，如”ab”也是”ab”的异位词</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>维护一个字符串P长度的滑动窗口，不断移动判断即可</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">findAnagrams</span><span class="hljs-params">(String s, String p)</span> </span>&#123;        <span class="hljs-keyword">int</span> sLen=s.length(),pLen=p.length();        <span class="hljs-keyword">int</span> left=<span class="hljs-number">0</span>,right=<span class="hljs-number">0</span>;        HashMap&lt;Character,Integer&gt; target=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();<span class="hljs-comment">//目标元素</span>        HashMap&lt;Character,Integer&gt; window=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();<span class="hljs-comment">//滑动窗口</span>        List&lt;Integer&gt; list=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        <span class="hljs-keyword">char</span> f=p.charAt(<span class="hljs-number">0</span>);        <span class="hljs-keyword">int</span> valid=<span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>(Character c:p.toCharArray()) target.put(c,target.getOrDefault(c,<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);<span class="hljs-comment">//把p中字符都放入到target中</span>        <span class="hljs-keyword">while</span>(right&lt;sLen)        &#123;            <span class="hljs-keyword">char</span> c=s.charAt(right);            right++;            <span class="hljs-keyword">if</span>(target.containsKey(c))<span class="hljs-comment">//判断这个字符在p中是否出现过</span>            &#123;                window.put(c,window.getOrDefault(c,<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);<span class="hljs-comment">//如果出现过，就放到滑动窗口中</span>                <span class="hljs-keyword">if</span>(target.get(c).equals(window.get(c))) valid++;<span class="hljs-comment">//如果每一个字符在滑动窗口中出现的次数和target中出现的次数相等，就让valid++，这说明了窗口中放入了valid个有效字符</span>            &#125;            <span class="hljs-keyword">if</span>(right-left==pLen)<span class="hljs-comment">//如果窗口大小等于P的长度，那么判断一下，这个窗口中的字符是不是P的异位词</span>            &#123;                <span class="hljs-keyword">char</span> d=s.charAt(left);                <span class="hljs-keyword">if</span>(valid==target.size()) <span class="hljs-comment">//如果valid==target.size()，说明了P中所有字母都放入到window中</span>                &#123;                    list.add(left);                &#125;                <span class="hljs-comment">//无论该窗口中元素是不是P的异位词，下面都需要开始向右移动滑动窗口</span>                <span class="hljs-keyword">if</span>(target.containsKey(d))<span class="hljs-comment">//如果字符d包含在target中</span>                &#123;                    <span class="hljs-keyword">if</span>(target.get(d).equals(window.get(d))) valid--;<span class="hljs-comment">//如果这个字符在target中出现过的次数和window中出现的次数相等，那么向右移动后，window中就少了一个符合要求的字符，valid需要减一</span>                    window.put(d,window.get(d)-<span class="hljs-number">1</span>);<span class="hljs-comment">//窗口向右移动，所以需要把该字符从窗口中移出</span>                &#125;                left++;<span class="hljs-comment">//向右移动</span>            &#125;        &#125;        <span class="hljs-keyword">return</span> list;<span class="hljs-comment">//返回结果集</span>    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>滑动窗口</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode3-无重复字符的最长子串</title>
    <link href="/2020/06/14/LeetCode3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <url>/2020/06/14/LeetCode3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode3-无重复字符的最长子串"><a href="#LeetCode3-无重复字符的最长子串" class="headerlink" title="LeetCode3-无重复字符的最长子串"></a>LeetCode3-无重复字符的最长子串</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>给定一个字符串，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度</p><pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash">输入: <span class="hljs-string">"abcabcbb"</span></span><span class="hljs-meta">&gt;</span><span class="bash">输出: 3 </span><span class="hljs-meta">&gt;</span><span class="bash">解释: 因为无重复字符的最长子串是 <span class="hljs-string">"abc"</span>，所以其长度为 3。</span></code></pre></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>典型的滑动窗口，维护一个滑动窗口[left,right)，同时用一个HashMap记录字符串中字符出现的次数，如果发现有重复字符出现，就移动窗口，直到窗口中没有重复字符为止</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> </span>&#123;        <span class="hljs-keyword">int</span> len=s.length();              <span class="hljs-comment">//if(len==0) return 0;</span>        HashMap&lt;Character,Integer&gt; window=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();<span class="hljs-comment">//滑动窗口</span>        <span class="hljs-keyword">int</span> left=<span class="hljs-number">0</span>,right=<span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> start=<span class="hljs-number">0</span>,end=<span class="hljs-number">0</span>,maxLen=<span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(right&lt;len)        &#123;            <span class="hljs-keyword">char</span> c=s.charAt(right);            right++;            window.put(c,window.getOrDefault(c,<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);            <span class="hljs-keyword">while</span>(window.get(c)&gt;<span class="hljs-number">1</span>)<span class="hljs-comment">//如果窗口中出现了重复元素，就让窗口向右移动</span>            &#123;                <span class="hljs-keyword">char</span> p=s.charAt(left);                left++;                window.put(p,window.get(p)-<span class="hljs-number">1</span>);<span class="hljs-comment">//每移动一次滑动窗口，就移出一个字符</span>            &#125;            <span class="hljs-keyword">if</span>(right-left&gt;maxLen)<span class="hljs-comment">//记录窗口的最大长度</span>                maxLen=right-left;                    &#125;        <span class="hljs-keyword">return</span> maxLen;<span class="hljs-comment">//返回窗口长度值</span>            &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>滑动窗口</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode567-字符串的排列</title>
    <link href="/2020/06/14/LeetCode567-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/"/>
    <url>/2020/06/14/LeetCode567-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode567-字符串的排列"><a href="#LeetCode567-字符串的排列" class="headerlink" title="LeetCode567-字符串的排列"></a>LeetCode567-字符串的排列</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>给定两个字符串 <strong>s1</strong> 和 <strong>s2</strong>，写一个函数来判断 <strong>s2</strong> 是否包含 <strong>s1</strong> 的排列。</p><p>换句话说，第一个字符串的排列之一是第二个字符串的子串。</p><pre><code class="hljs armasm">&gt;输入: <span class="hljs-built_in">s1</span> = <span class="hljs-string">"ab"</span> <span class="hljs-built_in">s2</span> = <span class="hljs-string">"eidbaooo"</span>&gt;输出: True&gt;解释: <span class="hljs-built_in">s2</span> 包含 <span class="hljs-built_in">s1</span> 的排列之一 (<span class="hljs-string">"ba"</span>).&gt;输入: <span class="hljs-built_in">s1</span>= <span class="hljs-string">"ab"</span> <span class="hljs-built_in">s2</span> = <span class="hljs-string">"eidboaoo"</span>&gt;输出: False</code></pre></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>维护一个长度为字符串s1长度的滑动窗口，用滑动窗口不断扫描字符串s2，如果窗口内的元素都是s1的元素，说明s2包含字符串s1的一种排列</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">checkInclusion</span><span class="hljs-params">(String s1, String s2)</span> </span>&#123;        <span class="hljs-keyword">int</span> sLen1=s1.length(),sLen2=s2.length();        HashMap&lt;Character,Integer&gt; target=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();        HashMap&lt;Character,Integer&gt; window=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();        <span class="hljs-keyword">for</span>(Character c:s1.toCharArray()) target.put(c,target.getOrDefault(c,<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);        <span class="hljs-keyword">int</span> left=<span class="hljs-number">0</span>,right=<span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> valid=<span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(right&lt;sLen2)<span class="hljs-comment">//这里改成for还是会报错，为啥？？</span>        &#123;            <span class="hljs-keyword">char</span> c=s2.charAt(right);            right++;            <span class="hljs-keyword">if</span>(target.containsKey(c))            &#123;                window.put(c,window.getOrDefault(c,<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);                <span class="hljs-keyword">if</span>(target.get(c).equals(window.get(c))) valid++;            &#125;            <span class="hljs-keyword">if</span>(right-left==sLen1)<span class="hljs-comment">//维护长度为字符串s1长度的一个滑动窗口</span>            &#123;                <span class="hljs-keyword">char</span> d=s2.charAt(left);                left++;                <span class="hljs-keyword">if</span>(valid==target.size()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<span class="hljs-comment">//如果这个窗口内的元素恰好都是s1的元素，说明在字符串s2上找到了s1的一种排列</span>                <span class="hljs-keyword">if</span>(target.containsKey(d))                &#123;                    <span class="hljs-keyword">if</span>(target.get(d).equals(window.get(d))) valid--;                    window.put(d,window.get(d)-<span class="hljs-number">1</span>);                &#125;                                    &#125;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;    &#125;&#125;</code></pre><h2 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h2><blockquote><p>while(right&lt;sLen2)改成for循环会报错，为啥呢？</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>滑动窗口</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代理模式</title>
    <link href="/2020/06/13/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/06/13/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h1><p>代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。代理模式一般由四个角色构成：抽象角色、真实角色、代理角色、客户，而且代理分为静态代理和动态代理</p><p>静态代理代理的是<strong>一个业务</strong>，动态代理可以代理<strong>一类业务</strong></p><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>假如有一个需求是，给每一个方法都实现一个打印日志功能，你怎么做？</p><p>最暴力：直接修改每一个方法，缺点方法太大，改不过来，容易出错，违法开闭原则</p><p>简单点：为每一个类写一个代理类，让代理类和目标类都实现相同的接口，在创建代理对象时，通过构造器塞入一个目标对象，然后在代理对象的方法内部调用目标对象同名方法，并在调用前后打印日志。这样以后，就不需要调用目标类生成对象，直接生成代理对象便完成了添加打印日志的功能。</p><p>代码如下：</p><pre><code class="hljs java"><span class="hljs-comment">//接口</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Person</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-comment">//接口实现类---学生</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Person</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"name is Student"</span>);    &#125;&#125;<span class="hljs-comment">//接口实现类---老师</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Person</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"name is Teacher"</span>);    &#125;&#125;<span class="hljs-comment">//学生代理类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentPerson</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Person</span></span>&#123;    <span class="hljs-keyword">private</span> Student student;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StudentPerson</span><span class="hljs-params">(Student student)</span> </span>&#123;        <span class="hljs-keyword">this</span>.student = student;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"学生类的代理类打印日志功能"</span>);        student.name();    &#125;&#125;<span class="hljs-comment">//老师代理类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TeacherProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Person</span></span>&#123;    <span class="hljs-keyword">private</span> Teacher teacher;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TeacherProxy</span><span class="hljs-params">(Teacher teacher)</span> </span>&#123;        <span class="hljs-keyword">this</span>.teacher = teacher;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"老师类的代理类实现日志功能"</span>);        teacher.name();    &#125;&#125;</code></pre><p>好处：公共业务交给代理角色，真实角色只需要做自己独有业务即可</p><p>缺点：程序员要<strong>手动</strong>为每一个目标类编写对应的代理类，代码量翻倍。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>静态代理需要程序员自己写代理类，使用new关键字创建对应的代理对象，根据代理对象调用代理方法</p><p>创建对象过程：加载、连接、初始化。（下面回顾一下创建过程，可以跳过）</p><h3 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h3><p><strong>类加载全过程：加载、验证、准备、解析和初始化</strong></p><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><p>加载阶段，JVM需要做三件事情</p><blockquote><p>通过类的全限定名获取定义此类的二进制字节流</p><p>将这个字节流代表的静态存储结构转化为方法区的运行时数据结构</p><p>内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</p></blockquote><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><p>连接阶段又可以分成：验证、准备和解析三个阶段</p><blockquote><p>验证：确保Class文件额字节流中包含的信息符合约束要求，保证这些信息被当做代码运行后<strong>不会危害JVM的安全</strong></p><p>​    验证又可以分成：文件格式验证、元数据验证、字节码验证和符号引用验证</p><p>准备：准备阶段是为类<strong>中定义的变量分配内存</strong>并设置<strong>类变量初始值</strong>的阶段，<strong>理论上</strong>这些变量使用的内存都应该在<strong>方法区</strong>中进行分配，但是方法区只是一个逻辑概念，JDK7之前，HotSpot使用永久代来实现方法区，JDK8之后，类变量则随着Class对象一起放到Java堆中。</p><p>​    注意：这里为类变量分配初始值，是分配的各个类型的默认值，如0、null等，不是程序员写到程序中的初始值</p><p>解析：将JVM常量池中的符号引用替换为直接引用。</p><p>​        符号引用：符号引用以一组符号来描述引用的目标，可以是任何形式的字面量，只要可以无歧义的定位到目标即可</p><p>​        直接引用：直接引用是可以执行目标的指针、相对偏移量或者是一个能间接定位到目标的句柄</p></blockquote><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>类的初始化是类加载过程的最后一步。准备阶段，变量已经赋过一次系统要求的初始零值，初始化阶段，则会根据程序员在代码中编写的代码进行相应的初始化</p><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><p>对于任意一个类，必须由加载它的类加载器和这个类本身一起确定它在JVM中的唯一性，每一个类加载器，都有一个独立的类名称空间。</p><p>有两种类加载器，一种是启动类加载器（C++实现），一种是其他类加载器（Java实现）。后者全都继承抽象类java,lang.ClassLoader。关系如下图</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200615085250.png" srcset="/img/loading.gif" alt="image-20200615085244972"></p><p>类加载器之间的层次关系被称为双亲委派模型</p><blockquote><p>双亲委派模型：一个类加载器收到类加载请求时，不会自己去尝试加载这个类，而是把这个请求委派给父加载器去完成，每一个层次都是如此，最终会传到启动类加载器，如果负加载器无法完成这个加载请求，自家在其才会尝试自己去加载。</p><p>优点：保证类的全局唯一性，维护了Java程序的稳定运行</p></blockquote><h3 id="基于接口的动态代理"><a href="#基于接口的动态代理" class="headerlink" title="基于接口的动态代理"></a>基于接口的动态代理</h3><p>动态代理的目标是不写代理类，而是直接得到代理Class对象，然后根据它来创建代理实例。Class对象包含了一个类的所有信息，比如构造器、方法和成员变量等。而为了获得这些信息，<strong>因为接口拥有目标对象的类信息</strong>，我们需要<strong>让代理类和目标类实现同一组接口，确保代理对象的内部结构和目标对象一致</strong>。</p><p>JDK提供了java.lang.reflect.<strong>InvocationHandler</strong>接口和 java.lang.reflect.<strong>Proxy</strong>类。</p><p>Proxy有个静态方法：<strong>getProxyClass</strong>(ClassLoader, interfaces)，只要你给它传入<strong>类加载器和一组接口，它就给你返回代理Class对象</strong>。getProxyClass()这个方法，会从你传入的接口Class中，“拷贝”类结构信息到一个新的Class对象中，新的Class对象带有构造器，是可以创建对象的。一旦我们明确接口，完全可以<strong>通过接口的Class对象，创建一个代理Class，通过代理Class即可创建代理对象</strong>。</p><p>但一般不用<strong>getProxyClass</strong>方法，而是用Proxy类的另一个静态方法：<strong>Proxy.newProxyInstance()</strong>，直接返回代理实例。</p><p>根据代理Class的构造器创建对象时，需要传入InvocationHandler。每次调用代理对象的方法，最终都会调用InvocationHandler的invoke()方法：</p><p>动态代理分成基于接口的动态代理（JDK）和基于类的动态代理（CGLib）</p><pre><code class="hljs java"><span class="hljs-comment">//基于接口的动态代理</span><span class="hljs-comment">//接口</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Rent</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">home</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-comment">//实现类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Host</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Rent</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">home</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"出租房子"</span>);    &#125;&#125;<span class="hljs-comment">//这个类用来生成代理对象</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProxyClass</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">InvocationHandler</span> </span>&#123;<span class="hljs-comment">//实现InvocationHandler接口，创建自己的调用处理器</span>    <span class="hljs-keyword">public</span> Object object;<span class="hljs-comment">//传入接口类型</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getObject</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> object;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setObject</span><span class="hljs-params">(Object object)</span> </span>&#123;        <span class="hljs-keyword">this</span>.object = object;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getProxy</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//创建代理类对象</span>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(<span class="hljs-keyword">this</span>.getClass().getClassLoader(),object.getClass().getInterfaces(),<span class="hljs-keyword">this</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;        <span class="hljs-comment">//调用方法前做一些处理工作</span>        Object invoke = method.invoke(object, args);        <span class="hljs-comment">//调用方法后做一些处理工作</span>        <span class="hljs-keyword">return</span> invoke;    &#125;&#125;<span class="hljs-comment">//测试</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        Host host=<span class="hljs-keyword">new</span> Host();        ProxyClass proxyClass=<span class="hljs-keyword">new</span> ProxyClass();<span class="hljs-comment">//生成代理类</span>        proxyClass.setObject(host);<span class="hljs-comment">//传入要代理的接口</span>        Rent proxy = (Rent) proxyClass.getProxy();<span class="hljs-comment">//</span>        proxy.home();    &#125;&#125;</code></pre><h3 id="基于类的动态代理（待续）"><a href="#基于类的动态代理（待续）" class="headerlink" title="基于类的动态代理（待续）"></a>基于类的动态代理（待续）</h3><p>JDK动态代理的话，他有一个限制，就是它只能为接口创建代理实例，对于没有通过接口定义业务方法的类，需要通过CGLib来创建代理实例</p><h4 id="Enhancer"><a href="#Enhancer" class="headerlink" title="Enhancer"></a>Enhancer</h4><p>Enhancer可能是CGLIB中最常用的一个类，类似于JDK的proxy</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>结构型模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>建造者模式</title>
    <link href="/2020/06/13/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/06/13/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><p>建造者模式是对象的创建模式，它分离了产品的<strong>内部表现</strong>和产品的<strong>生产过程</strong>，使得一个建造过程可以生产具有不同的内部变现的产品对象。使用建造者模式可以使得用户不需要知道产品的每一个零件的生产过程，零件的生产顺序，以及零件的组装。</p><h2 id="产品的内部表现"><a href="#产品的内部表现" class="headerlink" title="产品的内部表现"></a>产品的内部表现</h2><p>一个产品Product，可能有不同的零件，这些零件叫做产品的内部表现。比如要做饭，要先买菜、洗菜、炒菜等</p><h2 id="零件的生产顺序"><a href="#零件的生产顺序" class="headerlink" title="零件的生产顺序"></a>零件的生产顺序</h2><p>产品之间零件的生产顺序也很重要，类似于做饭的顺序，不可能先炒菜，再买菜。必须按照一定的顺序生产零件，才可以得到有意义的产品。建造者模式就是按照正确顺序实现了零件的生产，返回给用户一个合格的对象</p><p>建造者模式结构组成：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200613103809.png" srcset="/img/loading.gif" alt="image-20200613103805729"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="hljs java"><span class="hljs-comment">//抽象建造者</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Build</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildA</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildB</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildC</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">buildD</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">abstract</span> Product <span class="hljs-title">getProduct</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-comment">//产品</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Product</span> </span>&#123;    <span class="hljs-comment">//一个产品由A,B,C,D四部分组成</span>    <span class="hljs-keyword">private</span> String productA;    <span class="hljs-keyword">private</span> String productB;    <span class="hljs-keyword">private</span> String productC;    <span class="hljs-keyword">private</span> String productD;    &#125;&#125;<span class="hljs-comment">//创建产品的类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Build</span></span>&#123;    <span class="hljs-keyword">private</span> Product product;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Worker</span><span class="hljs-params">( )</span> </span>&#123;        product=<span class="hljs-keyword">new</span> Product();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildA</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"AAA"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildB</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"BBB"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildC</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"CCC"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buildD</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"DDD"</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function">Product <span class="hljs-title">getProduct</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> product;    &#125;&#125;<span class="hljs-comment">//指挥者决定建造顺序</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Director</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> Product <span class="hljs-title">build</span><span class="hljs-params">(Build build)</span></span>&#123;            build.buildA();            build.buildB();            build.buildC();            build.buildD();            <span class="hljs-keyword">return</span> build.getProduct();    &#125;&#125;<span class="hljs-comment">//主线程测试</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//构建指挥</span>        Director director=<span class="hljs-keyword">new</span> Director();        <span class="hljs-comment">//通过指挥者来建造产品</span>        Product build = director.build(<span class="hljs-keyword">new</span> Worker());        <span class="hljs-comment">//打印产品</span>        build.toString();    &#125;&#125;</code></pre><p>导演类Director在Builder模式中具有重要的意义，复制指导建造者以何种顺序来构建产品，并且返回最终产品。</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>创建型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原型模式</title>
    <link href="/2020/06/13/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/06/13/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><p>原型模式：顾名思义以某个对象为原型，复制一个新的对象。创建复制对象的时候，可以提高效率</p><p>原型模式主要用于对象的复制，其中原型类也就是被复制的类需要具备两个条件：1实现Cloneable接口，2重写Object的clone方法。</p><p>代码如下</p><pre><code class="hljs java"><span class="hljs-comment">//原型类型</span><span class="hljs-keyword">package</span> day01.test;<span class="hljs-keyword">import</span> javax.sql.DataSource;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span> </span>&#123;    <span class="hljs-keyword">public</span> Date date;    <span class="hljs-keyword">public</span> String name;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.clone();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(Date date, String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.date = date;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"Person&#123;"</span> +                <span class="hljs-string">"date="</span> + date +                <span class="hljs-string">", name='"</span> + name + <span class="hljs-string">'\''</span> +                <span class="hljs-string">'&#125;'</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Date <span class="hljs-title">getDate</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> date;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDate</span><span class="hljs-params">(Date date)</span> </span>&#123;        <span class="hljs-keyword">this</span>.date = date;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;&#125;<span class="hljs-comment">//主线程</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;    Date date=<span class="hljs-keyword">new</span> Date();    Person p1=<span class="hljs-keyword">new</span> Person(date,<span class="hljs-string">"zs"</span>);    Person clone = (Person) p1.clone();    System.out.println(p1.toString());    System.out.println(clone.toString());    System.out.println(<span class="hljs-string">"================"</span>);    date.setTime(<span class="hljs-number">123</span>);<span class="hljs-comment">//修改date</span>    System.out.println(p1.toString());    System.out.println(clone.toString());&#125;</code></pre><p>上面的代码以原型p1为模板，克隆了一个原型对象，但是这种克隆只是浅克隆，如果我们修改原型对象的引用类型数据，那么克隆对象中的引用类型也会随之改动</p><h2 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h2><p>浅克隆是只克隆按值传递的数据，比如基本数据类型、String类型，而不会克隆它所引用的对象，对修改原对象中的引用类型数据，克隆对象中的数据也会随之修改，如下图所示：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200613100516.png" srcset="/img/loading.gif" alt="image-20200613100510733"></p><h2 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h2><p>深克隆是除了克隆基本数据类型和String类型的值外，还会克隆引用类型的数据，重新在堆中开辟一段空间，用来放置引用对象，并且用新的引用指向该对象</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200613100751.png" srcset="/img/loading.gif" alt="image-20200613100747462"></p><p>深克隆代码如下</p><pre><code class="hljs java"><span class="hljs-comment">//只需要修改clone方法的代码即可</span><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;        Person person = (Person)<span class="hljs-keyword">super</span>.clone();<span class="hljs-comment">//得到克隆对象，将其转成person类型</span>        Date clone =(Date) <span class="hljs-keyword">this</span>.date.clone();<span class="hljs-comment">//得到原型对象中的引用对象</span>        person.date=clone;<span class="hljs-comment">//修改原型对象中的引用对象</span>        <span class="hljs-keyword">return</span> person;<span class="hljs-comment">//返回克隆对象</span>    &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>创建型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode76-最小覆盖子串</title>
    <link href="/2020/06/12/LeetCode76-%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/"/>
    <url>/2020/06/12/LeetCode76-%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode76-最小覆盖子串"><a href="#LeetCode76-最小覆盖子串" class="headerlink" title="LeetCode76 最小覆盖子串"></a>LeetCode76 最小覆盖子串</h1><p>给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字符的最小子串。</p><p>这是一道典型的滑动窗口，大致思路是使用两个指针left和right，先滑动right，使得[left,right)区间内的元素包含T中所有元素，此时再滑动left，缩小区间，当缩小到区间[left,right)缺少T中的一个字符时，滑动right，以此类推，直到right到达终点字符串S的末尾。记录中间的区间最小值的开头和结尾，最后返回即可</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">minWindow</span><span class="hljs-params">(String s, String t)</span> </span>&#123;        <span class="hljs-keyword">int</span> left=<span class="hljs-number">0</span>,right=<span class="hljs-number">0</span>;<span class="hljs-comment">//左右指针</span>        <span class="hljs-keyword">int</span> start=<span class="hljs-number">0</span>,end=<span class="hljs-number">0</span>;<span class="hljs-comment">//区间开始位置和结尾位置</span>        <span class="hljs-keyword">int</span> sLen=s.length(),tLen=t.length();<span class="hljs-comment">//字符串长度</span>        <span class="hljs-keyword">int</span> minLen=Integer.MAX_VALUE;        <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;        HashMap&lt;Character,Integer&gt; target=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();<span class="hljs-comment">//记录目标字符串中字符的出现次数</span>        HashMap&lt;Character,Integer&gt; window=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();<span class="hljs-comment">//滑动窗口</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c:t.toCharArray())        &#123;            <span class="hljs-keyword">if</span>(target.containsKey(c)) target.put(c,target.get(c)+<span class="hljs-number">1</span>);            <span class="hljs-keyword">else</span> target.put(c,<span class="hljs-number">1</span>);        &#125;        <span class="hljs-keyword">while</span>(right&lt;sLen)        &#123;            <span class="hljs-keyword">char</span> c=s.charAt(right);            right++;<span class="hljs-comment">//滑动左指针</span>            <span class="hljs-keyword">if</span>(target.containsKey(c))            &#123;                window.put(c,window.getOrDefault(c,<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);                <span class="hljs-keyword">if</span>(window.get(c).equals(target.get(c))) res++;<span class="hljs-comment">//这里不可以使用==，因为是引用类型，比较的是地址，-128~127还可以用，超过就会new一个新对象出来</span>            &#125;            <span class="hljs-keyword">while</span>(res==target.size())<span class="hljs-comment">//满足要求，滑动右指针，缩小窗口</span>            &#123;                <span class="hljs-keyword">if</span>(right-left&lt;minLen)                &#123;                    start=left;                    end=right;                    minLen=end-start;                &#125;                <span class="hljs-keyword">char</span> d=s.charAt(left);                left++;<span class="hljs-comment">//移动右指针</span>                <span class="hljs-keyword">if</span>(target.containsKey(d))                &#123;                    <span class="hljs-keyword">if</span>(target.get(d).equals(window.get(d))) res--;<span class="hljs-comment">//移出元素，导致目标窗口不符合要求</span>                    window.put(d,window.get(d)-<span class="hljs-number">1</span>);                &#125;                            &#125;        &#125;        <span class="hljs-keyword">return</span> minLen==Integer.MAX_VALUE?<span class="hljs-string">""</span>:s.substring(start,end);    &#125;&#125;</code></pre><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p><code>window.get(c).equals(target.get(c))</code>改成 <code>window.get(c)==target.get(c)</code>会报错，原因是map取出来的是Integer类型，Integer第二次创建的时候不会使用new关键字，而是使用已经缓存的对象。 如果数值在-128~127位之间会有缓存，那么两个对象地址相同，此时使用 == 比较结果正确， 如果数值超出范围，就会创建新的对象，分配的地址不同，此时再用 == 比较就会出错。</p><p><code>while(right&lt;sLen){right++}</code>改成<code>for(right=0;right&lt;sLen;right++){}</code>也会报错，原因目前不清楚</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>滑动窗口</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode215-TopK</title>
    <link href="/2020/06/12/LeetCode215-TopK/"/>
    <url>/2020/06/12/LeetCode215-TopK/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode215-TopK"><a href="#LeetCode215-TopK" class="headerlink" title="LeetCode215 TopK"></a>LeetCode215 TopK</h1><p>给定数组，求数组中第K大的元素，最简单的方法是暴力求解，升序排好序后求第K个元素即可，这种解法代码如下：</p><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findKthLargest</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;            <span class="hljs-keyword">int</span> len=nums.length;            Arrays.sort(nums);            <span class="hljs-keyword">return</span> nums[len-k];    &#125;&#125;</code></pre><p>但是面试官肯定不想你给出这种解法，如果数据量很大，无法一次存到内存中，暴力解法就用不上了</p><p>这种情况需要用堆来排序，建立一个大根堆，堆顶元素是最大值，这样只需要维护K次大根堆，那么就得到了第K大的元素，代码如下</p><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findKthLargest</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k)</span> </span>&#123;        <span class="hljs-keyword">int</span> len=nums.length;        heapSort(nums,len,k);        <span class="hljs-keyword">return</span> nums[len-k];    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">heapSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> size, <span class="hljs-keyword">int</span> k)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=size/<span class="hljs-number">2</span>-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--) heapify(nums,size,i);<span class="hljs-comment">//先从最后一个非叶子节点开始调整</span>        <span class="hljs-comment">//上面那个for循环结束就代表着此时堆顶元素就是最大值了</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=size-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)        &#123;            swap(nums,<span class="hljs-number">0</span>,i);<span class="hljs-comment">//交换堆顶元素</span>            k--;<span class="hljs-comment">//k--，代表着交换了一次，求的是第K大元素，所以交换K次</span>            <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//如果k==0，说明交换了k次</span>            heapify(nums,i,<span class="hljs-number">0</span>);        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">heapify</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> size, <span class="hljs-keyword">int</span> i)</span><span class="hljs-comment">//维护结点i，使得结点i为合法位置</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">int</span> largest=i;        <span class="hljs-keyword">int</span> left=i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;        <span class="hljs-keyword">int</span> right=i*<span class="hljs-number">2</span>+<span class="hljs-number">2</span>;        <span class="hljs-keyword">if</span>(left&lt;size &amp;&amp; nums[left]&gt;nums[largest] )largest=left;        <span class="hljs-keyword">if</span>(right &lt;size &amp;&amp; nums[right] &gt;nums[largest]) largest=right;        <span class="hljs-keyword">if</span>(i!=largest)        &#123;            swap(nums, i, largest);            heapify(nums,size,largest);        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">int</span> temp=nums[i];        nums[i]=nums[j];        nums[j]=temp;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>高频面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>工厂模式</title>
    <link href="/2020/06/11/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/06/11/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>工厂模式解决的问题是：<strong>创建对象的过程比较复杂，希望对外隐藏这些细节</strong>。比如创建线程池对象、连接池对象等</p><p>工厂模式又分成：简单工厂、静态工厂、抽象工厂模式</p><p><strong>简单工厂模式：</strong>又叫静态工厂模式，但不属于23种GOF设计模式之一。简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例</p><p><strong>工厂模式：</strong>实例化对象不适用new，用工厂方法代替</p><p><strong>抽象工厂模式：</strong>抽象工厂模式是所有形态的工厂模式中最为抽象和最具一般性的一种形态。抽象工厂模式是指当有多个抽象角色时，使用的一种工厂模式</p><h2 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h2><p>代码如下</p><pre><code class="hljs java"><span class="hljs-comment">//接口</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Product</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-comment">//实现类---ProductA</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Product</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"ProductA"</span>);    &#125;&#125;<span class="hljs-comment">//实现类---ProductB</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Product</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"ProductB"</span>);    &#125;&#125;<span class="hljs-comment">//静态工厂</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Product <span class="hljs-title">getPerson</span><span class="hljs-params">(String product)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span>(product.equals(<span class="hljs-string">"ProductA"</span>)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ProductA();    <span class="hljs-keyword">if</span>(product.equals(<span class="hljs-string">"ProductB"</span>)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ProductB();    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;&#125;<span class="hljs-comment">//主线程</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    Product p1=StaticFactory.getProduct(<span class="hljs-string">"ProductA"</span>);    Product p2=StaticFactory.getProduct(<span class="hljs-string">"ProductB"</span>);    p1.name();    p2.name();&#125;</code></pre><p>弊端：假如需要新增加一个新产品ProductC，那么就需要修改StaticFactory的原代码，违反了开闭原则</p><p>解决方法：工厂方法模式</p><h2 id="工厂模式-1"><a href="#工厂模式-1" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>工厂方法模式是在不修改已有类的前提下，通过增加新的工厂来扩展功能</p><p>代码如下</p><pre><code class="hljs java"><span class="hljs-comment">//工厂接口</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Factory</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> Product <span class="hljs-title">createProduct</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-comment">//工厂实现类A</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Factory</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Product <span class="hljs-title">createProduct</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ProductA();    &#125;&#125;<span class="hljs-comment">//工厂实现类B</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Factory</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Product <span class="hljs-title">createProduct</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ProductB();    &#125;&#125;<span class="hljs-comment">//主程序</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    Factory factory1=<span class="hljs-keyword">new</span> FactoryA();    Factory factory2=<span class="hljs-keyword">new</span> FactoryB();    factory1.createProduct().name();    factory2.createProduct().name();&#125;</code></pre><p>如果我们想拓展新的产品，那么只需要添加一个工厂即可，比如想添加产品productC，代码如下</p><pre><code class="hljs java"><span class="hljs-comment">//产品类C</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductC</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Product</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"ProductC"</span>);    &#125;&#125;<span class="hljs-comment">//工厂C</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryC</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Factory</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Product <span class="hljs-title">createProduct</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ProductC();    &#125;&#125;<span class="hljs-comment">//主线程</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    Factory factory1=<span class="hljs-keyword">new</span> FactoryA();    Factory factory2=<span class="hljs-keyword">new</span> FactoryB();    Factory factory3=<span class="hljs-keyword">new</span> FactoryB();<span class="hljs-comment">//构建一个工厂C，用来生产产品C</span>    factory1.createProduct().name();    factory2.createProduct().name();    factory3.createProduct().name();<span class="hljs-comment">//生产产品C</span>&#125;</code></pre><p>上面的两种模式都只有一个产品接口，如果产品接口多了起来，需要很多工厂类，代码量会翻倍，所以需要引入抽象工厂模式。</p><h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><p>抽象工厂可以认为是有多个接口的工厂方法，比如product中有接口A、接口B、接口C等。类比到手机产品，有充电接口、耳机接口、电池接口等</p><p>代码如下</p><pre><code class="hljs java"><span class="hljs-comment">//接口</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Product</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">name</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-comment">//接口</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">OtherProduct</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">look</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-comment">//Product接口的实现类见上文</span><span class="hljs-comment">//OtherProduct接口的实现类A</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OtherProductA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">OtherProduct</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">look</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"lookA"</span>);    &#125;&#125;<span class="hljs-comment">//OtherProduct接口的实现类B</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OtherProductB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">OtherProduct</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">look</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"OtherProductB"</span>);    &#125;&#125;<span class="hljs-comment">//OtherProduct接口的实现类C</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OtherProductC</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">OtherProduct</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">look</span><span class="hljs-params">()</span> </span>&#123;        System.out.println(<span class="hljs-string">"OtherProductC"</span>);    &#125;&#125;<span class="hljs-comment">//工厂接口</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Factory</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> Product <span class="hljs-title">createProduct</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> OtherProduct <span class="hljs-title">createOtherProduct</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-comment">//工厂接口实现类A</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Factory</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> OtherProduct <span class="hljs-title">createOtherProduct</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OtherProductA();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Product <span class="hljs-title">createProduct</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ProductA();    &#125;&#125;<span class="hljs-comment">//工厂接口实现类B</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Factory</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Product <span class="hljs-title">createProduct</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ProductB();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> OtherProduct <span class="hljs-title">createOtherProduct</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OtherProductB();    &#125;&#125;<span class="hljs-comment">//工厂接口实现类C</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FactoryC</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Factory</span></span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Product <span class="hljs-title">createProduct</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ProductC();    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> OtherProduct <span class="hljs-title">createOtherProduct</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> OtherProductC();    &#125;&#125;<span class="hljs-comment">//主线程</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;    Factory factory1=<span class="hljs-keyword">new</span> FactoryA();    Factory factory2=<span class="hljs-keyword">new</span> FactoryB();    Factory factory3=<span class="hljs-keyword">new</span> FactoryC();    factory1.createProduct().name();    factory1.createOtherProduct().look();    factory2.createProduct().name();    factory2.createOtherProduct().look();    factory3.createProduct().name();    factory3.createOtherProduct().look();&#125;</code></pre><p>总结：工厂设计模式的出现是为了封装复杂的创建过程，只提供给调用者实现，其中简单工厂和工厂模式可以认为是只有一个接口的抽象工厂</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>创建型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2020/06/11/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/06/11/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式指的是一个类只有一个实例，单例分为饿汉式单例和懒汉式单例</p><p>懒汉式单例：只有再用实例的时候，才去创建这个类的实例</p><p>饿汉式单例：初始化的时候就创建好实例，不管你用不用</p><h2 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h2><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<span class="hljs-comment">//私有构造函数</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton singleton=<span class="hljs-keyword">new</span> Singleton();    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> singleton;    &#125;&#125;</code></pre><h2 id="懒汉式单例"><a href="#懒汉式单例" class="headerlink" title="懒汉式单例"></a>懒汉式单例</h2><p>懒汉式单例时面试高频考点，因为多线程下下面这种代码不是线程安全的，面试官会让你不断优化</p><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<span class="hljs-comment">//私有构造函数，这样外界就无法通过构造函数来初始化单例</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton singleton;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">if</span>(singleton==<span class="hljs-keyword">null</span>) singleton=<span class="hljs-keyword">new</span> Singleton();<span class="hljs-comment">//当使用这个单例时，发现没有初始化才开始初始化，所以是懒汉式</span>        <span class="hljs-keyword">return</span> singleton;    &#125;&#125;</code></pre><p>上面代码<code>if(singleton==null) singleton=new Singleton();</code>,当有两个线程A和B同时进入到<code>if</code>判断，那么<code>new Singleton()</code>，就会执行两次，所以需要双重检测锁模式的懒汉式单例</p><h3 id="DCL懒汉式单例"><a href="#DCL懒汉式单例" class="headerlink" title="DCL懒汉式单例"></a>DCL懒汉式单例</h3><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<span class="hljs-comment">//私有构造函数，这样外界就无法通过构造函数来初始化单例</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton singleton;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">if</span>(singleton==<span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">//第一次检测</span>            <span class="hljs-keyword">synchronized</span> (Singleton<span class="hljs-class">.<span class="hljs-keyword">class</span>)//加一把锁</span><span class="hljs-class">            </span>&#123;                <span class="hljs-keyword">if</span>(singleton==<span class="hljs-keyword">null</span>)<span class="hljs-comment">//第二次检测，目的是防止当两个线程同时进入到第一次if判断时，singleton此时为空，当第一个线程执行完代码释放锁后</span>                &#123;<span class="hljs-comment">//第二个线程进入，此时singleton因为已经被第一个线程实例化了，就进不来第二个if判断</span>                    singleton=<span class="hljs-keyword">new</span> Singleton();                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> singleton;    &#125;&#125;</code></pre><p>但是上面代码还存在一个问题：<code>singleton=new Singleton();</code>不是原子性操作，它可以分成三步，第一步分配空间，第二步执行构造器方法，初始化对象，第三步将引用指向内存空间，但是JVM编译器会进行<strong>指令重排</strong>，执行顺序可能是132。假如线程A执行到了<code>singleton=new Singleton();</code>，当这一行代码执行顺序是132，先分配空间，再将引用指向内存空间，刚执行完这一步，线程B进来了，因为此时已经把引用指向了内存空间，所以<code>if(singleton==null)</code>判断为false，直接返回<code>singleton</code>，但实际上此时singleton所指向的内存空间还没有初始化，实际还未空，所以线程B返回的<code>singleton</code>实际为<code>null</code></p><h3 id="加Volatile的DCL"><a href="#加Volatile的DCL" class="headerlink" title="加Volatile的DCL"></a>加Volatile的DCL</h3><p>优化：加一个<code>volatile</code>关键字，<code>volatile</code>关键字有两个作用：一个是禁止指令重排、一个是保持变量的内存可见性。所以加了volatile关键字，禁止了JVM的指令重排，也就维护了线程安全</p><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<span class="hljs-comment">//私有构造函数，这样外界就无法通过构造函数来初始化单例</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton singleton;<span class="hljs-comment">//volatile禁止指令重排</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">if</span>(singleton==<span class="hljs-keyword">null</span>) &#123;<span class="hljs-comment">//第一次检测</span>            <span class="hljs-keyword">synchronized</span> (Singleton<span class="hljs-class">.<span class="hljs-keyword">class</span>)//加一把锁</span><span class="hljs-class">            </span>&#123;                <span class="hljs-keyword">if</span>(singleton==<span class="hljs-keyword">null</span>)<span class="hljs-comment">//第二次检测，目的是防止当两个线程同时进入到第一次if判断时，singleton此时为空，当第一个线程执行完代码释放锁后</span>                &#123;<span class="hljs-comment">//第二个线程进入，此时singleton因为已经被第一个线程实例化了，就进不来第二个if判断</span>                    singleton=<span class="hljs-keyword">new</span> Singleton();                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> singleton;    &#125;&#125;</code></pre><p>但是上面代码还是有问题，我们可以通过反射获取构造器，修改构造器访问权限，然后再使用构造器的<code>newInstance()</code>方法来创建实例，代码如下：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        Constructor&lt;Singleton&gt; constructor = Singleton<span class="hljs-class">.<span class="hljs-keyword">class</span>.<span class="hljs-title">getDeclaredConstructor</span>(<span class="hljs-title">null</span>)</span>;        constructor.setAccessible(<span class="hljs-keyword">true</span>);        Singleton singleton = constructor.newInstance();        Singleton singleton1=constructor.newInstance();        System.out.println(singleton.hashCode());<span class="hljs-comment">//打印出来hashcode，发现两个对象的hashcode不同，所以不是一个对象</span>        System.out.println(singleton1.hashCode());    &#125;</code></pre><p>解决方法：枚举，关键字<code>enum</code>可以使得JVM阻止反射获取枚举类的私有构造方法</p><h3 id="使用枚举的单例"><a href="#使用枚举的单例" class="headerlink" title="使用枚举的单例"></a>使用枚举的单例</h3><pre><code class="hljs java"><span class="hljs-keyword">enum</span> EnumSingleton &#123;    INSTANCE;    <span class="hljs-function"><span class="hljs-keyword">public</span> EnumSingleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> INSTANCE;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>创建型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2020/06/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/06/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>设计模式基于六大设计原则，分成三类，一共有23种</p><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><p>开闭原则：扩展开发，修改关闭</p><p>单一职责：一个类只负责一件事情</p><p>里氏替换原则：子类应该可以完全替代父类。</p><p>依赖倒置原则：高层模块不应该依赖低层模块，它们都应该依赖抽象。抽象不应该依赖于细节，细节应该依赖于抽象。代码要依赖于抽象的类，而不要依赖于具体的类；要针对接口或抽象类编程，而不是针对具体类编程。</p><p>迪米特法则：又名最少知道原则，一个类不应知道自己操作的类的细节，换言之，只和朋友谈话，不和朋友的朋友谈话。</p><p>接口隔离原则：客户端不应依赖它不需要的接口。如果一个接口在实现时，部分方法未被客户端实现，则应该将接口拆分，让实现类只需依赖自己需要的接口方法</p><p>组合原则：尽量使用对象组合，而不是继承来达到复用的目的。</p><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><p>创建型模型提供创建对象的机制，省去new的步骤</p><p>一共有六种：<strong>单例模式(Singleton)、原型模式(prototype)、工厂方法(Factory method)、抽象工厂(Abstract Factory)</strong>和建造者模式(Builder)</p><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><p>作用：从程序实现松耦合，扩大类结构，解决更大的问题</p><p>一共有七种：<strong>组合模式(Composite)、适配器模式(Adapter)、装饰者模式(Decorator)、代理模式(Proxy)</strong>、外观模式(Facade)、桥接模式(Bridge)、享元模式(Flyweight)</p><h2 id="行为模式"><a href="#行为模式" class="headerlink" title="行为模式"></a>行为模式</h2><p>行为模式负责对象间的高效沟通和职责委派。</p><p>一共有十一种：<strong>策略模式(Strategy)、观察者模式(Observer)</strong>、责任链(chain of Responsibilty)、命令(Command)、迭代器(Iterator)、中介者(Mediator)、备忘录(Memento)、状态(State)、模板方法(Template Method)、访问者(Visitor)、解释器模式(Interpreter)</p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>大纲</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC</title>
    <link href="/2020/06/11/SpringMVC/"/>
    <url>/2020/06/11/SpringMVC/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringMVC（待续）"><a href="#SpringMVC（待续）" class="headerlink" title="SpringMVC（待续）"></a>SpringMVC（待续）</h1><p>MVC是一种开发模式，将程序分层的一种思想。</p><blockquote><p>M：Model—&gt;业务数据（service、repository、entity）</p><p>V：View—&gt;视图（JSP、HTML、APP客户端）</p><p>C：Controller—&gt;控制（Servlet、Handler、Action）</p><p>这三者关系简单来说是：请求进入Controller，Controller调用业务模型Model，Model再去数据库获取数据，然后返回View层</p></blockquote><p>SpringMVC就是通过DispatcherServlet将一堆组件串联起来的Web框架，SpringMVC的整个运行体系，是由DispatcherServlet、组件和容器这三者共同构成的。DispatcherServlet是逻辑处理的<strong>调度中心</strong>，组件则是被调度的操作对象。而容器在这里所起到的作用，是协助DispatcherServlet更好地对组件进行管理。</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200615132013.png" srcset="/img/loading.gif" alt="image-20200615132008381"></p><h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><p>DispatcherServlet：前置控制器，将请求分发到不同的处理器，整个流程控制的核心，控制其他组件的执行，进行统一调度，降低组件之间的耦合性。</p><p>Handler：处理器，完成具体的业务逻辑，相当于Servlet</p><p>HandlerMapping：处理器映射器，DispatcherServlet接受到请求后，调用HandlerMapping将不同的请求映射到不同的Handler</p><p>HandlerInterceptor：处理器拦截器，主要功能是负责拦截一些请求和操作</p><p>HandlerExecutionChain：处理器执行链，包括两部分：Handler和HandlerInterceptor</p><p>HandlerAdapter：处理器适配器，handler执行业务方法之前，需要进行一系列操作，包括表单数据的验证、数据类型的转换、将表单数据封装到JavaBean等，使得开发者只需要将注意力集中到业务逻辑的处理上。DispatcherServlet通过HandlerAdapter执行不同的Handler</p><p>ModelAndView：装载了模型数据和视图信息，作为Handler的处理结果，返回给DispatcherServlet</p><p>ViewResolver：视图解析器，DispatcherServlet通过它将逻辑视图解析为物理视图。逻辑视图不是真实存在的一个视图，逻辑概念，物理视图是真实存在的</p><h3 id="执行流程："><a href="#执行流程：" class="headerlink" title="执行流程："></a>执行流程：</h3><p>客户端发起请求，DispatcherServlet接受请求</p><p>HandlerMapping根据不同的请求映射到不同的Handler上，返回一个HandlerExecutionChain给DispatcherServlet</p><p>DispatcherServlet调用HandlerAdapter执行handler，handler执行完毕后返回一个ModelAndView</p><p>DispatcherServlet拿到结果后解析ModelAndView，解析由ViewResolver负责解析，把逻辑视图解析成物理视图。解析结果返回给DispatcherServlet</p><p>DispatcherServlet根据View进行视图渲染，将模型数据填充到视图View中</p><p>DispatcherServlet将渲染后的结果响应再返回给客户端</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200613165102.png" srcset="/img/loading.gif" alt="image-20200613165056813"></p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200615141505.png" srcset="/img/loading.gif" alt=""></p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200615141313.png" srcset="/img/loading.gif" alt="image-20200615141309525"></p><h2 id="DispatcherServlet：前置控制器"><a href="#DispatcherServlet：前置控制器" class="headerlink" title="DispatcherServlet：前置控制器"></a>DispatcherServlet：前置控制器</h2><p>结构图：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200615132420.png" srcset="/img/loading.gif" alt="image-20200615132416258"></p><p>DispatcherServlet对于容器<strong>WebApplicationContext</strong>的初始化是在FrameworkServlet中完成的，在默认情况下，这个初始化过程是由web.xml中的入口程序配置所驱动的</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Processes application requests --&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcher<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>dispatcher<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/**<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span>  <span class="hljs-comment">&lt;!--根据Spring的设计原则，所有纳入WebApplicationContext中管理的对象，都被映射为XML中的一个&lt;bean&gt;节点，通过对于&lt;bean&gt;节点的一个完整描述，我们可以有效地将整个应用程序中所有的对象都纳入到一个统一的容器中进行管理--&gt;</span></code></pre><p>在默认情况下，web.xml配置节点中<code>&lt;servlet-name&gt;</code>的值就是建立起核心分发器DispatcherServlet与核心配置文件之间联系的桥梁。DispatcherServlet在初始化时会加载位置在/WEB-INF/[servlet-name]-servlet.xml的配置文件作为SpringMVC的核心配置。</p><p>SpringMVC核心配置文件中所有的bean定义，就是SpringMVC的组件定义，也是DispatcherServlet在初始化容器（WebApplicationContext）时，所要进行初始化的组件。</p><p>概括一下WebApplicationContext初始化的两个逻辑层次：</p><ul><li><strong>DispatcherServlet负责对容器（WebApplicationContext）进行初始化。</strong></li><li><strong>容器（WebApplicationContext）将读取SpringMVC的核心配置文件进行组件的实例化。</strong></li></ul><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>@RequestMapping</p><p>作用：映射URL到控制器类（实现了Controller的类，就是一个控制类）或一个特定的处理程序方法。可以用于类或者方法上。用于类上表示所有响应请求的方法都是以该地址作为父路径</p><pre><code class="hljs java"><span class="hljs-comment">//浏览器地址栏输入：http://localhost:8080/c3/t1访问该方法</span><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/c3"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/t1"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(Model model)</span></span>&#123;        model.addAttribute(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"Hello ,annotation"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;    &#125;&#125;</code></pre><p>接受请求参数以及参数回显：</p><pre><code class="hljs java"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/c2"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test</span><span class="hljs-params">(User user)</span></span><span class="hljs-function"></span>&#123;    System.out.println(user);    <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;&#125;<span class="hljs-comment">//http://localhost:8080/c2?name=qsq&amp;id=12&amp;age=6</span></code></pre><p>参数</p><blockquote><p>value：直到URL请求的实际地址，是@RequestMapping的默认值</p><p>method：指定请求的类型（GET/POST/PUT/DELETE），表示该方法只可以被指定请求来访问，不加的话get和post都可以</p><p>params：表示指定请求中必须含有某些参数，否则无法访问</p></blockquote><p>SpringMVC支持restful风格，使用方式</p><blockquote><p>@RequestMapping(“/xx/{xx}/{xx}”)，而且必须在形参列表加注解@PathVariable(“xx”)，传统方式是参数名和形参名一样即可</p></blockquote><pre><code class="hljs java"><span class="hljs-comment">//http://localhost:8080/c3/t1/1/2。。。浏览器输入</span><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/c3"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping</span>(value = <span class="hljs-string">"/t1/&#123;a&#125;/&#123;b&#125;"</span>,method = RequestMethod.POST)<span class="hljs-comment">//浏览器按回车，会出现405，请求方式不支持，必须是GET请求才可以</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(@PathVariable <span class="hljs-keyword">int</span> a,@PathVariable <span class="hljs-keyword">int</span> b, Model model)</span></span>&#123;        <span class="hljs-keyword">int</span> res=a+b;        model.addAttribute(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"计算结果为"</span>+res);        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;    &#125;&#125;<span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/c3"</span>)<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-meta">@PostMapping</span>(value = <span class="hljs-string">"/t1/&#123;a&#125;/&#123;b&#125;"</span>)<span class="hljs-comment">//这里就限制了请求的方式</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">(@PathVariable <span class="hljs-keyword">int</span> a,@PathVariable <span class="hljs-keyword">int</span> b, Model model)</span></span>&#123;        <span class="hljs-keyword">int</span> res=a+b;        model.addAttribute(<span class="hljs-string">"msg"</span>,<span class="hljs-string">"计算结果为"</span>+res);        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;    &#125;&#125;</code></pre><p>@Controller</p><p>作用：将该类交给IOC容器来管理（结合springmvc.xml的自动扫描配置使用），成为一个控制器，可以接受客户端请求</p><p>被这个注解的类中所有方法，如果返回值是String类型，并且由具体页面可以跳转，那么就会被视图解析器解析</p><p>@RestController</p><p>作用：该控制器会直接将业务方法的返回值响应给客户端，不进行视图解析</p><p>@RequestParam</p><p>作用：在形参列表中添加该注解，可以完成请求参数与业务方法形参的映射</p><p>@ResponseBody</p><p>作用：直接返回该类型值给客户端，如果不加，SpringMVC会将该方法传递给DispatcherServlet，再由DispatcherServlet调用ViewResolver对返回值进行解析，映射到JSP资源</p><p>数据绑定：直接获取客户端HTTP请求中的参数，将参数映射到业务方法的形参中，该工作由HandleAdapter完成</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>常用依赖</p><blockquote><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>       <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet.jsp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsp-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre></blockquote><p>spring配置文件</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">"http://www.springframework.org/schema/p"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span><span class="hljs-comment">&lt;!--处理器映射器--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span><span class="hljs-comment">&lt;!--处理器适配器--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span><span class="hljs-comment">&lt;!--视图解析器--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"InternalResourceViewResolver"</span>&gt;</span><span class="hljs-comment">&lt;!--       前缀--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span>/&gt;</span><span class="hljs-comment">&lt;!--        后缀--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><p>注解版配置文件</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">"http://www.springframework.org/schema/context"</span></span><span class="hljs-tag">       <span class="hljs-attr">xmlns:mvc</span>=<span class="hljs-string">"http://www.springframework.org/schema/mvc"</span></span><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/beans</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/context</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span><span class="hljs-tag"><span class="hljs-string">        http://www.springframework.org/schema/mvc</span></span><span class="hljs-tag"><span class="hljs-string">        https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span><span class="hljs-comment">&lt;!--     自动扫描包，让指定包下的注解生效，由IOC容器统一管理--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"com.guo.controller"</span>/&gt;</span><span class="hljs-comment">&lt;!--    让SpringMVC不再处理静态资源，css/js/html--&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">mvc:default-servlet-handler</span>/&gt;</span><span class="hljs-comment">&lt;!--     支持mvc注解驱动，在spring中采用@RequestMapping注解来完成映射关系，要想使@RequestMaping生效，必须向上下文</span><span class="hljs-comment">    注册DefaultAnnotaionHandlerMapping和一个AnnotationMethodHandlerAdapter实例</span><span class="hljs-comment">    这两个实例方法分别再类级别和方法级别处理，而annotation-driven配置帮助我们自动完成上述两个实例的注入--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>/&gt;</span><span class="hljs-comment">&lt;!--    视图解析器--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span><span class="hljs-tag">    <span class="hljs-attr">id</span>=<span class="hljs-string">"internalResourceViewResolver"</span>&gt;</span><span class="hljs-comment">&lt;!--        前缀--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"prefix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"/WEB-INF/jsp/"</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"suffix"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">".jsp"</span>/&gt;</span><span class="hljs-comment">&lt;!--    后缀--&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre><p>web.xml配置文件</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">"4.0"</span>&gt;</span><span class="hljs-comment">&lt;!--    配置DispatcherServlet--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><span class="hljs-comment">&lt;!--    绑定spring配置文件--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>springmvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre><p>导入Json</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.68<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.11.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>Spring：<a href="https://docs.spring.io/spring/docs/4.3.24.RELEASE/spring-framework-reference/html/mvc.html" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/4.3.24.RELEASE/spring-framework-reference/html/mvc.html</a></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法总结</title>
    <link href="/2020/06/11/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2020/06/11/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="排序算法总结"><a href="#排序算法总结" class="headerlink" title="排序算法总结"></a>排序算法总结</h1><p>各个算法的时间和空间复杂度如下图所示：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200611124222.png" srcset="/img/loading.gif" alt="image-20200611124218763"></p><p>选择排序：最稳定的排序算法，无论什么情况时间复杂度否是O(n^2)</p><p>插入排序：采用in-place内部排序，空间复杂度为O(1)</p><p>归并排序：稳定的排序算法，分治思想的典型应用，先使子序列有序，再将两个子序列合并成有序序列</p><p>快速排序：不稳定</p><p>堆排序：利用数据结构堆设计的排序算法</p><p>计数排序：稳定排序算法，不是基于比较的排序算法，将数组转换成键值对的形式存储在额外的数组空间</p><p>桶排序：稳定，桶的划分很重要</p><p>基数排序：稳定，按照数字位上的数排序。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基数排序</title>
    <link href="/2020/06/11/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    <url>/2020/06/11/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><p>基数排序是桶排序的升级版把数组中每一个数字，都分成不同位，先比较数字不同位的大小，先按照个位大小排序，再按照十位大小排序….一直到最高位，最高位的排序结果就是最终的排序结果，具体见下图，图片来自@sky。</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200611122731.png" srcset="/img/loading.gif" alt="image-20200611122725122"></p><p>Java代码如下：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buicketSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> maxExp=getExp(nums);    <span class="hljs-keyword">int</span> len=nums.length;    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; lists=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++) lists.add(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;());<span class="hljs-comment">//因为是十进制，所以有0~9，十个桶</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=maxExp;i++)    &#123;        <span class="hljs-comment">//1234,假如想得到百位的2，应该是1234%1000=234,234/100=2，所以应该先取模，再相除，最终就知道了值</span>        <span class="hljs-keyword">double</span> exp1=Math.pow(<span class="hljs-number">10</span>, i);        <span class="hljs-keyword">double</span> exp2=Math.pow(<span class="hljs-number">10</span>,i-<span class="hljs-number">1</span>);        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;len;j++)<span class="hljs-comment">//先按照位添加到指定数组中</span>        &#123;            <span class="hljs-keyword">int</span> index=(<span class="hljs-keyword">int</span>)(nums[j]%exp1/exp2);<span class="hljs-comment">//算出这数字nums[j]的某一位的值，来决定添加到哪一个桶上</span>            lists.get(index).add(nums[j]);<span class="hljs-comment">//添加到指定桶</span>        &#125;        <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<span class="hljs-comment">//下标，按照位排好序的结果要写回原数组</span>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">10</span>;j++)<span class="hljs-comment">//遍历list中的每一个数组，将其写回到原数组中去</span>        &#123;            <span class="hljs-keyword">while</span> (lists.get(j).size()&gt;<span class="hljs-number">0</span>)            &#123;                ArrayList&lt;Integer&gt; temp=lists.get(j);                nums[k++]=temp.get(<span class="hljs-number">0</span>);<span class="hljs-comment">//把按照某一位排序的结果写回到数组</span>                temp.remove(<span class="hljs-number">0</span>);            &#125;        &#125;    &#125;&#125;</code></pre><p>用处：主要用于处理数字较多的情况，比如手机号排序。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>桶排序</title>
    <link href="/2020/06/11/%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    <url>/2020/06/11/%E6%A1%B6%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><p>桶排序是一种计数排序的升级版，如果把每一个数都看成是一个桶的话，那么桶排序就是计数排序，简单来说就是生成若干个桶，每一个桶存放指定范围内的数据，如数组范围是0<del>100，有十个桶，每一个桶的范围分别是0</del>10,10~20，….等，通过把数据分到桶中，再对桶中数据进行排序，然后再依次从桶中取出数据，即为最终排好序的数据。桶排序需要尽量保证元素分散均匀，否则当所有数据集中在同一个桶中时，桶排序失效</p><p>注：桶之间也是有序的，即后一个桶的最小值是大于前一个桶的最大值的。</p><p>Java代码如下</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">buicketSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> min=nums[<span class="hljs-number">0</span>];    <span class="hljs-keyword">int</span> max=nums[<span class="hljs-number">0</span>];    <span class="hljs-keyword">int</span> len=nums.length;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)    &#123;        <span class="hljs-keyword">if</span>(min&gt;nums[i]) min=nums[i];        <span class="hljs-keyword">if</span> (max&lt;nums[i]) max=nums[i];    &#125;    <span class="hljs-keyword">int</span> buicketNum=(max-min)/len+<span class="hljs-number">1</span>;<span class="hljs-comment">//确定桶的个数</span>    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; buicket=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;buicketNum;i++)    &#123;        buicket.add(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;());    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)        buicket.get((i-min)/len).add(nums[i]);<span class="hljs-comment">//按照元素的值来放到指定的桶内</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;buicketNum;i++)        Collections.sort(buicket.get(i));<span class="hljs-comment">//每一个桶内的排序方式任意</span>    <span class="hljs-keyword">int</span> index=<span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;buicketNum;i++)<span class="hljs-comment">//遍历桶，后一个桶内的最小值是大于前一个桶内的最大值的。</span>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;buicket.get(i).size();i++)            nums[index++]= buicket.get(i).get(j);&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计数排序</title>
    <link href="/2020/06/11/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    <url>/2020/06/11/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><p>计数排序是通过数组中元素出现的次数来计数的，先找到数组中的最大值max，然后建立一个长度为max+1的数组count，对原数组nums中的数字出现的次数遍历，最后再遍历count数组，如果count[i]值不为空，说明nums中有这个值，输出回原数组nums，遍历完count数组，即得到了nums数组排序后的结果</p><p>代码如下</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">countSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<span class="hljs-comment">//记录数组最大值</span>    <span class="hljs-keyword">int</span> len=nums.length;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)    &#123;        <span class="hljs-keyword">if</span>(res&lt;nums[i]) res=nums[i];<span class="hljs-comment">//找到数组最大值</span>    &#125;    <span class="hljs-keyword">int</span>[] count=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[res+<span class="hljs-number">1</span>];<span class="hljs-comment">//建立长度为res+1的计数数组</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++) count[nums[i]]++;<span class="hljs-comment">//计算nums[i]出现的次数</span>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;res;i++)<span class="hljs-comment">//遍历count数组</span>    &#123;        <span class="hljs-keyword">while</span> (count[i]&gt;<span class="hljs-number">0</span>)<span class="hljs-comment">//如果数组大于0，说明nums数组中有i这个值</span>        &#123;            nums[k++]=i;<span class="hljs-comment">//将这个值写会到数组中</span>            count[i]--;<span class="hljs-comment">//i这个值出现次数-1</span>        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span>(i&gt;=nums.length) <span class="hljs-keyword">return</span>;    <span class="hljs-keyword">int</span> temp=nums[i];    nums[i]=nums[j];    nums[j]=temp;&#125;</code></pre><p>优化：</p><p>容易发现count数组小于下标nums中最小值的空间都被浪费了，是不可能存在值的，所以可以建立一个长度为Max-min+1数组</p><p>代码如下：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">countSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> max=nums[<span class="hljs-number">0</span>];    <span class="hljs-keyword">int</span> min=nums[<span class="hljs-number">0</span>];    <span class="hljs-keyword">int</span> len=nums.length;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)    &#123;        <span class="hljs-keyword">if</span>(max&lt;nums[i]) max=nums[i];        <span class="hljs-keyword">if</span>(min&gt;nums[i]) min=nums[i];    &#125;    <span class="hljs-keyword">int</span>[] count=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[max-min+<span class="hljs-number">1</span>];<span class="hljs-comment">//优化空间</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++) count[nums[i]-min]++;<span class="hljs-comment">//优化代码</span>    <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;max-min+<span class="hljs-number">1</span>;i++)    &#123;        <span class="hljs-keyword">while</span> (count[i]&gt;<span class="hljs-number">0</span>)        &#123;            nums[k++]=i+min;<span class="hljs-comment">//优化代码</span>            count[i]--;        &#125;    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span>(i&gt;=nums.length) <span class="hljs-keyword">return</span>;    <span class="hljs-keyword">int</span> temp=nums[i];    nums[i]=nums[j];    nums[j]=temp;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>堆排序</title>
    <link href="/2020/06/11/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <url>/2020/06/11/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><p>堆是一颗完全二叉树，即除了最后一层，其余每一层的左右结点都被填满，且最后一层叶子节点从左到右依次填充</p><p>大根堆：根节点的值大于左右结点的值(不要求左右节点的相对大小，即左节点一定要大于右节点或者右节点一定要大于左节点)</p><p>小根堆：根节点的值小于左右结点的值</p><p>下面讲解大根堆的堆排序</p><p>堆排序是通过维护一个大根堆，来使得堆顶元素总是为最大值，交换堆顶元素和最后一个结点元素，这样最大值就跑到了数组最后，然后继续维护剩余元素为一个大根堆，再交换堆顶元素和倒数第二个元素，以此类推，这样不断交换最大值，最终实现了排序。</p><p>注意：数组下标在堆中的对应关系：因为堆是一颗完全二叉树，所以下标为i的根节点，左节点的下标为<code>i*2+1</code>，右节点下标为<code>i*2+2</code></p><p>代码如下：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">heapify</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] heap, <span class="hljs-keyword">int</span> size, <span class="hljs-keyword">int</span> i)</span><span class="hljs-comment">//维护下标为i的结点，使得该节点值大于左右子节点的值</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> max_index=i;<span class="hljs-comment">//下标为i的结点</span>    <span class="hljs-keyword">int</span> left=i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;<span class="hljs-comment">//i结点的左节点</span>    <span class="hljs-keyword">int</span> right=i*<span class="hljs-number">2</span>+<span class="hljs-number">2</span>;<span class="hljs-comment">//i节点的右节点</span>    <span class="hljs-keyword">if</span>(left&lt;size &amp;&amp; heap[left]&gt;heap[max_index]) max_index=left;<span class="hljs-comment">//记录最大值的下标</span>    <span class="hljs-keyword">if</span>(right &lt;size &amp;&amp; heap[right]&gt;heap[max_index]) max_index=right;    <span class="hljs-keyword">if</span>(max_index!=i)<span class="hljs-comment">//如果下标i的值小于左右节点中的最大值</span>    &#123;        swap(heap,max_index,i);<span class="hljs-comment">//交换堆顶元素和左右节点中的最大值</span>        heapify(heap,size,max_index);<span class="hljs-comment">//下标为i的结点被交换下来，继续维护这个结点，使得这个结点为大根堆</span>    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">heapSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] heap, <span class="hljs-keyword">int</span> size)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=size/<span class="hljs-number">2</span>-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)    &#123;        heapify(heap,size,i);<span class="hljs-comment">//维护每一个非叶子节点</span>    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=size-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)    &#123;        swap(heap,<span class="hljs-number">0</span>,i);<span class="hljs-comment">//上面已经建好一个大根堆，所以堆顶元素为最大值，把最大值放到数组最后面</span>        heapify(heap,i,<span class="hljs-number">0</span>);<span class="hljs-comment">//继续维护，数组此时长度减一</span>    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span>(i&gt;=nums.length) <span class="hljs-keyword">return</span>;    <span class="hljs-keyword">int</span> temp=nums[i];    nums[i]=nums[j];    nums[j]=temp;&#125;</code></pre><p>小根堆代码如下：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">heapify</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] heap, <span class="hljs-keyword">int</span> size, <span class="hljs-keyword">int</span> i)</span><span class="hljs-comment">//维护下标为i的结点，使得该节点值小于左右子节点的值</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> min_index=i;    <span class="hljs-keyword">int</span> left=i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>;    <span class="hljs-keyword">int</span> right=i*<span class="hljs-number">2</span>+<span class="hljs-number">2</span>;    <span class="hljs-keyword">if</span>(left&lt;size &amp;&amp; heap[left]&lt;heap[min_index]) min_index=left;<span class="hljs-comment">//只需要heap[left]&gt;heap[min_index]改成heap[left]&lt;heap[min_index]即可</span>    <span class="hljs-keyword">if</span>(right &lt;size &amp;&amp; heap[right]&lt;heap[min_index]) min_index=right;<span class="hljs-comment">//同上</span>    <span class="hljs-keyword">if</span>(max_index!=i)    &#123;        swap(heap,min_index,i);        heapify(heap,size,min_index);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">heapSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] heap, <span class="hljs-keyword">int</span> size)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=size/<span class="hljs-number">2</span>-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)    &#123;        heapify(heap,size,i);    &#125;    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=size-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;i--)    &#123;        swap(heap,<span class="hljs-number">0</span>,i);        heapify(heap,i,<span class="hljs-number">0</span>);    &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span>(i&gt;=nums.length) <span class="hljs-keyword">return</span>;    <span class="hljs-keyword">int</span> temp=nums[i];    nums[i]=nums[j];    nums[j]=temp;&#125;</code></pre><p>参考资料：</p><p>图解排序算法：<a href="https://www.cnblogs.com/chengxiao/p/6129630.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengxiao/p/6129630.html</a></p><p>排序算法总结：<a href="https://www.acwing.com/blog/content/2064/" target="_blank" rel="noopener">https://www.acwing.com/blog/content/2064/</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>归并排序</title>
    <link href="/2020/06/10/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <url>/2020/06/10/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>归并排序先把数组分成两半，每一半再递归进行平分，当只有一个元素时，递归结束。然后两两比较值，合并数组，进行排序。</p><p>代码如下：</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> q[], <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span>(l&gt;=r) <span class="hljs-keyword">return</span>;    <span class="hljs-keyword">int</span> mid=l+r&gt;&gt;<span class="hljs-number">1</span>;<span class="hljs-comment">//找到数组中点</span>    merge_sort(q,l,mid);<span class="hljs-comment">//递归左半部分</span>    merge_sort(q,mid+<span class="hljs-number">1</span>,r);<span class="hljs-comment">//递归右半部分</span>    <span class="hljs-keyword">int</span> i=l,j=mid+<span class="hljs-number">1</span>;    <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span>(i &lt;=mid &amp;&amp; j&lt;=r)<span class="hljs-comment">//递归结束后，开始左右两部分的值，进行排序</span>    &#123;        <span class="hljs-keyword">if</span>(q[i]&lt;q[j]) temp[k++]=q[i++];<span class="hljs-comment">//temp数组用来继续排序结果</span>        <span class="hljs-keyword">else</span> temp[k++]=q[j++];    &#125;    <span class="hljs-keyword">while</span>(i&lt;=mid) temp[k++]=q[i++];<span class="hljs-comment">//如果左半部分还有值</span>    <span class="hljs-keyword">while</span>(j&lt;=r) temp[k++]=q[j++];<span class="hljs-comment">//如果右半部分还有值</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> w=l,k=<span class="hljs-number">0</span>;w&lt;=r;w++,k++) q[w]=temp[k];<span class="hljs-comment">//将temp记录的排好序后的元素写回到原数组</span>&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>快速排序</title>
    <link href="/2020/06/10/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <url>/2020/06/10/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快排是从数组中选一个锚点privot，把数组按照锚点分成小于锚点的值和大于锚点的值两部分，然后再递归求解这两部分</p><p>下面这种解法来自@Diamondz </p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-comment">//if(i&gt;=nums.length) return;</span>    <span class="hljs-keyword">int</span> temp=nums[i];    nums[i]=nums[j];    nums[j]=temp;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span>(left&gt;=right) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//如果区间长度为1，则返回</span>    <span class="hljs-keyword">int</span> privot=nums[left];<span class="hljs-comment">//选定锚点</span>    <span class="hljs-keyword">int</span> j=left;<span class="hljs-comment">//j表示锚点值privot在数组中排第几</span>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=left+<span class="hljs-number">1</span>;i&lt;=right;i++)    &#123;        <span class="hljs-keyword">if</span>(nums[i]&lt;privot)<span class="hljs-comment">//如果有值小于privot</span>        &#123;            j++;<span class="hljs-comment">//那么就让privot的排名上升一位</span>            swap(nums,j,i);<span class="hljs-comment">//交换的目的：把小于privot的值都放到左边</span>        &#125;    &#125;    <span class="hljs-comment">//遍历完区间[left,right]后可以得到，privot在数组中排序为j,所以交换锚点的位置，从left到j</span>    swap(nums,left,j);<span class="hljs-comment">//遍历完毕后，把锚点和j位置交换一下，j位置表示锚点privot在这个数组中的排序</span>    quickSort(nums,left,j-<span class="hljs-number">1</span>);    quickSort(nums,j+<span class="hljs-number">1</span>,right);&#125;</code></pre><p>上面那种写法，最差情况下是n方，所以需要修改基准位置</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span> (left&gt;=right) <span class="hljs-keyword">return</span>;    <span class="hljs-keyword">int</span> priot=nums[left+right&gt;&gt;<span class="hljs-number">1</span>];    <span class="hljs-keyword">int</span> i=left,j=right;    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>)    &#123;        <span class="hljs-keyword">while</span> (nums[i]&lt;priot) i++;        <span class="hljs-keyword">while</span> (nums[j]&gt;priot) j--;        <span class="hljs-keyword">if</span> (i&gt;=j) <span class="hljs-keyword">break</span>;        swap(nums,i,j);    &#125;    quickSort(nums,left,j);    quickSort(nums,j+<span class="hljs-number">1</span>,right);&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>插入排序</title>
    <link href="/2020/06/10/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <url>/2020/06/10/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>把第一个元素看成是一个有序序列，然后后面的元素看成是无序序列，从这个无序序列中依次取出元素，<strong>选择</strong>应该插到前面有序序列的哪个位置</p><p><strong>注意</strong>：插入排序，不是一次就直接找到了位置，插入，而是要一个一个比较值，交换值，最后才可以找到正确位置。</p><p><strong>思路</strong>：对于无序序列的值A，在有序序列中找到一个比他的大的值就和他交换，最后停留的位置就是值A此时在有序序列中的位置。</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">choseSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> len=nums.length;        <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> index=-<span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)<span class="hljs-comment">//无序数组的下标</span>        &#123;            res=nums[i];            index=i;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i-<span class="hljs-number">1</span>;j&gt;=<span class="hljs-number">0</span>;j--)<span class="hljs-comment">//从后往前扫描有序数组</span>            &#123;                <span class="hljs-keyword">if</span>(nums[i]&lt;nums[j])<span class="hljs-comment">//如果无序数组的值，小于有序数组的值，说明就找到了插入位置</span>                &#123;                    swap(nums,i,j);                &#125;                <span class="hljs-keyword">else</span><span class="hljs-comment">//如果无序数组的值，大于有序数组，说明此时已经到了正确位置</span>                    <span class="hljs-keyword">break</span>;            &#125;        &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span><span class="hljs-function">     </span>&#123;         <span class="hljs-keyword">int</span> temp=nums[i];         nums[i]=nums[j];         nums[j]=temp;     &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>选择排序</title>
    <link href="/2020/06/10/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <url>/2020/06/10/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>选择排序就是选择最大值，放到最后/最前面。</p><p>在未排序的序列中找打最大值，然后将其放到最后</p><p>再从剩余的未排序序列中找到次大值，放到倒数第二个位置</p><p>依次类推，直到结束</p><p>Java代码如下</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">selectSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> len=nums.length;        <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;        <span class="hljs-keyword">int</span> index=-<span class="hljs-number">1</span>;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len-<span class="hljs-number">1</span>;i++)<span class="hljs-comment">//剩余未排序数组的长度</span>        &#123;            res=nums[<span class="hljs-number">0</span>];            index=<span class="hljs-number">0</span>;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;len-i;j++)<span class="hljs-comment">//在剩余未排序序列中，选出剩余未排序序列的最大值</span>            &#123;                <span class="hljs-keyword">if</span>(nums[j]&gt;res)                &#123;                    res=nums[j];                    index=j;                &#125;            &#125;            swap(nums,index,len-<span class="hljs-number">1</span>-i);        &#125;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span><span class="hljs-function">     </span>&#123;         <span class="hljs-keyword">int</span> temp=nums[i];         nums[i]=nums[j];         nums[j]=temp;     &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>冒泡排序</title>
    <link href="/2020/06/10/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <url>/2020/06/10/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>冒泡排序：给定数组nums，比较元素nums[i]和nums[i+1],如果nums[i+1] &lt; nums[i]就交换两者，从第一个元素开始，两两比较，这样一轮下来，最后一个元素一定是最大值，第二轮再从第一个元素开始，倒数第二个元素截止，第二轮结束后，倒数第二个元素一定是这一轮中的最大值，这样不断的把最大值选出来，放到最后的排序算法就是冒泡排序</p><p>java代码如下</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bubble_sort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">int</span> len=nums.length;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;len;len--)<span class="hljs-comment">//剩余未排序数组的长度</span>        &#123;            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;len-<span class="hljs-number">1</span>-i;j++)<span class="hljs-comment">//可以进行比较的数组下标范围</span>            &#123;                <span class="hljs-keyword">if</span>(nums[j+<span class="hljs-number">1</span>]&lt;nums[j])                    swap(nums,j,j+<span class="hljs-number">1</span>);            &#125;        &#125;&#125; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span></span><span class="hljs-function">     </span>&#123;         <span class="hljs-keyword">int</span> temp=nums[i];         nums[i]=nums[j];         nums[j]=temp;     &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>排序算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode114-二叉树展开为链表</title>
    <link href="/2020/06/10/LeetCode114-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/06/10/LeetCode114-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode114-二叉树展开为链表"><a href="#LeetCode114-二叉树展开为链表" class="headerlink" title="LeetCode114-二叉树展开为链表"></a>LeetCode114-二叉树展开为链表</h1><p>思路：二叉树转成链表，这个链表要求把左节点放到根节点后面，右节点的前面，转换过程先把右子树转成链表，再转左子树。</p><p>对于每一个节点的转换，需要记录上一次操作返回的根节点，因为当前结点的下一个结点就是上次的根节点。</p><p>代码如下：</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><span class="hljs-comment"> *         this.val = val;</span><span class="hljs-comment"> *         this.left = left;</span><span class="hljs-comment"> *         this.right = right;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    TreeNode prev=<span class="hljs-keyword">null</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">flatten</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span>;        flatten(root.right);        flatten(root.left);        root.right=prev;        root.left=<span class="hljs-keyword">null</span>;        prev=root;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode617-合并二叉树</title>
    <link href="/2020/06/10/LeetCode617-%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2020/06/10/LeetCode617-%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode617-合并二叉树"><a href="#LeetCode617-合并二叉树" class="headerlink" title="LeetCode617 合并二叉树"></a>LeetCode617 合并二叉树</h1><p>思路：给定两颗二叉树A和B，在A的基础上合并成一颗新树，遍历A的每一个节点。如果A和B的节点都为空，就返回空，如果A，B只有一个不为空，返回不会空的那个结点，如果两者都不为空，返回两个节点之和</p><p>代码</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><span class="hljs-comment"> *         this.val = val;</span><span class="hljs-comment"> *         this.left = left;</span><span class="hljs-comment"> *         this.right = right;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">mergeTrees</span><span class="hljs-params">(TreeNode t1, TreeNode t2)</span> </span>&#123;                <span class="hljs-keyword">if</span>(t1==<span class="hljs-keyword">null</span> &amp;&amp; t2==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t1==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> t2;        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t2==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> t1;        t1.val+=t2.val;        t1.left=mergeTrees(t1.left,t2.left);        t1.right=mergeTrees(t1.right,t2.right);        <span class="hljs-keyword">return</span> t1;    &#125;   &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode104-求二叉树的最大高度</title>
    <link href="/2020/06/10/LeetCode104-%E6%B1%82%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E9%AB%98%E5%BA%A6/"/>
    <url>/2020/06/10/LeetCode104-%E6%B1%82%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E9%AB%98%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode104-求二叉树的最大高度"><a href="#LeetCode104-求二叉树的最大高度" class="headerlink" title="LeetCode104 求二叉树的最大高度"></a>LeetCode104 求二叉树的最大高度</h1><p>思路：二叉树的最大高度=max（左子树的最大高度，右子树的最大高度）+1，所以递归求解</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;        <span class="hljs-keyword">return</span> dfs(root);    &#125;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode node)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(node==<span class="hljs-keyword">null</span>)        &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">int</span> left=dfs(node.left);        <span class="hljs-keyword">int</span> right=dfs(node.right);        <span class="hljs-keyword">return</span> Math.max(left,right)+<span class="hljs-number">1</span>;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode226-翻转二叉树</title>
    <link href="/2020/06/10/LeetCode226-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2020/06/10/LeetCode226-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode226-翻转二叉树"><a href="#LeetCode226-翻转二叉树" class="headerlink" title="LeetCode226 翻转二叉树"></a>LeetCode226 翻转二叉树</h1><p>思路：把节点放到队列，先把右子树放到节点，再把左子树放到节点，然后再生成二叉树</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><span class="hljs-comment"> *         this.val = val;</span><span class="hljs-comment"> *         this.left = left;</span><span class="hljs-comment"> *         this.right = right;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">invertTree</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;        Queue&lt;TreeNode&gt; queue=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        queue.offer(root);<span class="hljs-comment">//把根节点压入队列</span>        <span class="hljs-keyword">while</span>(!queue.isEmpty())        &#123;            TreeNode node=queue.poll();<span class="hljs-comment">//弹出队列的队首元素</span>            <span class="hljs-keyword">if</span>(node!=<span class="hljs-keyword">null</span>)<span class="hljs-comment">//依次遍历每一个节点</span>            &#123;                TreeNode left=node.left;<span class="hljs-comment">//记录节点的左节点</span>                TreeNode right=node.right;<span class="hljs-comment">//记录节点的右节点</span>                queue.offer(right);<span class="hljs-comment">//先压入右节点</span>                queue.offer(left);<span class="hljs-comment">//再压入左节点</span>                node.left=right;<span class="hljs-comment">//把节点的左右指向交换</span>                node.right=left;            &#125;        &#125;        <span class="hljs-keyword">return</span> root;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode654-最大二叉树</title>
    <link href="/2020/06/10/LeetCode654-%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2020/06/10/LeetCode654-%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode654-最大二叉树"><a href="#LeetCode654-最大二叉树" class="headerlink" title="LeetCode654 最大二叉树"></a>LeetCode654 最大二叉树</h1><p>题目：</p><pre><code class="hljs java">给定一个不含重复元素的整数数组。一个以此数组构建的最大二叉树定义如下：二叉树的根是数组中的最大元素。左子树是通过数组中最大值左边部分构造出的最大二叉树。右子树是通过数组中最大值右边部分构造出的最大二叉树。通过给定的数组构建最大二叉树，并且输出这个树的根节点。</code></pre><p>思路：分治递归，先找到数组中元素的最大值，然后分成左右两部分，左边是左子树，右边是右子树，对于每一个子树，再进行分治递归</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><span class="hljs-comment"> *         this.val = val;</span><span class="hljs-comment"> *         this.left = left;</span><span class="hljs-comment"> *         this.right = right;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">constructMaximumBinaryTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;        <span class="hljs-keyword">return</span> dfs(nums,<span class="hljs-number">0</span>,nums.length-<span class="hljs-number">1</span>);            &#125;    <span class="hljs-function">TreeNode <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(end&lt;start) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">int</span> index=start;        <span class="hljs-keyword">int</span> maxValue=nums[index];        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=start+<span class="hljs-number">1</span>;i&lt;=end;i++)        &#123;            <span class="hljs-keyword">if</span>(nums[i]&gt;maxValue)            &#123;                index=i;                maxValue=nums[index];            &#125;        &#125;        TreeNode node=<span class="hljs-keyword">new</span> TreeNode(nums[index]);        node.left=dfs(nums,start,index-<span class="hljs-number">1</span>);        node.right=dfs(nums,index+<span class="hljs-number">1</span>,end);        <span class="hljs-keyword">return</span> node;    &#125;        &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode101-判断二叉树是否对称</title>
    <link href="/2020/06/10/LeetCode101-%E5%88%A4%E6%96%AD%E4%BA%8C%E5%8F%89%E6%A0%91%E6%98%AF%E5%90%A6%E5%AF%B9%E7%A7%B0/"/>
    <url>/2020/06/10/LeetCode101-%E5%88%A4%E6%96%AD%E4%BA%8C%E5%8F%89%E6%A0%91%E6%98%AF%E5%90%A6%E5%AF%B9%E7%A7%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode101-判断二叉树是否对称"><a href="#LeetCode101-判断二叉树是否对称" class="headerlink" title="LeetCode101 判断二叉树是否对称"></a>LeetCode101 判断二叉树是否对称</h1><p>思路：二叉树对称指的是，要求每一个节点Node的左右子树要对称，而且左右子树的左右子树也要对称，即</p><pre><code class="hljs java">Node.left=Node.right;left.left=right.left;left.right=right.left;具体看下图</code></pre><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200610120726.png" srcset="/img/loading.gif" alt="image-20200610120720720"></p><p>递归求解每一个节点，如果有一个节点不满足上述条件，即返回true，这个二叉树不是对称二叉树</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSymmetric</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        <span class="hljs-keyword">return</span> dfs(root.left,root.right);    &#125;    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode left, TreeNode right)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(left==<span class="hljs-keyword">null</span> &amp;&amp; right==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;        <span class="hljs-keyword">if</span>(left ==<span class="hljs-keyword">null</span> || right ==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        <span class="hljs-keyword">if</span>(left.val!=right.val) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;        <span class="hljs-keyword">return</span> dfs(left.left,right.right) &amp;&amp; dfs(left.right,right.left);    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode102-二叉树层序遍历</title>
    <link href="/2020/06/10/LeetCode102-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2020/06/10/LeetCode102-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-二叉树层序遍历"><a href="#LeetCode-二叉树层序遍历" class="headerlink" title="LeetCode 二叉树层序遍历"></a>LeetCode 二叉树层序遍历</h1><p>思路：用队列实现，把每一个节点都放到队列中去，遍历队列中每一个节点，把每一个节点的左右子树都加入到队列，然后再把这个结点出队，依次遍历直到队列为空</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><span class="hljs-comment"> *         this.val = val;</span><span class="hljs-comment"> *         this.left = left;</span><span class="hljs-comment"> *         this.right = right;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) &#123;        List&lt;List&lt;Integer&gt;&gt; res=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> res;        Queue&lt;TreeNode&gt; queue=<span class="hljs-keyword">new</span> LinkedList();        queue.offer(root);        <span class="hljs-keyword">while</span>(!queue.isEmpty())        &#123;            <span class="hljs-keyword">int</span> size=queue.size();            List&lt;Integer&gt; list=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)            &#123;                TreeNode node=queue.poll();                <span class="hljs-keyword">if</span>(node.left!=<span class="hljs-keyword">null</span>) queue.offer(node.left);                <span class="hljs-keyword">if</span>(node.right!=<span class="hljs-keyword">null</span>) queue.offer(node.right);                list.add(node.val);            &#125;            res.add(<span class="hljs-number">0</span>,list);        &#125;                <span class="hljs-keyword">return</span> res;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode144-二叉树前序遍历</title>
    <link href="/2020/06/10/LeetCode144-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2020/06/10/LeetCode144-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode144-二叉树前序遍历"><a href="#LeetCode144-二叉树前序遍历" class="headerlink" title="LeetCode144 二叉树前序遍历"></a>LeetCode144 二叉树前序遍历</h1><h2 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h2><p>递归遍历有模板，简单套用即可</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><span class="hljs-comment"> *         this.val = val;</span><span class="hljs-comment"> *         this.left = left;</span><span class="hljs-comment"> *         this.right = right;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    List&lt;Integer&gt; list;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;        list=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        dfs(root);        <span class="hljs-keyword">return</span> list;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode node)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(node==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span>;        list.add(node.val);        dfs(node.left);        dfs(node.right);    &#125;&#125;</code></pre><h2 id="非递归遍历"><a href="#非递归遍历" class="headerlink" title="非递归遍历"></a>非递归遍历</h2><p>前序遍历是：根左右，所以使用栈来实现，先放入右节点，再放入左节点，这样可以保证根节点的右节点是在左节点遍历完之后才会遍历</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><span class="hljs-comment"> *         this.val = val;</span><span class="hljs-comment"> *         this.left = left;</span><span class="hljs-comment"> *         this.right = right;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;        Stack&lt;TreeNode&gt; stack=<span class="hljs-keyword">new</span> Stack&lt;&gt;();<span class="hljs-comment">//使用栈的先进后出的特性</span>        List&lt;Integer&gt; list=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> list;        stack.push(root);        <span class="hljs-keyword">while</span>(!stack.empty())        &#123;            TreeNode temp=stack.pop();            list.add(temp.val);            <span class="hljs-keyword">if</span>(temp.right!=<span class="hljs-keyword">null</span>) stack.push(temp.right);<span class="hljs-comment">//先放入右节点</span>            <span class="hljs-keyword">if</span>(temp.left!=<span class="hljs-keyword">null</span>) stack.push(temp.left);<span class="hljs-comment">//再放入左节点</span>        &#125;        <span class="hljs-keyword">return</span> list;        &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode94-二叉树中序遍历</title>
    <link href="/2020/06/10/LeetCode94-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2020/06/10/LeetCode94-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode94-二叉树中序遍历"><a href="#LeetCode94-二叉树中序遍历" class="headerlink" title="LeetCode94 二叉树中序遍历"></a>LeetCode94 二叉树中序遍历</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><span class="hljs-comment"> *         this.val = val;</span><span class="hljs-comment"> *         this.left = left;</span><span class="hljs-comment"> *         this.right = right;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    List&lt;Integer&gt; list;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;        list=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        dfs(root);        <span class="hljs-keyword">return</span> list;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode node)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(node==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span>;        dfs(node.left);        list.add(node.val);        dfs(node.right);    &#125;        &#125;</code></pre><h2 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h2><p>中序遍历顺序是左根右，用栈辅助实现</p><p>先判断结点是否为空，不为空，说明是根节点，然后压入栈，然后向左节点移动，如果为空，说明左节点为空，那么弹出栈顶元素，此时栈顶元素一定是该节点的根节点，添加根节点值，然后左子树遍历结束，遍历右子树。</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><span class="hljs-comment"> *         this.val = val;</span><span class="hljs-comment"> *         this.left = left;</span><span class="hljs-comment"> *         this.right = right;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;        List&lt;Integer&gt; list=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> list;        Stack&lt;TreeNode&gt; stack=<span class="hljs-keyword">new</span> Stack&lt;&gt;();        <span class="hljs-keyword">while</span>(!stack.empty() || root!=<span class="hljs-keyword">null</span>) <span class="hljs-comment">//如果栈不为空，或者结点不为空，条件就为true</span>        &#123;            <span class="hljs-keyword">if</span>(root!=<span class="hljs-keyword">null</span>)            &#123;                stack.push(root);                root=root.left;            &#125;            <span class="hljs-keyword">else</span>            &#123;                root=stack.pop();                list.add(root.val);                root=root.right;            &#125;        &#125;        <span class="hljs-keyword">return</span> list;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode145-二叉树后序遍历</title>
    <link href="/2020/06/10/LeetCode145-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2020/06/10/LeetCode145-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode145-二叉树后续遍历"><a href="#LeetCode145-二叉树后续遍历" class="headerlink" title="LeetCode145 二叉树后续遍历"></a>LeetCode145 二叉树后续遍历</h1><p>后续遍历的顺序是：左节点–&gt;右节点–&gt;根节点，根节点最后一个遍历，套用一下模板即可</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><span class="hljs-comment"> *         this.val = val;</span><span class="hljs-comment"> *         this.left = left;</span><span class="hljs-comment"> *         this.right = right;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    List&lt;Integer&gt; list;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;        list=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        dfs(root);        <span class="hljs-keyword">return</span> list;    &#125;    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode node)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(node==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span>;        dfs(node.left);        dfs(node.right);        list.add(node.val);    &#125;&#125;</code></pre><h2 id="非递归遍历"><a href="#非递归遍历" class="headerlink" title="非递归遍历"></a>非递归遍历</h2><p>思路有点巧妙，利用了栈+LinkedList的addFirst函数</p><p>使用栈按照根左右的顺序依次放入结点，先放入根节点，再放入左节点和右节点，每次pop出的元素，都插入到list的队首，实现了后序遍历。</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><span class="hljs-comment"> *         this.val = val;</span><span class="hljs-comment"> *         this.left = left;</span><span class="hljs-comment"> *         this.right = right;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;        Stack&lt;TreeNode&gt; stack=<span class="hljs-keyword">new</span> Stack&lt;&gt;();<span class="hljs-comment">//使用栈的先进后出的特性</span>        LinkedList&lt;Integer&gt; list=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> list;        stack.push(root);        <span class="hljs-keyword">while</span>(!stack.empty())        &#123;            TreeNode temp=stack.pop();<span class="hljs-comment">//弹出栈顶元素</span>            list.addFirst(temp.val);<span class="hljs-comment">//向list头插入元素</span>            <span class="hljs-keyword">if</span>(temp.left!=<span class="hljs-keyword">null</span>) stack.push(temp.left);<span class="hljs-comment">//插入左节点</span>            <span class="hljs-keyword">if</span>(temp.right!=<span class="hljs-keyword">null</span>) stack.push(temp.right);<span class="hljs-comment">//插入右节点</span>        &#125;        <span class="hljs-keyword">return</span> list;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树遍历模板</title>
    <link href="/2020/06/10/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E6%A8%A1%E6%9D%BF/"/>
    <url>/2020/06/10/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树遍历模板"><a href="#二叉树遍历模板" class="headerlink" title="二叉树遍历模板"></a>二叉树遍历模板</h1><p>模板来源于@labuladong</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;    <span class="hljs-comment">// 前序遍历</span>    traverse(root.left)    <span class="hljs-comment">// 中序遍历</span>    traverse(root.right)    <span class="hljs-comment">// 后序遍历</span>&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode106-从中序和后序遍历序列中构建二叉树</title>
    <link href="/2020/06/10/LeetCode106-%E4%BB%8E%E4%B8%AD%E5%BA%8F%E5%92%8C%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E4%B8%AD%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2020/06/10/LeetCode106-%E4%BB%8E%E4%B8%AD%E5%BA%8F%E5%92%8C%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E4%B8%AD%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode106-从中序和后序遍历序列中构建二叉树"><a href="#LeetCode106-从中序和后序遍历序列中构建二叉树" class="headerlink" title="LeetCode106 从中序和后序遍历序列中构建二叉树"></a>LeetCode106 从中序和后序遍历序列中构建二叉树</h1><p>先从后序遍历中得到根节点，得到根节点在中序遍历中的位置index，中序遍历序列中index左边的就是左子树，右边的就是右子树，然后递归求解左右子树即可<br><strong>难点</strong>：如何计算下一次后序遍历左子树根节点的位置（后序遍历根节点的下标-中序遍历根节点右边的子节点数量=下一次迭代的后序遍历根节点位置）<br>中序+后序构建二叉树：难点是计算左子树的位置。因为后序根节点的位置-1就是右子树的位置<br>中序+先序构建二叉树：难点是计算右子树的位置，因为先序根节点的位置+1就是左子树的位置。<br>当然这两种情况都要判断边界</p><p>java代码如下：</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><span class="hljs-comment"> *         this.val = val;</span><span class="hljs-comment"> *         this.left = left;</span><span class="hljs-comment"> *         this.right = right;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] inorder, <span class="hljs-keyword">int</span>[] postorder)</span> </span>&#123;        HashMap&lt;Integer,Integer&gt; map=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();        <span class="hljs-keyword">int</span> length=postorder.length;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)        &#123;            map.put(inorder[i],i);        &#125;        <span class="hljs-keyword">return</span> help(inorder,postorder,<span class="hljs-number">0</span>,length-<span class="hljs-number">1</span>,length-<span class="hljs-number">1</span>,map);    &#125;    <span class="hljs-function">TreeNode <span class="hljs-title">help</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] inorder, <span class="hljs-keyword">int</span>[] postorder, <span class="hljs-keyword">int</span> inStart, <span class="hljs-keyword">int</span> inEnd, <span class="hljs-keyword">int</span> postEnd, HashMap&lt;Integer,Integer&gt; map)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(postEnd&lt;<span class="hljs-number">0</span> || inStart&gt;inEnd) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">int</span> index=map.get(postorder[postEnd]);        TreeNode node=<span class="hljs-keyword">new</span> TreeNode(postorder[postEnd]);        node.left=help(inorder,postorder,inStart,index-<span class="hljs-number">1</span>,postEnd-(inEnd-index)-<span class="hljs-number">1</span>,map);        node.right=help(inorder,postorder,index+<span class="hljs-number">1</span>,inEnd,postEnd-<span class="hljs-number">1</span>,map);        <span class="hljs-keyword">return</span> node;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode105-从前序和中序遍历序列中构建二叉树</title>
    <link href="/2020/06/10/LeetCode105-%E4%BB%8E%E5%89%8D%E5%BA%8F%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E4%B8%AD%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2020/06/10/LeetCode105-%E4%BB%8E%E5%89%8D%E5%BA%8F%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E4%B8%AD%E6%9E%84%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode105-从前序和中序遍历中构建二叉树"><a href="#LeetCode105-从前序和中序遍历中构建二叉树" class="headerlink" title="LeetCode105 从前序和中序遍历中构建二叉树"></a>LeetCode105 从前序和中序遍历中构建二叉树</h1><p>前序遍历的顺序是：根结点–&gt;左节点–&gt;右节点</p><p>中序遍历的顺序是：左节点–&gt;根节点–&gt;右节点</p><p>后序遍历的顺序是：左节点–&gt;右节点–&gt;根节点</p><p>构建二叉树的核心是先确定根节点，题目给了前序遍历和中序遍历，想到前序遍历的第一个节点是根节点，所以可以从前序遍历中确认根节点root，然后去中序遍历中找到根节点的位置index，那么在中序遍历index左边的就是左子树，右边的就是右子树，然后再递归求解左右子树，便可成功构建二叉树</p><p>Java代码如下：</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * Definition for a binary tree node.</span><span class="hljs-comment"> * public class TreeNode &#123;</span><span class="hljs-comment"> *     int val;</span><span class="hljs-comment"> *     TreeNode left;</span><span class="hljs-comment"> *     TreeNode right;</span><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><span class="hljs-comment"> *         this.val = val;</span><span class="hljs-comment"> *         this.left = left;</span><span class="hljs-comment"> *         this.right = right;</span><span class="hljs-comment"> *     &#125;</span><span class="hljs-comment"> * &#125;</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] inorder, <span class="hljs-keyword">int</span>[] postorder)</span> </span>&#123;        HashMap&lt;Integer,Integer&gt; map=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();        <span class="hljs-keyword">int</span> length=postorder.length;        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)        &#123;            map.put(inorder[i],i);        &#125;        <span class="hljs-keyword">return</span> help(inorder,postorder,<span class="hljs-number">0</span>,length-<span class="hljs-number">1</span>,length-<span class="hljs-number">1</span>,map);    &#125;    <span class="hljs-function">TreeNode <span class="hljs-title">help</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] inorder, <span class="hljs-keyword">int</span>[] postorder, <span class="hljs-keyword">int</span> inStart, <span class="hljs-keyword">int</span> inEnd, <span class="hljs-keyword">int</span> postEnd, HashMap&lt;Integer,Integer&gt; map)</span></span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(postEnd&lt;<span class="hljs-number">0</span> || inStart&gt;inEnd) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">int</span> index=map.get(postorder[postEnd]);        TreeNode node=<span class="hljs-keyword">new</span> TreeNode(postorder[postEnd]);        node.left=help(inorder,postorder,inStart,index-<span class="hljs-number">1</span>,postEnd-(inEnd-index)-<span class="hljs-number">1</span>,map);        node.right=help(inorder,postorder,index+<span class="hljs-number">1</span>,inEnd,postEnd-<span class="hljs-number">1</span>,map);        <span class="hljs-keyword">return</span> node;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
      <category>二叉树</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring学习-1</title>
    <link href="/2020/06/10/Spring%E5%AD%A6%E4%B9%A0-1/"/>
    <url>/2020/06/10/Spring%E5%AD%A6%E4%B9%A0-1/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring学习心得-01"><a href="#Spring学习心得-01" class="headerlink" title="Spring学习心得-01"></a>Spring学习心得-01</h2><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><p>Spring的核心是IOC和AOP，IOC（Inversion of Control）中文是控制反转。</p><p>了解IOC前要先知道<strong>依赖倒置原则</strong>（Dependency Inversion Principle），即</p><blockquote><p>高层模块不应该依赖底层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象</p></blockquote><p>举例来形容一下什么是依赖倒置原则：假设我们要盖楼，先设计好房间，在设计好楼层，再设计好大楼结构。这里的依赖关系是：大楼依赖楼层、楼层依赖房间。假如业主对房间不满意，我们需要修改房间，那就需要修改楼层，修改完楼层，大楼结构也就需要修改。</p><p>那假如反一下呢？</p><p>我先设计好大楼结构，再去设计楼层，然后去设计房间。如果业主对房间不满意，那我只需要修改房间就可以。这样一来，依赖关系就倒置过来了：房间依赖楼层，楼层依赖大楼。这就是依赖倒置原则，把原本的高层建筑依赖底层建筑“倒置”过来，变成底层建筑依赖高层建筑。高层建筑决定需要什么，底层去实现这样的需求，但是高层并不用管底层是怎么实现的。</p><p>IOC就是采用了依赖注入（<strong>Dependency Injection</strong>）来实现了依赖倒置原则。</p><p><strong>依赖注入</strong></p><blockquote><p>组件之间依赖关系由<strong>容器在运行期决定,</strong>即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台</p></blockquote><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200610103441.png" srcset="/img/loading.gif" alt="image-20200603115013451"></p><blockquote><p><strong>谁依赖于谁：</strong>当然是应用程序依赖于IoC容器，依赖是指容器负责创建Bean并管理Bean的生命周期；（当类与类之间有使用关系时就属于依赖关系）</p><p><strong>为什么需要依赖：</strong>应用程序需要IoC容器来提供对象需要的外部资源；</p><p><strong>谁注入谁：</strong>容器负责注入Bean的依赖资源，依赖资源可以是Bean、外部文件、常量数据等，在Java中都反映为对象，并且由容器负责组装Bean之间的依赖关系；</p><p><strong>此处的依赖是指**</strong>Bean<strong>**之间的依赖关系</strong>，<strong>可以认为是传统类与类之间的“关联”、“聚合”、“组合”关系</strong>。</p><p>为什么要应用依赖注入？</p><p> <strong>动态替换Bean</strong>依赖对象，程序更灵活：替换Bean依赖对象，无需修改源文件：应用依赖注入后，由于可以采用配置文件方式实现，从而能随时动态的替换Bean的依赖对象，无需修改java源文件；</p><p><strong>更好实践面向接口编程，代码更清晰：</strong>在Bean中只需指定依赖对象的接口，接口定义依赖对象完成的功能，通过容器注入依赖实现；</p><p><strong>更好实践优先使用对象组合，而不是类继承：</strong>因为IoC容器采用注入依赖，也就是<strong>组合对象</strong>，从而更好的实践对象组合。</p><p> 对象组合：Bean的功能由几个依赖Bean功能组合而成，组合具有动态性，可以方便的替换掉依赖Bean，从而改变Bean功能，而且增加了代码的复用性，降低了耦合性</p><p>来自参考资料1</p></blockquote><p>所以IOC就是不需要程序员自己去创建和维护对象，把创建对象的权利交给Spring，由Spring来管理维护对象。</p><p>控制反转这个词再细说一下：</p><p>控制：传统的Java开发都是程序员自己去new对象，程序员控制对象的创建，而IOC是由IOC容器去创建对象，由IOC控制对象的创建，IOC控制了外部资源的获取。</p><p>反转：一般的开发是程序员自己去获取依赖对象，而IOC是由容器来查找并注入依赖对象，对象只是被动的接受依赖对象</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200603143635.png" srcset="/img/loading.gif" alt=""></p><p>IOC出现后：</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200603143654.png" srcset="/img/loading.gif" alt="image-20200603143649919"></p><blockquote><p><strong>谁控制谁，控制什么：</strong>传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</p><p><strong>为何是反转，哪些方面反转了：</strong>有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。（来自参考资料1）</p></blockquote><p>IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200603113111.jpg" srcset="/img/loading.gif" alt="img"></p><h4 id="依赖资源注入方式"><a href="#依赖资源注入方式" class="headerlink" title="依赖资源注入方式"></a>依赖资源注入方式</h4><p>依赖：bean对象的创建依赖于容器</p><p>注入：bean对象中的所有属性，由容器来注入</p><p>xml文件的基本约束代码</p><blockquote><pre><code class="hljs xml">&gt;<span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">&gt;</span>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;xsi:schemaLocation="http://www.springframework.org/schema/beans  https://www.springframework.org/schema/beans/spring-beans.xsd"&gt;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"..."</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"..."</span>&gt;</span>   <span class="hljs-comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"..."</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"..."</span>&gt;</span>  <span class="hljs-comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>&gt;<span class="hljs-comment">&lt;!-- more bean definitions go here --&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></blockquote><h5 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h5><p>容器实例化Bean时注入那些依赖，通过在在Bean定义中指定构造器参数进行注入依赖，构造器参数就是依赖。</p><p>注入方式：构造器方式、静态工厂、实例工厂</p><p>构造器注入(代码来自参考资料1)：</p><blockquote><p>1 根据参数索引注入</p><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Hello"</span> /&gt;</span>&gt;索引下标从0开始</code></pre><p>2 根据参数类型注入</p><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"java.lang.String"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Hello"</span> /&gt;</span>&gt;参数类型必须是全限定类名</code></pre><p>3 根据参数名称注入</p><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"age"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"15"</span> /&gt;</span>&gt;name表示需要匹配的参数名字</code></pre><p>使用方式：生成IOC容器，调用容器的getBean(下标/参数类型/参数名称,字节码)</p></blockquote><p>静态工厂注入</p><blockquote><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"byIndex"</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">"全限定类名"</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">"newInstance"</span>&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Hello World!"</span>/&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>/&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"byType"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"全限定类名"</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">"newInstance"</span>&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"java.lang.String"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Hello World!"</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"int"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"2"</span>/&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"byName"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"全限定类名"</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">"newInstance"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"message"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Hello World!"</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"index"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"3"</span>/&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></blockquote><p>实例工厂注入</p><blockquote><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"instanceFactory"</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">"全限定类名"</span>/&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"byIndex"</span>  <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">"instanceFactory"</span>  <span class="hljs-attr">factory-method</span>=<span class="hljs-string">"newInstance"</span>&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Hello World!"</span>/&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"1"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>/&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"byType"</span>  <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">"instanceFactory"</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">"newInstance"</span>&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"java.lang.String"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Hello World!"</span>/&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"int"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"2"</span>/&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"byName"</span>  <span class="hljs-attr">factory-bean</span>=<span class="hljs-string">"instanceFactory"</span> <span class="hljs-attr">factory-method</span>=<span class="hljs-string">"newInstance"</span>&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"message"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Hello World!"</span>/&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"index"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"3"</span>/&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></blockquote><p>注：静态工厂方式和实例工厂方式区别是实例工厂需要创建实例，然后通过实例调用方法返回bean</p><h5 id="setter注入"><a href="#setter注入" class="headerlink" title="setter注入"></a>setter注入</h5><p>setter注入，是通过在通过构造器、静态工厂或实例工厂实例好Bean后，通过调用Bean类的setter方法进行注入依赖，原类中要有getter()和setter()方法</p><p>setter注入方式</p><blockquote><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"XX"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"要注入的值"</span>&gt;</span> 使用property标签，setXX(),name那里填写XX。如setName,那里就写Name&gt;<span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"XX"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"beanid"</span>&gt;</span>：注入引用类型</code></pre><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"bean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"cn.javass.spring.chapter3.HelloImpl4"</span>&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"message"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Hello World!"</span>/&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"index"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></blockquote><p>注入常量</p><blockquote><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"message"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Hello"</span>/&gt;</span></code></pre></blockquote><p>JavaBean本质就是一个POJO类，该类有以下限制：</p><blockquote><p><strong>有公共的无参构造器</strong></p><p><strong>属性为private访问级别</strong></p><p><strong>有getter和setter方法</strong></p></blockquote><h5 id="注入集合、数组和Map"><a href="#注入集合、数组和Map" class="headerlink" title="注入集合、数组和Map"></a>注入集合、数组和Map</h5><p>注入集合（List，Set）</p><blockquote><pre><code class="hljs xml">&gt;<span class="hljs-comment">&lt;!--注入List，使用list标签--&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"listBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"全限定名"</span>&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"values"</span>&gt;</span>  <span class="hljs-comment">&lt;!--根据名称来决定注入类中哪个list--&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">list</span> <span class="hljs-attr">value-type</span>=<span class="hljs-string">"java.lang.String"</span>&gt;</span>  <span class="hljs-comment">&lt;!--value-type是list集合内的元素类型，默认是String，格式是全限定名--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><pre><code class="hljs xml">&gt;<span class="hljs-comment">&lt;!--注入set，使用set标签--&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"setBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"全限定名"</span>&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"values"</span>&gt;</span>  <span class="hljs-comment">&lt;!--根据名称来决定注入类中哪个set--&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">set</span> <span class="hljs-attr">value-type</span>=<span class="hljs-string">"java.lang.String"</span>&gt;</span>  <span class="hljs-comment">&lt;!--value-type是set集合内的元素类型，默认是String，格式是全限定名--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></blockquote><p>注入数组</p><blockquote><pre><code class="hljs xml">&gt;<span class="hljs-comment">&lt;!--使用array标签--&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"arrayBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"全限定名"</span>&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"values"</span>&gt;</span>  <span class="hljs-comment">&lt;!--根据名称来决定注入类中哪个array--&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">array</span> <span class="hljs-attr">value-type</span>=<span class="hljs-string">"java.lang.String"</span>&gt;</span>  <span class="hljs-comment">&lt;!--value-type是set集合内的元素类型，默认是String，格式是全限定名--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></blockquote><p>注入Map</p><blockquote><pre><code class="hljs xml">&gt;<span class="hljs-comment">&lt;!--使用map标签--&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"arrayBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"全限定名"</span>&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"values"</span>&gt;</span>  <span class="hljs-comment">&lt;!--根据名称来决定注入类中哪个Map--&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">map</span> <span class="hljs-attr">key-type</span>=<span class="hljs-string">"全限定名"</span> <span class="hljs-attr">value-type</span>=<span class="hljs-string">"全限定名"</span>&gt;</span><span class="hljs-comment">&lt;!--默认是String类型--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">""</span> <span class="hljs-attr">value-ref</span>=<span class="hljs-string">""</span>/&gt;</span><span class="hljs-comment">&lt;!--key和value是你想注入的键值对--&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></blockquote><p>注入Properties</p><blockquote><pre><code class="hljs xml">&gt;<span class="hljs-comment">&lt;!--使用props标签，注入java.util.Properties类型数据，键和值必须都是Srring类型数据--&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"arrayBean"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"全限定名"</span>&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"values"</span>&gt;</span>  <span class="hljs-comment">&lt;!--根据名称来决定注入中哪个Properties--&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">props</span> <span class="hljs-attr">key-type</span>=<span class="hljs-string">"全限定名"</span> <span class="hljs-attr">value-type</span>=<span class="hljs-string">"全限定名"</span>&gt;</span><span class="hljs-comment">&lt;!--String类型--&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">prop</span> <span class="hljs-attr">key</span>=<span class="hljs-string">""</span>&gt;</span>"value值"<span class="hljs-tag">&lt;/<span class="hljs-name">prop</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">props</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></blockquote><p>注入空值</p><blockquote><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">""</span>&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">null</span>/&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre></blockquote><p>注入其他Bean</p><blockquote><p>构造器注入</p><pre><code class="hljs xml">&gt;<span class="hljs-comment">&lt;!--使用constructor-arg标签的ref属性来引用其他Bean--&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">""</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"beanid"</span>/&gt;</span>&gt;<span class="hljs-comment">&lt;!--使用constructor-arg标签的子&lt;ref&gt;标签来引用其他Bean--&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">index</span>=<span class="hljs-string">""</span>&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">"beanid"</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span></code></pre><p><strong>setter</strong>注入</p><pre><code class="hljs xml">&gt;<span class="hljs-comment">&lt;!--第一种方式--&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"values"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"beanid"</span>/&gt;</span>&gt;<span class="hljs-comment">&lt;!--第二种方式--&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"values"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">ref</span> <span class="hljs-attr">bean</span>=<span class="hljs-string">"beanid"</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span></code></pre></blockquote><h5 id="P命名空间注入"><a href="#P命名空间注入" class="headerlink" title="P命名空间注入"></a><strong>P命名空间注入</strong></h5><blockquote><p>P就是propertity的缩写</p><p>P命名空间对应所有的属性注入</p><p>添加配置文件约束代码：xmlns:p=”<a href="http://www.springframework.org/schema/p&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/p&quot;</a></p><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"p-namespace"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.example.ExampleBean"</span></span><span class="hljs-tag">  <span class="hljs-attr">p:email</span>=<span class="hljs-string">"someone@somewhere.com"</span>/&gt;</span></code></pre></blockquote><h5 id="C命名空间注入"><a href="#C命名空间注入" class="headerlink" title="C命名空间注入"></a><strong>C命名空间注入</strong></h5><blockquote><p>c：就是constrctor-arg的缩写</p><p>c命名空间对应构造器注入</p><p>添加约束代码：xmlns:c=”<a href="http://www.springframework.org/schema/c&quot;" target="_blank" rel="noopener">http://www.springframework.org/schema/c&quot;</a></p><pre><code class="hljs xml">&gt;<span class="hljs-comment">&lt;!--原来是这样实现构造器注入--&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"beanOne"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"x.y.ThingOne"</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"thingTwo"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"beanTwo"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"thingThree"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"beanThree"</span>/&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"email"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"something@somewhere.com"</span>/&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>&gt;<span class="hljs-comment">&lt;!--c命名空间出来以后是这样实现的--&gt;</span>&gt;<span class="hljs-comment">&lt;!-- c-namespace declaration with argument names --&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"beanOne"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"x.y.ThingOne"</span> <span class="hljs-attr">c:thingTwo-ref</span>=<span class="hljs-string">"beanTwo"</span></span><span class="hljs-tag">  <span class="hljs-attr">c:thingThree-ref</span>=<span class="hljs-string">"beanThree"</span> <span class="hljs-attr">c:email</span>=<span class="hljs-string">"something@somewhere.com"</span>/&gt;</span></code></pre></blockquote><p>内部Bean</p><blockquote><p>内部Bean就是在<property>或<constructor-arg>内通过<bean>标签定义的Bean，该Bean不管是否指定id或name，该Bean都会有唯一的匿名标识符，而且不能指定别名，该内部Bean对其他外部Bean不可见</p></blockquote><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200603113111.jpg" srcset="/img/loading.gif" alt="img"></p><h4 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h4><blockquote><p>Spring提供“singleton”和“prototype”两种基本作用域，另外提供“request”、“session”、“global session”三种web作用域；</p></blockquote><p><strong>singleton</strong>（默认）</p><blockquote><p>指“singleton”作用域的Bean只会在每个Spring IoC容器中存在一个实例，而且其完整生命周期完全由Spring容器管理。对于所有获取该Bean的操作Spring容器将只返回同一个Bean。</p><p>Spring是注册表单例设计模式的实现，消除了编程式单例，而且对代码是非入侵式。</p><p>Spring不仅会缓存单例对象，Bean定义也是会缓存的，对于惰性初始化的对象是在首次使用时根据Bean定义创建并存放于单例缓存池。</p><p>注册表单例设计模式：先将需要单例的实例通过唯一键注册到注册表，然后通过键来获取单例</p><p>注意：Spring中单例模式指的是这种类型的bean在同一个容器中只存在一个共享实例，而GoF的单例模式指的是一个类加载器中只存在一个这种类型的实例</p></blockquote><p><strong>prototype</strong></p><blockquote><p>原型，指每次向Spring容器请求获取Bean都返回一个全新的Bean，相对于“singleton”来说就是不缓存Bean，每次都是一个根据Bean定义创建的全新Bean。</p><p>Spring不会缓存原型对象，而是根据Bean定义每次请求返回一个全新的Bean：</p><p>Spring中的原型和GoF中介绍的原型含义是不一样的：</p><p>GoF通过用原型实例指定创建对象的种类，而Spring容器用Bean定义指定创建对象的种类；</p><p>GoF通过拷贝这些原型创建新的对象，而Spring容器根据Bean定义创建新对象。</p><p>其相同地方都是根据某些东西创建新东西，而且GoF原型必须显示实现克隆操作，属于侵入式，而Spring容器只需配置即可，属于非侵入式。</p></blockquote><p><strong>Web应用中的作用域</strong></p><blockquote><p>在Web应用中，我们可能需要将数据存储到request、session、global session。因此Spring提供了三种Web作用域：request、session、globalSession。</p><p><strong>request</strong>作用域：表示每个请求需要容器创建一个全新Bean</p><p><strong>session</strong>作用域：表示每个会话需要容器创建一个全新Bean</p><p><strong>globalSession</strong>：类似于session作用域，只是其用于portlet环境的web应用</p></blockquote><h4 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h4><p>之前在xml中Bean的配置都是手动装配，</p><blockquote><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"cat"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"..."</span>&gt;</span>   <span class="hljs-comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"..."</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"..."</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">""</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">"cat"</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre></blockquote><p>自动装配</p><blockquote><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"..."</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"..."</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">"byName"</span>&gt;</span><span class="hljs-comment">&lt;!--byName会自动查找，和自己对象set方法后面对应的bean，弊端是名字相同会报错--&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"..."</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"..."</span> <span class="hljs-attr">autowire</span>=<span class="hljs-string">"byType"</span>&gt;</span><span class="hljs-comment">&lt;!--byName会自动查找，和自己对象属性类型相同的bean，弊端类型相同会报错--&gt;</span></code></pre><p>byName需要保证所有bean的id唯一，并且需要保证和注入的set属性的方法值相同</p><p>byType是需要保证所有bean的类型唯一，并且需要保证和注入的set属性的类型相同</p></blockquote><h4 id="使用注解开发"><a href="#使用注解开发" class="headerlink" title="使用注解开发"></a>使用注解开发</h4><p>使用注解需要加入一些支持</p><blockquote><pre><code class="hljs xml">&gt;<span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>&gt;<span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">"http://www.springframework.org/schema/beans"</span></span><span class="hljs-tag">&gt;</span>xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;xmlns:context="http://www.springframework.org/schema/context"&gt;xsi:schemaLocation="http://www.springframework.org/schema/beans  https://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/context  https://www.springframework.org/schema/context/spring-context.xsd"&gt;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">context:annotation-config</span>/&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span></code></pre></blockquote><p>使用了注解@Autowired：原来xml文件可以写成</p><blockquote><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"XX"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">""</span>&gt;</span></code></pre><p>在java对应的类中加入注解@Autowired</p><p>@Autowired：可以直接在属性、set方法上使用。</p><p>使用@Autowired，可以不写set方法，@Autowired是通过byType来实现的，所以需要你这个属性在IOC容器中存在</p><p>@Autowired注解，默认是true，意思是不允许为null，如果修改为@Autowired(required=false)，意思是可以为null</p><p>如果有多个Bean对象时，Autowired通过byType都无法找到应该装配哪一个，需要搭配@Qualifier注解一起使用</p></blockquote><p>@Resource注解</p><blockquote><p>@Autowired是通过byType实现的</p><p>@Resource是通过byName/byType实现的，默认是byName，如果找不到就通过byType实现。</p><p>@Resource比@Autowired更强大</p></blockquote><p>@component注解：组件组件，搭配@V alue使用</p><blockquote><pre><code class="hljs xml">&gt;<span class="hljs-tag">&lt;<span class="hljs-name">context:component-scan</span> <span class="hljs-attr">base-package</span>=<span class="hljs-string">"XX.XX"</span>&gt;</span><span class="hljs-comment">&lt;!--意思是会扫描XX.XX包下的所有组件--&gt;</span></code></pre><p>衍生注解：@Repository，@Service，@Controller，都是组件的意思</p><p>加上这些注解就表示这个类要被spring托管了，是Spring的一个组件了</p><p>这四个注解功能都是一样的，意思都是将某个类注册到Spring容器中，然后装配</p></blockquote><p><strong>xml用来管理bean，注解负责完成属性的注入</strong></p><h4 id="使用Java配置注解开发"><a href="#使用Java配置注解开发" class="headerlink" title="使用Java配置注解开发"></a>使用Java配置注解开发</h4><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200609183446.png" srcset="/img/loading.gif" alt="image-20200609183441950"></p><blockquote><p>@Configuration：表示这个类是一个配置类</p><p>注意如果使用了配置类，那么只能通过AnnotationConfig上下文获取IOC容器</p><pre><code class="hljs java">&gt;ApplicationContext context=<span class="hljs-keyword">new</span> AnnotationConfigApplicationContext(xx<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;&gt;User getUser=(User)context.getBean(<span class="hljs-string">"getUser"</span>);&gt;sout(getUser.getName);</code></pre></blockquote><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200603113111.jpg" srcset="/img/loading.gif" alt="img"></p><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>AOP：Aspect Oriented Programming，面向切面编程，核心原理是使用动态代理模式在方法执行前后或者出现异常时添加相关逻辑</p><p>AOP一般被用来解决一些系统交叉业务的织入，比如日志啦、事务。</p><p>比如我想在方法1、2、3中添加一个打印日志功能，那我就需要去修改方法1、2、3中的代码，添加日志功能。但这违法了设计原则中开闭原则（扩展开发，修改关闭）。</p><p>那怎么办？简单点，写一个子类，在子类中重写这三个方法，那假如方法要是多呢？都一个个重写？</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200603120706.png" srcset="/img/loading.gif" alt="image-20200603120703141"></p><p>那能不能让这些方法在执行前（或者执行后）统一调用一个代码呢？如下图</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200603121316.png" srcset="/img/loading.gif" alt=""></p><p>我们原来是在方法内部添加打印日志功能，AOP是在执行方法前添加日志功能（交叉业务），原因是AOP的底层是使用了动态代理技术，动态代理调用了原方法，AOP只不过是在在原方法的基础上新创建了一个方法，然后在新方法的内部添加功能，添加的功能代码也称之为增强代码。如下图</p><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200603121649.png" srcset="/img/loading.gif" alt="image-20200603121645266"></p><p>AOP通过动态代理实现的，动态代理是在<strong>运行期间</strong>，生成一个代理对象</p><blockquote><p>静态代理是用户自己写代理对象，比如继承一个类，重写这个类中的方法</p><p>动态代理是在程序运行期，生成一个代理对象</p></blockquote><p>Spring AOP的动态代理，有分成两种：基于接口的动态代理和基于类的动态代理</p><p>基于接口的动态代理：如果要代理的对象，继承了某个接口，那么Spring AOP就会使用JDK Proxy创建代理对象</p><p>基于类的动态代理：如果要代理的对象没有继承接口，那么Spring AOP就会使用Cglib，生成一个被代理对象的子类，作为代理</p><h4 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h4><p>Advice（通知/增强）：就是你想要新增加的功能，比如打印日志。<strong>“干什么”</strong></p><p>Aspect（切面）：切面是通知和切点所在的类。<strong>”在哪干和干什么集合“</strong></p><p>Joint point（连接点）：Spring允许使用Advice的地方，比如方法的前后，抛出异常，都可以是连接点。<strong>”在哪干“</strong>。<strong>需要增强的方法就叫做连接点</strong></p><p>Pointcut（切点）：不是类中所有的方法都需要新增加一些功能，把需要新增加功能的方法集合起来就是切点，可以理解为连接点的集合。<strong>“在哪干的集合”</strong>。<strong>需要增强的方法的集合就叫做切点</strong></p><p>introduction（引入）：允许我们向现有的类添加新方法属性，就是把切面用到了目标类中。“<strong>干什么</strong>”</p><p>Target（目标对象）：引入中所提到的目标类，也就是要被通知的对象，也就是真正的业务逻辑，他可以在毫不知情的情况下，被咱们织入切面。而自己专注于业务本身的逻辑。“<strong>对谁干</strong>”</p><p>Weaving（织入）：把切面应用到目标对象来创建新的代理对象的过程。有3种方式，spring采用的是运行时进行织入</p><h4 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h4><blockquote><ul><li><strong>前置通知（Before Advice</strong>）:在切入点选择的连接点处的方法之前执行的通知，该通知不影响正常程序执行流程（除非该通知抛出异常，该异常将中断当前方法链的执行而返回）。</li><li><strong>后置通知（After Advice</strong>）:在切入点选择的连接点处的方法之后执行的通知，包括如下类型的后置通知：</li><li><strong>后置返回通知（After returning Advice</strong>）:在切入点选择的连接点处的方法正常执行完毕时执行的通知，必须是连接点处的方法没抛出任何异常正常返回时才调用后置通知。</li><li><strong>后置异常通知（After throwing Advice）</strong>: 在切入点选择的连接点处的方法抛出异常返回时执行的通知，必须是连接点处的方法抛出任何异常返回时才调用异常通知。</li><li><strong>后置最终通知（After finally Advice</strong>）: 在切入点选择的连接点处的方法返回时执行的通知，不管抛没抛出异常都执行，类似于Java中的finally块。</li><li><strong>环绕通知（Around Advices**</strong>）：环绕着在切入点选择的连接点处的方法所执行的通知，环绕通知可以在方法调用之前和之后自定义任何行为，并且可以决定是否执行连接点处的方法、替换返回值、抛出异常等等。</li></ul></blockquote><p><img src="https://gitee.com/monkey_stu/image/raw/master/img/20200603185338.JPG" srcset="/img/loading.gif" alt="img"></p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>Spring中使用到的设计模式</p><h5 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h5><p>BeanFactory</p><h5 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h5><p>FactoryBean接口</p><h5 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h5><p>getSingleton</p><h5 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h5><p>SpringMVC中的适配器HandlerAdatper</p><h5 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h5><p>Spring中用到的包装器模式在类名上有两种表现：一种是类名中含有Wrapper，另一种是类名中含有Decorator</p><h5 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h5><p>AOP底层，就是动态代理模式的实现</p><h5 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h5><p>spring的事件驱动模型使用的是 观察者模式 ，Spring中Observer模式常用的地方是listener的实现</p><h5 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h5><p>Spring框架的资源访问Resource接口。该接口提供了更强的资源访问能力，Spring 框架本身大量使用了 Resource 接口来访问底层资源。</p><h5 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h5><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>Spring IOC</p><p><a href="https://www.iteye.com/category/206533?page=2" target="_blank" rel="noopener">https://www.iteye.com/category/206533?page=2</a> （这个系列都是精华）</p><p>Spring AOP术语理解：<a href="https://blog.csdn.net/changudeng1992/article/details/80625134" target="_blank" rel="noopener">https://blog.csdn.net/changudeng1992/article/details/80625134</a></p>]]></content>
    
    
    <categories>
      
      <category>SSM</category>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
